<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>16_常用时间API：时间类，日期类</title>
    <link href="/2023/02/15/16-Java%E5%B8%B8%E7%94%A8%E6%97%B6%E9%97%B4API%EF%BC%9A%E6%97%B6%E9%97%B4%E7%B1%BB%EF%BC%8C%E6%97%A5%E6%9C%9F%E7%B1%BB/"/>
    <url>/2023/02/15/16-Java%E5%B8%B8%E7%94%A8%E6%97%B6%E9%97%B4API%EF%BC%9A%E6%97%B6%E9%97%B4%E7%B1%BB%EF%BC%8C%E6%97%A5%E6%9C%9F%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-常用时间API：时间类，日期类"><a href="#Java-常用时间API：时间类，日期类" class="headerlink" title="Java 常用时间API：时间类，日期类"></a>Java 常用时间API：时间类，日期类</h1><h3 id="JDK8-之前"><a href="#JDK8-之前" class="headerlink" title="JDK8 之前"></a>JDK8 之前</h3><h4 id="Date类-表示日期时间的类"><a href="#Date类-表示日期时间的类" class="headerlink" title="Date类 : 表示日期时间的类"></a>Date类 : 表示日期时间的类</h4><ol><li><p>构造方法 :</p><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public Date()</td><td>创建一个Date对象，代表的是系统当前此刻日期时间。</td></tr><tr><td>public Date(long time)</td><td>把时间毫秒值转换成Date日期对象。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Date</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">0L</span>);<br>System.out.println(d1);<span class="hljs-comment">//Thu Jan 01 00:00:01 GMT+08:00 1970</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">1000L</span>);<br>System.out.println(d2);<span class="hljs-comment">//Thu Jan 01 08:00:01 GMT+08:00 1970</span><br></code></pre></td></tr></table></figure></li><li><p>常见方法 :</p><table><thead><tr><th>常见方法</th><th>说明</th></tr></thead><tbody><tr><td>public long getTime()</td><td>返回从1970年1月1日  00:00:00走到此刻的总的毫秒数</td></tr><tr><td>public void setTime(long time)</td><td>设置日期对象的时间为当前时间毫秒值对应的时间</td></tr></tbody></table></li></ol><h4 id="SimpleDateFormat-类：日期格式化"><a href="#SimpleDateFormat-类：日期格式化" class="headerlink" title="SimpleDateFormat 类：日期格式化"></a>SimpleDateFormat 类：日期格式化</h4><p>1.构造方法 :</p><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public SimpleDateFormat()</td><td>构造一个SimpleDateFormat日期格式化对象，使用默认格式</td></tr><tr><td>public SimpleDateFormat(String pattern)</td><td>构造一个SimpleDateFormat日期格式化对象，使用指定的格式</td></tr></tbody></table><p>2.常见方法 :</p><table><thead><tr><th>格式化方法</th><th>说明</th></tr></thead><tbody><tr><td>public final String <strong>format(Date date)</strong></td><td>将日期对象格式化成日期时间字符串</td></tr><tr><td>public final Date <strong>parse(String source)</strong></td><td>将日期字符串解析为日期类型</td></tr></tbody></table><h5 id="API中SimpleDateFormat类的指定模式规范："><a href="#API中SimpleDateFormat类的指定模式规范：" class="headerlink" title="API中SimpleDateFormat类的指定模式规范："></a>API中SimpleDateFormat类的指定模式规范：</h5> <img src="/2023/02/15/16-Java%E5%B8%B8%E7%94%A8%E6%97%B6%E9%97%B4API%EF%BC%9A%E6%97%B6%E9%97%B4%E7%B1%BB%EF%BC%8C%E6%97%A5%E6%9C%9F%E7%B1%BB/API-SimpleDateFormat.png" class="">  <img src="/2023/02/15/16-Java%E5%B8%B8%E7%94%A8%E6%97%B6%E9%97%B4API%EF%BC%9A%E6%97%B6%E9%97%B4%E7%B1%BB%EF%BC%8C%E6%97%A5%E6%9C%9F%E7%B1%BB/API-SimpleDateFormat%E4%B8%AD%E6%96%87.png" class=""> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException &#123;       <span class="hljs-comment">//parse 异常</span><br> <span class="hljs-comment">//将日期对象格式化成日期时间字符串   </span><br>    <span class="hljs-comment">// 创建一个使用默认模式的日期格式化对象</span><br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">simpleDateFormat1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>();<br>    <span class="hljs-comment">// 创建一个指定模式的日期格式化对象</span><br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">simpleDateFormat2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日&quot;</span>);  <span class="hljs-comment">//如果只有yy,定义为年份后两位</span><br>    <span class="hljs-comment">// 创建Date对象封装此刻的时间</span><br>    <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-comment">// 将日期对象转换为字符串</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> simpleDateFormat1.format(date);<span class="hljs-comment">//2023/2/15 下午6:46   </span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> simpleDateFormat2.format(date);<span class="hljs-comment">//2023年02月15日</span><br>    <br><span class="hljs-comment">//将日期字符串解析为日期类型 </span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2023年1月1日&quot;</span>;<br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">simpleDateFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日&quot;</span>);<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> simpleDateFormat.parse(today);<span class="hljs-comment">//today必须和simpleDateFormat指定的格式相同才能解析，否则报错</span><br>    System.out.println(date);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建一个日期格式化对象, 使用 [默认模式]</span><br>        <span class="hljs-comment">// SimpleDateFormat simpleDateFormat = new SimpleDateFormat();</span><br><br>        <span class="hljs-comment">// 创建一个日期格式化对象, [手动指定模式]</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">simpleDateFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日&quot;</span>);<br><br>        <span class="hljs-comment">// 创建Date对象, 封装此刻的时间</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br>        <span class="hljs-comment">// 将日期对象, 转换为字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> simpleDateFormat.format(date);<br><br>        System.out.println(result);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="Calendar-类：系统此刻时间对应的日历，用于单独获取、修改时间中的年、月、日、时、分、秒"><a href="#Calendar-类：系统此刻时间对应的日历，用于单独获取、修改时间中的年、月、日、时、分、秒" class="headerlink" title="Calendar 类：系统此刻时间对应的日历，用于单独获取、修改时间中的年、月、日、时、分、秒"></a>Calendar 类：系统此刻时间对应的日历，用于单独获取、修改时间中的年、月、日、时、分、秒</h4><p><strong>创建对象</strong></p><p><strong>注： Calendar是一个抽象类，不能直接创建对象，使用静态方法创建</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static Calendar getInstance()</td><td>获取当前时间的日历对象</td></tr></tbody></table><p><strong>常用方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public int get(int field)</td><td>获取日历中的某个字段信息</td></tr><tr><td>public void set(int field,int value)</td><td>修改日历的某个字段信息</td></tr><tr><td>public void add(int field,int amount)</td><td>为某个字段增加&#x2F;减少指定的值</td></tr><tr><td>public final Date getTime()</td><td>获取日期对象</td></tr><tr><td>public final setTime(Date date)</td><td>给日历设置日期对象</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getMethod</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Calendar c : 抽象类</span><br>        <span class="hljs-comment">// Calendar.getInstance() : 获取的是子类对象</span><br>        <span class="hljs-comment">// 1. 获取当前时间的日历对象</span><br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>     <br>        <span class="hljs-comment">// 2. 调用get方法, 获取指定字段的信息</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> c.get(Calendar.YEAR);<br>        System.out.println(year);<span class="hljs-comment">//年</span><br><br>        <span class="hljs-comment">// 注意Calendar类的月份是 0~11, 常规的月份要 + 1</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> c.get(Calendar.MONTH);<br>        System.out.println(month + <span class="hljs-number">1</span>);<span class="hljs-comment">//月</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> c.get(Calendar.DAY_OF_MONTH);<br>        System.out.println(day);<span class="hljs-comment">//星期</span><br><br><span class="hljs-comment">//这里的星期：星期日为每周第一天，定义一个数组存放，用索引值调用</span><br>        <span class="hljs-type">char</span>[] weeks = &#123;<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;日&#x27;</span>, <span class="hljs-string">&#x27;一&#x27;</span>, <span class="hljs-string">&#x27;二&#x27;</span>, <span class="hljs-string">&#x27;三&#x27;</span>, <span class="hljs-string">&#x27;四&#x27;</span>, <span class="hljs-string">&#x27;五&#x27;</span>, <span class="hljs-string">&#x27;六&#x27;</span>&#125;;<br>        <span class="hljs-comment">//                0     1     2    3     4     5    6    7</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">weekIndex</span> <span class="hljs-operator">=</span> c.get(Calendar.DAY_OF_WEEK);<br>        System.out.println(weeks[weekIndex]);<span class="hljs-comment">//日</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">dayOfYear</span> <span class="hljs-operator">=</span> c.get(Calendar.DAY_OF_YEAR);<br>        System.out.println(dayOfYear);<span class="hljs-comment">//是一年的第一天</span><br>    &#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMethod</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>    c.set(Calendar.YEAR, <span class="hljs-number">2022</span>);<span class="hljs-comment">//设置年为2022</span><br>    c.set(<span class="hljs-number">2000</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">//设置日期为：2000年1月1日，输出月份值为2</span><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMethod</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>    c.add(Calendar.YEAR, -<span class="hljs-number">1</span>);<span class="hljs-comment">//年份-1</span><br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p><strong>注：get方法的参数为Calendar类中的静态常量</strong></p><p>​     Calendar.YEAR : 获取年<br>​     Calendar.MONTH : 月份是0~11, 常规日期要+1<br>​     Calendar.DAY_OF_MONTH : 获取日<br>​     Calendar.DAY_OF_WEEK : 获取星期, 但是1代表周日，7代表周六<br>​     Calendar.DAY_OF_YEAR : 获取一年中的第几天</p>          </div><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>1.判断 2030年3月3日 周几</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();<span class="hljs-comment">// 1. 获取日期对象 (此刻的时间)</span><br>c.set(<span class="hljs-number">2030</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<span class="hljs-comment">// 2. 调用set方法, 将时间设置为 2030年3月3日; 月份设置2</span><br><span class="hljs-type">char</span>[] weeks = &#123;<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;日&#x27;</span>, <span class="hljs-string">&#x27;一&#x27;</span>, <span class="hljs-string">&#x27;二&#x27;</span>, <span class="hljs-string">&#x27;三&#x27;</span>, <span class="hljs-string">&#x27;四&#x27;</span>, <span class="hljs-string">&#x27;五&#x27;</span>, <span class="hljs-string">&#x27;六&#x27;</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">weekIndex</span> <span class="hljs-operator">=</span> c.get(Calendar.DAY_OF_WEEK);<span class="hljs-comment">// 3. 获取星期</span><br></code></pre></td></tr></table></figure><p>2.键盘录入一个日期字符串,  判断是一年的第几天</p><p><em>分析：</em></p><ol><li>使用SimpleDateFormat,  将日期字符串转换为日期对象</li><li>将日期对象, 转换为Calendar对象</li><li>调用get方法, 获取是一年中的第几天</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入:&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">dateContent</span> <span class="hljs-operator">=</span> sc.nextLine();<br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">dateFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日&quot;</span>); <span class="hljs-comment">// 1. 使用SimpleDateFormat将日期字符串转换为日期对象</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> dateFormat.parse(dateContent);<br><span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>c.setTime(date);<span class="hljs-comment">// 2. 将日期对象, 转换为Calendar对象</span><br><span class="hljs-type">int</span> <span class="hljs-variable">dayOfYear</span> <span class="hljs-operator">=</span> c.get(Calendar.DAY_OF_YEAR);<span class="hljs-comment">// 3. 调用get方法, 获取一年中的第几天</span><br></code></pre></td></tr></table></figure><h3 id="前后对比"><a href="#前后对比" class="headerlink" title="前后对比"></a>前后对比</h3><h4 id="JDK8之前的传统的时间API"><a href="#JDK8之前的传统的时间API" class="headerlink" title="JDK8之前的传统的时间API"></a>JDK8之前的传统的时间API</h4><ol><li>设计欠妥，使用不方便，部分已经淘汰</li><li>都是可变对象，修改后会丢失最开始的时间信息      <em>覆盖之前的时间信息</em></li><li>线程不安全</li><li>只能精确到毫秒</li></ol><h4 id="JDK8开始之后新增的时间API"><a href="#JDK8开始之后新增的时间API" class="headerlink" title="JDK8开始之后新增的时间API"></a>JDK8开始之后新增的时间API</h4><ol><li>设计更合理，功能丰富，使用更方便</li><li>都是不可变对象，修改后会返回新的时间对象，不会丢失最开始的时间    <em>每一次修改都返回一个新的对象</em></li><li>线程安全</li><li>能精确到毫秒、纳秒</li></ol><h3 id="JDK8-之后"><a href="#JDK8-之后" class="headerlink" title="JDK8 之后"></a>JDK8 之后</h3><h4 id="日历类"><a href="#日历类" class="headerlink" title="日历类"></a>日历类</h4><p>LocalDate：代表本地日期(年、月、日、星期)<br>LocalTime：代表本地时间(时、分、秒、纳秒)<br>LocalDateTime：代表本地日期、时间(年、月、日、星期、时、分、秒、纳秒)</p><h5 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a>获取对象</h5><table><thead><tr><th>方法名</th><th>示例</th></tr></thead><tbody><tr><td>public static Xxxx now(): 获取系统<strong>当前</strong>时间对应的该对象</td><td>LocaDate ld &#x3D; LocalDate.now();LocalTime lt &#x3D; LocalTime.now();     LocalDateTime ldt &#x3D; LocalDateTime.now();</td></tr><tr><td>public static Xxxx of(…)：获取<strong>指定</strong>时间的对象</td><td>LocalDate localDate1 &#x3D; LocalDate.of(2099 , 11,11);     LocalTime localTime1 &#x3D; LocalTime.of(9, 8, 59);LocalDateTime localDateTime1 &#x3D; LocalDateTime.of(2025, 11, 16, 14, 30, 01);</td></tr></tbody></table><h5 id="获取对象中的年月日时分秒"><a href="#获取对象中的年月日时分秒" class="headerlink" title="获取对象中的年月日时分秒"></a>获取对象中的年月日时分秒</h5><table><thead><tr><th>方法名</th><th>功能</th></tr></thead><tbody><tr><td>int getYear()</td><td>获取年 字段</td></tr><tr><td>Month getMonth()</td><td>使用 Month 枚举获取年份字段</td></tr><tr><td>int getMonthValue()</td><td>获取1到12之间的月份字段</td></tr><tr><td>int getDayOfMonth()</td><td>获取日</td></tr><tr><td>DayOfWeek getDayOfWeek()</td><td>获取星期 字段，即枚举 DayOfWeek</td></tr><tr><td>int getHour()</td><td>获取时</td></tr><tr><td>int getMinute()</td><td>获取分</td></tr><tr><td>int getSecond()</td><td>获取秒</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<span class="hljs-comment">// 获取此刻的时间对象</span><br>System.out.println(now);<br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">2000</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 指定2000年1月1日1时1分</span><br>System.out.println(now.getYear() + <span class="hljs-string">&quot;年&quot;</span>);<br>System.out.println(now.getMonth() + <span class="hljs-string">&quot;月&quot;</span>);<span class="hljs-comment">// 英文字符串月份</span><br>System.out.println(now.getMonthValue() + <span class="hljs-string">&quot;月&quot;</span>);<span class="hljs-comment">// int型月份</span><br>System.out.println(nowDateTime.getMonth().getValue()); <span class="hljs-comment">// 输出同上，不一样的写法</span><br>System.out.println(now.getDayOfMonth() + <span class="hljs-string">&quot;日&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;dayOfYear：&quot;</span> + nowDateTime.getDayOfYear());<span class="hljs-comment">// 年的第几天</span><br>System.out.println(nowDateTime.getDayOfWeek());<span class="hljs-comment">// 星期</span><br>System.out.println(nowDateTime.getDayOfWeek().getValue());<br></code></pre></td></tr></table></figure><h5 id="修改年月日时分秒相关"><a href="#修改年月日时分秒相关" class="headerlink" title="修改年月日时分秒相关"></a>修改年月日时分秒相关</h5><div class="note note-success">            <p><strong>LocalDateTime 、LocalDate 、LocalTime 都是不可变的,  方法返回的是一个新对象</strong></p>          </div><table><thead><tr><th><strong>方法名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>withHour、withMinute、withSecond、withNano</td><td>修改时间，返回新时间对象</td></tr><tr><td>plusHours、plusMinutes、plusSeconds、plusNanos</td><td>把某个信息加多少，返回新时间对象</td></tr><tr><td>minusHours、minusMinutes、minusSeconds、minusNanos</td><td>把某个信息减多少，返回新时间对象</td></tr><tr><td>equals &#x2F; isBefore &#x2F; isAfter</td><td>判断2个时间对象，是否相等，在前还是在后</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">nowTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><span class="hljs-comment">// with : 设置</span><br><span class="hljs-comment">//withYear(年), withMonth(月), withDayOfMonth(日), withHour(时), withMinute(分), withSecond(秒), withNano(纳秒)</span><br>System.out.println(nowTime.withYear(<span class="hljs-number">2000</span>));<span class="hljs-comment">//设置年2000</span><br>System.out.println(nowTime.withMonth(<span class="hljs-number">1</span>));<span class="hljs-comment">//设置月1</span><br>System.out.println(nowTime.withDayOfMonth(<span class="hljs-number">1</span>));<span class="hljs-comment">//设置日1</span><br>System.out.println(nowTime.withHour(<span class="hljs-number">1</span>));<span class="hljs-comment">//设置小时1</span><br>System.out.println(nowTime.withNano(<span class="hljs-number">1</span>));<span class="hljs-comment">//设置纳秒1</span><br><span class="hljs-comment">//修改原日历</span><br>nowTime = LocalDate.of(<span class="hljs-number">2008</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>);<span class="hljs-comment">//上面的设置不改变原先数据，要修改的话用of</span><br><span class="hljs-comment">// minus : 减去</span><br>System.out.println(nowTime.minusHours(<span class="hljs-number">1</span>));   <span class="hljs-comment">//减一小时</span><br>System.out.println(nowTime.minusSeconds(<span class="hljs-number">1</span>));<span class="hljs-comment">//减一秒钟,nowTime对象不变，输出的是新对象</span><br><span class="hljs-comment">// plus : 加</span><br>System.out.println(nowTime.plusMinutes(<span class="hljs-number">1</span>));<span class="hljs-comment">//加一分钟</span><br><br><span class="hljs-comment">//判断两个日期在前/在后/相等 返回true/false</span><br>System.out.println(date1.isBefore(date2));<br>System.out.println(date1.isAfter(date2));<br>System.out.println(date1.equals(date2));<br></code></pre></td></tr></table></figure><h5 id="LocalDateTime-转-LocalDate-和-Local-Time"><a href="#LocalDateTime-转-LocalDate-和-Local-Time" class="headerlink" title="LocalDateTime 转 LocalDate 和 Local Time"></a>LocalDateTime 转 LocalDate 和 Local Time</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public LocalDate toLocalDate()</td><td>转换成一个LocalDate对象</td></tr><tr><td>public LocalTime toLocalTime()</td><td>转换成一个LocalTime对象</td></tr></tbody></table><p>——-&gt;  LocalDateTime拆分两块功能给LocalDate， LocalTime</p><h4 id="日期格式化类"><a href="#日期格式化类" class="headerlink" title="日期格式化类"></a>日期格式化类</h4><p><strong>格式化时间</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>static DateTimeFormatter <strong>ofPattern</strong>(格式)</td><td>获取格式对象</td></tr><tr><td>String <strong>format</strong>(时间对象)</td><td>按照指定方式格式化</td></tr></tbody></table><h5 id="解析时间"><a href="#解析时间" class="headerlink" title="解析时间 :"></a>解析时间 :</h5><p>​        LocalDateTime.parse(“解析字符串”, 格式化对象);<br>​        LocalDate.parse(“解析字符串”, 格式化对象);<br>​        LocalTime.parse(“解析字符串”, 格式化对象);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">nowTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">formatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年M月d日&quot;</span>);<span class="hljs-comment">// 获取格式化对象</span><br><span class="hljs-type">String</span> <span class="hljs-variable">gsltime</span> <span class="hljs-operator">=</span> formatter.format(nowTime);  <span class="hljs-comment">// 格式化</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2000年01月01日&quot;</span>;<br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> LocalDate.parse(time, formatter);  <span class="hljs-comment">// 解析字符串</span><br></code></pre></td></tr></table></figure><div class="note note-info">            <p><code>DateTimeFormatter.ofPattern(&quot;yyyy年MM月dd日&quot;);</code>   ：不能解析2000-1-1</p><p><code>DateTimeFormatter.ofPattern(&quot;yyyy年M月d日&quot;);</code> ：可以解析2000-1-1，也可以解析2000-01-01</p>          </div><h4 id="时间类"><a href="#时间类" class="headerlink" title="时间类"></a>时间类</h4><h5 id="Instant-时间戳：表示时间的类，类似Date类"><a href="#Instant-时间戳：表示时间的类，类似Date类" class="headerlink" title="Instant 时间戳：表示时间的类，类似Date类"></a>Instant 时间戳：表示时间的类，类似Date类</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>static Instant <strong>now</strong>()</td><td>获取当前时间的Instant对象（标准时间）</td></tr><tr><td>static Instant <strong>ofXxxx</strong>(long epochMilli)</td><td>根据（秒&#x2F;毫秒&#x2F;纳秒）获取Instant对象</td></tr><tr><td>ZonedDateTime <strong>atZone</strong>(ZoneId zone)</td><td>指定时区</td></tr><tr><td>boolean <strong>isXxx</strong>(Instant otherInstant)</td><td>判断系列的方法</td></tr><tr><td>Instant <strong>minusXxx</strong>(long millisToSubtract)</td><td>减少时间系列的方法</td></tr><tr><td>Instant <strong>plusXxx</strong>(long millisToSubtract)</td><td>增加时间系列的方法</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取当前时间的Instant对象（标准时间）</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> Instant.now();<br>System.out.println(<span class="hljs-string">&quot;当前时间为(世界标准时间):&quot;</span> + now);<br>System.out.println(<span class="hljs-string">&quot;------------------&quot;</span>);<br><br><span class="hljs-comment">// 根据（秒/毫秒/纳秒）获取Instant对象</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant1</span> <span class="hljs-operator">=</span> Instant.ofEpochMilli(<span class="hljs-number">1000</span>);<br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant2</span> <span class="hljs-operator">=</span> Instant.ofEpochSecond(<span class="hljs-number">5</span>);<br><br>System.out.println(instant1);<br>System.out.println(instant2);<br>System.out.println(<span class="hljs-string">&quot;------------------&quot;</span>);<br><br><span class="hljs-comment">// 指定时区</span><br><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">zonedDateTime</span> <span class="hljs-operator">=</span> Instant.now().atZone(ZoneId.systemDefault());<br>System.out.println(<span class="hljs-string">&quot;带时区的时间:&quot;</span> + zonedDateTime);<br>System.out.println(<span class="hljs-string">&quot;------------------&quot;</span>);<br><br><span class="hljs-comment">// 判断系列的方法</span><br>System.out.println(now.isBefore(instant1));<br>System.out.println(now.isAfter(instant1));<br>System.out.println(<span class="hljs-string">&quot;------------------&quot;</span>);<br><br><span class="hljs-comment">// 减少时间系列的方法</span><br>System.out.println(<span class="hljs-string">&quot;减1000毫秒:&quot;</span> + now.minusMillis(<span class="hljs-number">1000</span>));<br>System.out.println(<span class="hljs-string">&quot;减5秒钟:&quot;</span> + now.minusSeconds(<span class="hljs-number">5</span>));<br>System.out.println(<span class="hljs-string">&quot;------------------&quot;</span>);<br><br><span class="hljs-comment">// 增加时间系列的方法</span><br>System.out.println(<span class="hljs-string">&quot;加1000毫秒:&quot;</span> + now.plusMillis(<span class="hljs-number">1000</span>));<br>System.out.println(<span class="hljs-string">&quot;加5秒钟:&quot;</span> + now.plusSeconds(<span class="hljs-number">5</span>));<br>System.out.println(<span class="hljs-string">&quot;------------------&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="ZonedDateTime：带时区的时间类"><a href="#ZonedDateTime：带时区的时间类" class="headerlink" title="ZonedDateTime：带时区的时间类"></a>ZonedDateTime：带时区的时间类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Instant</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> Instant.now();<br>System.out.println(now);<span class="hljs-comment">//2023-02-15T13:52:18.642164400Z  世界标准时间，有8小时的时区差</span><br><br><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">zonedDateTime</span> <span class="hljs-operator">=</span> Instant.now().atZone(ZoneId.of(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>));<br>System.out.println(zonedDateTime);<span class="hljs-comment">//2023-02-15T21:53:34.572435300+08:00[Asia/Shanghai]</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>static ZonedDateTime <strong>now</strong>()</td><td>获取当前时间的ZonedDateTime对象</td></tr><tr><td>static ZonedDateTime <strong>ofXxxx</strong>(…)</td><td>获取指定时间的ZonedDateTime对象</td></tr><tr><td>ZonedDateTime <strong>withXxx</strong>(时间)</td><td>修改时间系列的方法</td></tr><tr><td>ZonedDateTime <strong>minusXxx</strong>(时间)</td><td>减少时间系列的方法</td></tr><tr><td>ZonedDateTime <strong>plusXxx</strong>(时间)</td><td>增加时间系列的方法</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取当前时间的ZonedDateTime对象</span><br><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> ZonedDateTime.now();<br>System.out.println(now);<br>System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br><br><span class="hljs-comment">// 获取指定时间的ZonedDateTime对象</span><br><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">of</span> <span class="hljs-operator">=</span> ZonedDateTime.of<br>        (<span class="hljs-number">2008</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>,<br>                ZoneId.systemDefault());<br>System.out.println(of);<br>System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br><br><span class="hljs-comment">// 修改时间系列的方法</span><br>System.out.println(now.withYear(<span class="hljs-number">2008</span>));<br>System.out.println(now.withMonth(<span class="hljs-number">8</span>));<br>System.out.println(now.withDayOfMonth(<span class="hljs-number">8</span>));<br>System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br><br><span class="hljs-comment">// 减少时间系列的方法</span><br>System.out.println(now.minusYears(<span class="hljs-number">1</span>));<br>System.out.println(now.minusMonths(<span class="hljs-number">1</span>));<br>System.out.println(now.minusDays(<span class="hljs-number">1</span>));<br>System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br><br><span class="hljs-comment">// 增加时间系列的方法</span><br>System.out.println(now.plusYears(<span class="hljs-number">1</span>));<br>System.out.println(now.plusMonths(<span class="hljs-number">1</span>));<br>System.out.println(now.plusDays(<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><h5 id="ZoneId-类：有关时区设置的类"><a href="#ZoneId-类：有关时区设置的类" class="headerlink" title="ZoneId 类：有关时区设置的类"></a>ZoneId 类：有关时区设置的类</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>static Set<String> getAvailableZoneIds()</td><td>获取Java中支持的所有时区</td></tr><tr><td>static ZoneId systemDefault()</td><td>获取系统默认时区</td></tr><tr><td>static ZoneId of(String zoneId)</td><td>获取一个指定时区</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取Java中支持的所有时区</span><br>Set&lt;String&gt; set = ZoneId.getAvailableZoneIds();<br>System.out.println(set);<span class="hljs-comment">//输出所有时区字符串</span><br>System.out.println(set.size());<span class="hljs-comment">//输出支持的时区数：601</span><br><br><span class="hljs-comment">// 获取系统默认时区</span><br><span class="hljs-type">ZoneId</span> <span class="hljs-variable">zoneId</span> <span class="hljs-operator">=</span> ZoneId.systemDefault();<br><br><span class="hljs-comment">// 获取一个指定时区并使用</span><br><span class="hljs-type">ZoneId</span> <span class="hljs-variable">of</span> <span class="hljs-operator">=</span> ZoneId.of(<span class="hljs-string">&quot;Africa/Nairobi&quot;</span>);<br><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">zonedDateTime</span> <span class="hljs-operator">=</span> Instant.now().atZone(of);<br>System.out.println(zonedDateTime);<br></code></pre></td></tr></table></figure><h4 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h4><h5 id="Duration类：计算两个“时间”间隔"><a href="#Duration类：计算两个“时间”间隔" class="headerlink" title="Duration类：计算两个“时间”间隔"></a>Duration类：计算两个“时间”间隔</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">LocalDateTime对象：data1，data2<br><span class="hljs-type">Duration</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> Duration.between(data1, data2); <span class="hljs-comment">// 第二个参数减第一个参数</span><br>System.out.println(duration.toDays());                  <span class="hljs-comment">// 两个时间差的天数</span><br>System.out.println(duration.toHours());                 <span class="hljs-comment">// 两个时间差的小时数</span><br>System.out.println(duration.toMinutes());               <span class="hljs-comment">// 两个时间差的分钟数</span><br>System.out.println(duration.toMillis());                <span class="hljs-comment">// 两个时间差的毫秒数</span><br>System.out.println(duration.toNanos());                 <span class="hljs-comment">// 两个时间差的纳秒数</span><br></code></pre></td></tr></table></figure><h5 id="Period类：计算两个“日期”间隔"><a href="#Period类：计算两个“日期”间隔" class="headerlink" title="Period类：计算两个“日期”间隔"></a>Period类：计算两个“日期”间隔</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">LocalDate对象：day1, day2<br><span class="hljs-type">Period</span> <span class="hljs-variable">period</span> <span class="hljs-operator">=</span> Period.between(day1, day2);    <span class="hljs-comment">// 第二个参数减第一个参数</span><br>System.out.println(period.getYears());         <span class="hljs-comment">// 间隔多少年</span><br>System.out.println(period.getMonths());        <span class="hljs-comment">// 间隔的月份</span><br>System.out.println(period.getDays());          <span class="hljs-comment">// 间隔的天数</span><br>System.out.println(period.toTotalMonths());    <span class="hljs-comment">// 间隔总月份</span><br></code></pre></td></tr></table></figure><h5 id="ChronoUnit类：计算两个“日期”间隔"><a href="#ChronoUnit类：计算两个“日期”间隔" class="headerlink" title="ChronoUnit类：计算两个“日期”间隔"></a>ChronoUnit类：计算两个“日期”间隔</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">LocalDateTime对象：data1，data2<br>System.out.println(<span class="hljs-string">&quot;相差的年数：&quot;</span> + ChronoUnit.YEARS.between(data1, data2));<span class="hljs-comment">// 第二个参数减第一个参数</span><br>System.out.println(<span class="hljs-string">&quot;相差的月数：&quot;</span> + ChronoUnit.MONTHS.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的周数：&quot;</span> + ChronoUnit.WEEKS.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的天数：&quot;</span> + ChronoUnit.DAYS.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的时数：&quot;</span> + ChronoUnit.HOURS.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的分数：&quot;</span> + ChronoUnit.MINUTES.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的秒数：&quot;</span> + ChronoUnit.SECONDS.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的毫秒数：&quot;</span> + ChronoUnit.MILLIS.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的微秒数：&quot;</span> + ChronoUnit.MICROS.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的纳秒数：&quot;</span> + ChronoUnit.NANOS.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的半天数：&quot;</span> + ChronoUnit.HALF_DAYS.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的十年数：&quot;</span> + ChronoUnit.DECADES.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的世纪（百年）数：&quot;</span> + ChronoUnit.CENTURIES.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的千年数：&quot;</span> + ChronoUnit.MILLENNIA.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的纪元数：&quot;</span> + ChronoUnit.ERAS.between(data1，data2));<br></code></pre></td></tr></table></figure><h5 id="实例：-生日→计算年龄"><a href="#实例：-生日→计算年龄" class="headerlink" title="实例： 生日→计算年龄"></a>实例： 生日→计算年龄</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;输入生日: &quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">birthday</span> <span class="hljs-operator">=</span> sc.nextLine();<br><br><span class="hljs-comment">// 1. 日期字符串转换为日期对象</span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">birthdayDate</span> <span class="hljs-operator">=</span> LocalDate.parse(birthday, DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年M月d日&quot;</span>));<br><br><span class="hljs-comment">// 2. 获取今天的日期对象</span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDate.now();<br><br><span class="hljs-comment">// 3. 计算时间间隔</span><br><span class="hljs-type">long</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> ChronoUnit.YEARS.between(birthdayDate, now);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>API</tag>
      
      <tag>Data类</tag>
      
      <tag>Cakendar类</tag>
      
      <tag>LocalDateTime类</tag>
      
      <tag>Instant类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15_冒泡排序，选择排序，二分查找，正则表达式</title>
    <link href="/2023/02/15/15-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%EF%BC%8C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%EF%BC%8C%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/02/15/15-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%EF%BC%8C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%EF%BC%8C%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-SE-冒泡排序-选择排序-二分查找-正则表达式的使用"><a href="#Java-SE-冒泡排序-选择排序-二分查找-正则表达式的使用" class="headerlink" title="Java SE    冒泡排序,选择排序,二分查找,正则表达式的使用"></a>Java SE    冒泡排序,选择排序,二分查找,正则表达式的使用</h1><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><h5 id="思路：比较相邻的两个数-如果第一个比第二个大-交换"><a href="#思路：比较相邻的两个数-如果第一个比第二个大-交换" class="headerlink" title="思路：比较相邻的两个数,  如果第一个比第二个大, 交换"></a>思路：比较相邻的两个数,  如果第一个比第二个大, 交换</h5><p>例：<code>int[] arr = &#123;2 ,  5,  4,  3,  1&#125;;</code> 五个数据</p><p>第一轮 : arr[0]-arr[1]  arr[1]-arr[2] arr[2]-arr[3]  arr[3]-arr[4]  比较4次<br>第二轮 : arr[0]-arr[1]  arr[1]-arr[2] arr[2]-arr[3]  比较3次<br>第三轮 : arr[0]-arr[1]  arr[1]-arr[2] 比较2次<br>第四轮 : arr[0]-arr[1]  比较1次</p><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<span class="hljs-comment">// 内循环: 比较的次数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<span class="hljs-comment">// -1: 避免索引越界   -i: 提升代码效率</span><br>        <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>            arr[j] = arr[j + <span class="hljs-number">1</span>];<br>            arr[j + <span class="hljs-number">1</span>] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h5 id="思路：-从-0-索引开始，拿着索引上的元素跟后一个的元素依次比较，如果小于后一个就交换，一轮结束后，最小的就到最左了。"><a href="#思路：-从-0-索引开始，拿着索引上的元素跟后一个的元素依次比较，如果小于后一个就交换，一轮结束后，最小的就到最左了。" class="headerlink" title="思路： 从 0 索引开始，拿着索引上的元素跟后一个的元素依次比较，如果小于后一个就交换，一轮结束后，最小的就到最左了。"></a><strong>思路： 从 0 索引开始，拿着索引上的元素跟后一个的元素依次比较，如果小于后一个就交换，一轮结束后，最小的就到最左了。</strong></h5> <img src="/2023/02/15/15-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%EF%BC%8C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%EF%BC%8C%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E9%80%89%E6%8B%A9.png" class=""> <p>例：<code>int[] arr = &#123;2 ,  5,  4,  3,  1&#125;;</code> 五个数据</p><p>第一轮 : arr[0]-arr[1]  arr[0]-arr[2] arr[0]-arr[3] arr[0]-arr[4]<br>第二轮 : arr[1]-arr[2]  arr[1]-arr[3] arr[1]-arr[4]<br>第三轮 : arr[2]-arr[3]  arr[2]-arr[4]<br>第四轮 : arr[3]-arr[4]</p><h5 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>        <span class="hljs-keyword">if</span>(arr[i] &gt; arr[j])&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>            arr[i] = arr[j];<br>            arr[j] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二分查找-x2F-折半查找"><a href="#二分查找-x2F-折半查找" class="headerlink" title="二分查找&#x2F;折半查找"></a>二分查找&#x2F;折半查找</h3><p><strong>要求：数组是排好序的</strong></p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5> <img src="/2023/02/15/15-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%EF%BC%8C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%EF%BC%8C%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%8A%98%E5%8D%8A.png" class=""> <ul><li>元素如果大于中间元素 : min &#x3D; mid + 1;</li><li>元素如果小于中间元素 : max &#x3D; mid – 1;</li><li>元素如果等于中间元素 : 将索引返回 (mid)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> num)</span> &#123;<br>    <span class="hljs-comment">// 1. 定义两个变量记录最小索引, 最大索引</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> mid;<span class="hljs-comment">//判断后再赋值</span><br>    <span class="hljs-comment">// 2. 折半的动作不止一次, 使用循环</span><br>    <span class="hljs-keyword">while</span> (min &lt;= max) &#123;<br>        <span class="hljs-comment">// 3. 计算中间索引</span><br>        mid = (min + max) / <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">// 4. 判断</span><br>        <span class="hljs-keyword">if</span> (num &gt; arr[mid]) &#123;<br>            min = mid + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num &lt; arr[mid]) &#123;<br>            max = mid - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 5. 没找到, 返回-1</span><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="正则表达式-Pattern类"><a href="#正则表达式-Pattern类" class="headerlink" title="正则表达式 [Pattern类]"></a>正则表达式 [Pattern类]</h3><p><strong>专门表示正则的类：Pattern</strong></p><p>用来校验字符串是否<strong>满足一定规则</strong>的字符串</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//规则</span><br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;编写规则&quot;</span>;<br><span class="hljs-string">&quot;校验的字符串&quot;</span>.matches(regex));<br><span class="hljs-comment">//示例</span><br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\d&quot;</span>;<br>System.out.println(<span class="hljs-string">&quot;12&quot;</span>.matches(regex));   <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><ul><li>字符类</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[]</span> : 单个字符<br><br><span class="hljs-selector-attr">[abc]</span>          只能是<span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span>, 或<span class="hljs-selector-tag">c</span><br><span class="hljs-selector-attr">[^abc]</span>         除了<span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span>, <span class="hljs-selector-tag">c</span>之外的任何字符<br><span class="hljs-selector-attr">[a-zA-Z]</span>       <span class="hljs-selector-tag">a</span>到<span class="hljs-selector-tag">z</span> <span class="hljs-selector-tag">A</span>到<span class="hljs-selector-tag">Z</span>，包括（范围）<br><span class="hljs-selector-attr">[a-d[m-p]</span>]     <span class="hljs-selector-tag">a</span>到<span class="hljs-selector-tag">d</span>，或<span class="hljs-selector-tag">m</span>通过<span class="hljs-selector-tag">p</span>：（<span class="hljs-selector-attr">[a-dm-p]</span>联合）<br><span class="hljs-selector-attr">[a-z&amp;&amp;[def]</span>]   <span class="hljs-selector-tag">d</span>, <span class="hljs-selector-tag">e</span>, 或<span class="hljs-selector-tag">f</span>(交集)<br><span class="hljs-selector-attr">[a-z&amp;&amp;[^bc]</span>]   <span class="hljs-selector-tag">a</span>到<span class="hljs-selector-tag">z</span>，除了<span class="hljs-selector-tag">b</span>和<span class="hljs-selector-tag">c</span>：（<span class="hljs-selector-attr">[ad-z]</span>减法）<br><span class="hljs-selector-attr">[a-z&amp;&amp;[^m-p]</span>]  <span class="hljs-selector-tag">a</span>到<span class="hljs-selector-tag">z</span>，除了<span class="hljs-selector-tag">m</span>到<span class="hljs-selector-tag">p</span>：（<span class="hljs-selector-attr">[a-lq-z]</span>减法）<br></code></pre></td></tr></table></figure><ul><li>预定义字符类</li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">.  任何字符<br><span class="hljs-string">\</span> 转义字符，对下一个字符分析<br><span class="hljs-string">\d</span> 一个数字： [<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]<br><span class="hljs-string">\D</span> 非数字： [^<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]<br><span class="hljs-string">\s</span> 一个空白字符： [ <span class="hljs-string">\t\n\x0B\f\r]</span><br><span class="hljs-string">\S</span> 非空白字符： [^<span class="hljs-string">\s]</span><br><span class="hljs-string">\w</span> [a-zA-Z_0-<span class="hljs-number">9</span>] 英文、数字、下划线<br><span class="hljs-string">\W</span>  [^<span class="hljs-string">\w]</span> 一个非单词字符<br></code></pre></td></tr></table></figure><ul><li>数量</li></ul><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tp"><span class="hljs-keyword">X</span>?<span class="hljs-keyword">X</span>,  一次或<span class="hljs-number">0</span>次<br><span class="hljs-keyword">X</span>*<span class="hljs-keyword">X</span>,  零次或多次 (任意次数)<br><span class="hljs-keyword">X</span>+<span class="hljs-keyword">X</span>,  一次或多次<br><span class="hljs-keyword">X</span> &#123;n&#125;<span class="hljs-keyword">X</span>，正好n次<br><span class="hljs-keyword">X</span> &#123;n, &#125;<span class="hljs-keyword">X</span>，至少n次<br><span class="hljs-keyword">X</span> &#123;n,m&#125;<span class="hljs-keyword">X</span>，至少n但不超过m次<br></code></pre></td></tr></table></figure><h4 id="具体实例"><a href="#具体实例" class="headerlink" title="具体实例"></a>具体实例</h4><ol><li><p>QQ号正则<br>5~12位的数字，开头不为0<br><code>String regex =&quot;[1-9]\\d&#123;4,11&#125;&quot;;</code></p></li><li><p>手机号正则<br>11位数字；1开头，第2个数字:  3 4 5 6 7 8 9<br><code>String regex =&quot;[1][3-9]\\d&#123;9&#125;&quot;;</code></p></li><li><p>邮箱正则</p><p>​     （数字字母下划线）@ (数字字母) . (2-3个字母) ；最后的可以多个</p><p>如：<a href="mailto:&#x61;&#x62;&#99;&#49;&#50;&#51;&#64;&#49;&#54;&#51;&#46;&#x63;&#x6f;&#109;">&#x61;&#x62;&#99;&#49;&#50;&#51;&#64;&#49;&#54;&#51;&#46;&#x63;&#x6f;&#109;</a> ; <a href="mailto:&#x61;&#x5f;&#98;&#x5f;&#x63;&#x5f;&#x64;&#x40;&#x68;&#x61;&#x70;&#x70;&#x79;&#46;&#x71;&#x71;&#x2e;&#x63;&#111;&#109;">&#x61;&#x5f;&#98;&#x5f;&#x63;&#x5f;&#x64;&#x40;&#x68;&#x61;&#x70;&#x70;&#x79;&#46;&#x71;&#x71;&#x2e;&#x63;&#111;&#109;</a> ；</p><p>​<code>String regex = &quot;\\w+[@][\\w&amp;&amp;[^_]]+(\\.[a-z]&#123;2,3&#125;)+&quot;;</code></p><p><code>(\\.[a-z]&#123;2,3&#125;)+</code>:中间的规则可以出现一次或多次</p></li></ol><h4 id="String-类中与正则有关的常见方法"><a href="#String-类中与正则有关的常见方法" class="headerlink" title="String 类中与正则有关的常见方法"></a>String 类中与正则有关的常见方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public String replaceAll(String regex,String newStr)</td><td>按照正则表达式匹配的内容进行替换</td></tr><tr><td>public String[] split(String regex)</td><td>按照正则表达式匹配的内容进行分割字符串，反回一个字符串数组</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc1efg&quot;</span>;<br>s = s.replaceAll(<span class="hljs-string">&quot;\\d&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);   <span class="hljs-comment">//s = &quot;abcefg&quot;</span><br></code></pre></td></tr></table></figure><h4 id="正则表达式爬取信息"><a href="#正则表达式爬取信息" class="headerlink" title="正则表达式爬取信息"></a>正则表达式爬取信息</h4><h5 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <br>                <span class="hljs-string">&quot;电话：18666668888，18699997777或者联系&quot;</span> +<br>                <span class="hljs-string">&quot;邮箱：boniu@itcast.cn 邮箱：bozai@itcast.cn 邮箱2：dlei0009@163.com&quot;</span> +<br>                <span class="hljs-string">&quot;座机电话：01036517895，010-98951256 &quot;</span> +<br>                <span class="hljs-string">&quot;热线电话：400-618-9090 ，400-618-4000，4006184000，4006189090&quot;</span>;<br></code></pre></td></tr></table></figure><h5 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义爬取的正则表达式</span><br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[1][3-9]\\d&#123;9&#125;|\\w+[@][\\w&amp;&amp;[^_]]+(\\.[a-z]&#123;2,3&#125;)+|[0]\\d&#123;2,3&#125;-?\\d&#123;7,8&#125;|400-?\\d&#123;3&#125;-?\\d&#123;4&#125;&quot;</span>;<br><br><span class="hljs-comment">// 将正则表达式封装为 Pattern 对象</span><br><span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex);<br><br><span class="hljs-comment">// 获取匹配器对象</span><br><span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(data);<br><br><span class="hljs-keyword">while</span> (matcher.find()) &#123;         <span class="hljs-comment">//匹配器查询有没有符合的数据，有就返还true，没有就有false；</span><br>    System.out.println(matcher.group());<span class="hljs-comment">//打印符合的数据</span><br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>注：</p><p><code>matcher.find()</code>：匹配器查询有没有符合规则的数据，有就返还true，没有为false； <strong>然后</strong>指向后面数据，第二次调用就是看后面存不存在，然后<code>matcher.group()</code>获取该数据；</p><p>如果只使用一次<code>matcher.find()</code>，则<code>matcher.group()</code>内的数据始终相同。</p>          </div><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">18666668888</span><br><span class="hljs-number">18699997777</span><br>boniu@itcast.cn<br>bozai@itcast.cn<br>dlei<span class="hljs-number">0009@163</span>.com<br><span class="hljs-number">01036517895</span><br><span class="hljs-number">010</span>-<span class="hljs-number">98951256</span><br><span class="hljs-number">400-618</span>-<span class="hljs-number">9090</span><br><span class="hljs-number">400-618</span>-<span class="hljs-number">4000</span><br><span class="hljs-number">4006184000</span><br><span class="hljs-number">4006189090</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>冒泡排序</tag>
      
      <tag>选择排序</tag>
      
      <tag>二分查找</tag>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14_常用API:Object类,Math类,System类,BigDecimal类,包装类,Arrays 工具类</title>
    <link href="/2023/02/14/%E5%B8%B8%E7%94%A8API/"/>
    <url>/2023/02/14/%E5%B8%B8%E7%94%A8API/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-常用API"><a href="#Java-常用API" class="headerlink" title="Java 常用API"></a>Java 常用API</h1><h2 id="Object-类"><a href="#Object-类" class="headerlink" title="Object 类"></a>Object 类</h2><p><strong>所有的类，都直接或者间接的继承了 Object 类</strong></p><h5 id="public-String-toString"><a href="#public-String-toString" class="headerlink" title="public String toString()"></a>public String toString()</h5><p>默认是返回当前对象在堆内存中的地址信息:类的全限名@内存地址</p><p><strong>存在意义：子类重写后可以返回所需对象的内容，替换原先的地址；</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public String <span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span> &#123;<br>      return get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;@&quot;</span> + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">HexString(<span class="hljs-params">hashCode</span>()</span>);<br>  &#125;<br><br>  get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Name()</span> : 类名称, 全类名(包名 + 类名)<br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">HexString()</span> : 转十六进制<br>  hash<span class="hljs-constructor">Code()</span> : 返回对象内存地址 + 哈希算法, 算出来的整数 (哈希值)<br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>注: 使用打印语句打印对象名时, println()方法在源码层面自动调用该对象的toString方法.</p>          </div><pre><code class="hljs">public static String valueOf(Object obj) &#123;   return (obj == null) ? &quot;null&quot; : obj.toString();&#125;</code></pre><p>toString()示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;A&#123;name = &quot;</span> + name + <span class="hljs-string">&quot;, age = &quot;</span> + age + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br>使用：<br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>System.out.println(a); <span class="hljs-comment">//等价于System.out.println(a.toString());</span><br></code></pre></td></tr></table></figure><h5 id="public-Boolean-equals-Object-o"><a href="#public-Boolean-equals-Object-o" class="headerlink" title="public Boolean equals(Object o)"></a>public Boolean equals(Object o)</h5><p>默认是比较当前对象与另一个对象的地址是否相同，相同返回true，不同返回false</p><p><strong>存在意义：子类重写后定义自己的比较规则</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-keyword">if</span>(obj instancerof A)&#123;   <span class="hljs-comment">//判断是不是父子类的关系</span><br>            <span class="hljs-comment">//向下转型，调用子类特有的成员</span><br>            <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> (A)obj;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age == a.age &amp;&amp; <span class="hljs-built_in">this</span>.name.euals(stu.name);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="IDEA中自带的重写equals-方法分析"><a href="#IDEA中自带的重写equals-方法分析" class="headerlink" title="IDEA中自带的重写equals()方法分析"></a>IDEA中自带的重写equals()方法分析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-comment">// this : stu1</span><br>    <span class="hljs-comment">// o : stu2</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) &#123;<br>        <span class="hljs-comment">// 两个对象做地址值的比较, 如果地址相同, 内容肯定相同</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 代码要是能够走到这里, 代表地址肯定不相同，同时stu1不为null</span><br>    <span class="hljs-comment">// 如果stu2为null, 返回false</span><br>    <span class="hljs-comment">// this.getClass() != o.getClass() : 两个对象的字节码是否相同，如果字节码不同, 代表类型不相同, 返回false</span><br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || <span class="hljs-built_in">this</span>.getClass() != o.getClass()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 代码要是能够走到这里, 类型相同.</span><br>    <span class="hljs-comment">// 则向下转型</span><br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br>    <span class="hljs-comment">// 比较</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age == student.age &amp;&amp; Objects.equals(<span class="hljs-built_in">this</span>.name, student.name);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Objects的常见方法"><a href="#Objects的常见方法" class="headerlink" title="Objects的常见方法"></a>Objects的常见方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object a, Object b)</span><br><span class="hljs-comment">//比较两个对象 特点：底层先进行非空判断，以避免空指针异常，然后再equals()比较;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isNull</span><span class="hljs-params">(Object obj)</span><br><span class="hljs-comment">//判断变量是否为 null   底层逻辑就是判断是否为null，很简单一般不用该方法</span><br></code></pre></td></tr></table></figure><div class="note note-info">            <h6 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h6><ul><li>Objects.equals 和 ***.equals方法的区别：</li></ul><p><strong>实现逻辑: Objects.equals方法, 内部依赖于我们自己所编写的equals</strong><br><strong>优点区别: Objects.equals方法, 内部带有非null判断，避免空指针异常</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">public static boolean equals(Object a, Object b) &#123;return (a == b) || (a != null &amp;&amp; a.equals(b));&#125;<br></code></pre></td></tr></table></figure><p>a &#x3D;&#x3D; b : 如果地址相同, 返回为true；短路 || 功能:如果左边为true, 右边不执行</p><p><strong>即：如果地址相同, 直接返回true</strong></p><p>a !&#x3D; b : 如果地址不相同, 返回false, 短路 || : 左边为false, 右边继续执行.</p><p>a !&#x3D; null : a为null,返回false时，短路 &amp;&amp; : 左边为false, 右边不执行； 则a不调用equals()，避免了空指针异常问题</p><p>a !&#x3D; null : 返回true时a不为null，短路 &amp;&amp; : 左边为true, 右边执行 a.equals(b)</p>          </div><h2 id="Math-类"><a href="#Math-类" class="headerlink" title="Math 类"></a>Math 类</h2><p><em>java.lang___不需要导包，工具类，所有方法都是静态的，私有了构造方法不允许调用</em>                    <strong>Math.—()；调用</strong></p><table><thead><tr><th>常用方法名</th><th>作用</th></tr></thead><tbody><tr><td>public static int abs(int a)</td><td>获取参数绝对值</td></tr><tr><td>public static double ceil(double a)</td><td>向上取整</td></tr><tr><td>public static double floor(double a)</td><td>向下取整</td></tr><tr><td>public static int round(float a)</td><td>四舍五入</td></tr><tr><td>public static int max(int a,int b)</td><td>获取两个int值中的较大值</td></tr><tr><td>public static double pow(double a,double b)</td><td>返回a的b次幂的值</td></tr><tr><td>public static double random()</td><td>返回值为double的随机值，范围[0.0,1.0)</td></tr></tbody></table><h2 id="System-类"><a href="#System-类" class="headerlink" title="System 类"></a>System 类</h2><p><em>同Math类，所有方法都是静态的，类名调用</em></p><table><thead><tr><th>常用方法名</th><th>作用</th></tr></thead><tbody><tr><td>public static void exit(int status)</td><td>终止当前运行的 Java 虚拟机，非零表示异常终止</td></tr><tr><td>public static long currentTimeMillis()</td><td>返回当前系统的时间毫秒值形式，从1970年1月1日0时0分0秒到现在[由于时区不同,中国为8时0分0秒]</td></tr><tr><td>public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</td><td>数组拷贝  参数：(数据源数组, 起始索引, 目的地数组, 起始索引, 拷贝个数&#x2F;长度)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//currentTimeMillis()使用</span><br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>/………………/<span class="hljs-comment">//统计这段代码的运行时间 单位毫秒</span><br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> end - start;<br><br><span class="hljs-comment">// arraycopy(Object src, int srcPos, Object dest, int destPos, int length)使用</span><br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>System.arraycopy(arr, <span class="hljs-number">1</span>, arr2, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<span class="hljs-comment">//arr2：&#123;1,2,3&#125;</span><br></code></pre></td></tr></table></figure><h2 id="BigDecimal-类"><a href="#BigDecimal-类" class="headerlink" title="BigDecimal 类"></a>BigDecimal 类</h2><p>解决小数运算中的不精确问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.2</span>;<br>System.out.println(num1 + num2);  <span class="hljs-comment">//0.300000000000004</span><br></code></pre></td></tr></table></figure><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><table><thead><tr><th>public BigDecimal(double val)                                         不常用：还是会导致精度问题</th></tr></thead><tbody><tr><td>public BigDecimal(String val)</td></tr><tr><td>public static BigDecimal valueOf(double val)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bd1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">1.0</span>);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bd2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;1.0&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>public BigDecimal add(BigDecimal b)</td><td>加法</td></tr><tr><td>public BigDecimal subtract(BigDecimal b)</td><td>减法</td></tr><tr><td>public BigDecimal multiply(BigDecimal b)</td><td>乘法</td></tr><tr><td>public BigDecimal divide(BigDecimal b)</td><td>除法</td></tr><tr><td>public BigDecimal divide (BigDecimal b，精确位数，舍入模式)</td><td>除法[保留几位小数]</td></tr><tr><td>b.doubleValue()</td><td>转成double类型</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bd1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">0.10</span>);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bd2</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">0.03</span>);<br><br>bd1.add(bd2);<span class="hljs-comment">//0.13</span><br>bd1.subtract(bd2);<span class="hljs-comment">//0.07</span><br>bd1.multiply(bd2);<span class="hljs-comment">//0.003</span><br>bd1.divide(bd2);<span class="hljs-comment">//此时会报错，运算错误，除不尽</span><br>bd1.divide(bd2, <span class="hljs-number">2</span>, RoundingMode.HALF_UP);           <span class="hljs-comment">// 3.33</span><br></code></pre></td></tr></table></figure><h5 id="舍入模式"><a href="#舍入模式" class="headerlink" title="舍入模式"></a>舍入模式</h5><ul><li>RoundingMode.UP  进一法</li><li>RoundingMode.DOWN  去尾法</li><li>RoundingMode.HALF_UP 四舍五入</li></ul><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>将基本数据类型, 包装成类 (变成引用数据类型)</p><table><thead><tr><th>基本数据类型</th><th>引用数据类型</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><h4 id="Integer-类"><a href="#Integer-类" class="headerlink" title="Integer 类"></a>Integer 类</h4><h5 id="Integer-和-int-的转换"><a href="#Integer-和-int-的转换" class="headerlink" title="Integer 和 int 的转换"></a>Integer 和 int 的转换</h5><ul><li>手动装箱: 调用方法, 手动将基本数据类型, 包装成类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Integer</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span>     <span class="hljs-comment">//构造方法 </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>   <span class="hljs-comment">//静态方法</span><br></code></pre></td></tr></table></figure><ul><li>手动拆箱: 调用方法, 手动将包装类, 拆成(转换)基本数据类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">intValue</span><span class="hljs-params">()</span>                <span class="hljs-comment">//以 int 类型返回 Integer对象 的值</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> Integer.value(<span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> it.inValue(it);<br></code></pre></td></tr></table></figure><hr><ul><li>JDK5版本开始, 可以自动拆装箱 :</li></ul><p>​自动装箱 : 可以将基本数据类型直接赋值给包装类的变量<br>​自动拆箱 : 可以将包装类的数据直接赋值给基本数据类型变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> num;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> it;<br></code></pre></td></tr></table></figure><h5 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static String toBinaryString(int i)</td><td>转换成二进制</td></tr><tr><td>public static String toOctalString(int i)</td><td>转换成八进制</td></tr><tr><td>public static String toHexString(int i)</td><td>转换成十六进制</td></tr><tr><td>public static int parseInt(String s)</td><td>将字符串类型整数转换成int类型</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;100&quot;</span>;<br>System.out.println(s + <span class="hljs-number">100</span>);          <span class="hljs-comment">// 100100</span><br>System.out.println(Integer.parseInt(s) + <span class="hljs-number">100</span>);        <span class="hljs-comment">// 200</span><br></code></pre></td></tr></table></figure><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>将 String s &#x3D; “1,2,3,4”; 转换为整数并存入数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1,2,3,4&quot;</span>;<br><span class="hljs-comment">// 1. 逗号为分隔符</span><br>String[] arr = s.split(<span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-comment">// 2. 遍历字符串数组转换成int型，存入num[]数组</span><br><span class="hljs-type">int</span>[] num = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    num[i] = Integer.parseInt(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="转换内部逻辑"><a href="#转换内部逻辑" class="headerlink" title="转换内部逻辑"></a>转换内部逻辑</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>System.out.println(i1 == i2);       <span class="hljs-comment">// true</span><br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-number">129</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">i4</span> <span class="hljs-operator">=</span> <span class="hljs-number">129</span>;<br>System.out.println(i3 == i4);       <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p><strong>原因:自动装箱的时候, 如果装箱数据在-128~127之间, &#x3D;&#x3D;比较结果为true, 范围外为false</strong></p><p><strong>自动装箱原理 :</strong> 调用 Integer.valueOf(); 方法</p><h6 id="逻辑代码"><a href="#逻辑代码" class="headerlink" title="逻辑代码"></a>逻辑代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@IntrinsicCandidate</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i);<br>&#125;<br><br>注：<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer[] cache; <span class="hljs-comment">//cache是一个数组</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">low</span> <span class="hljs-operator">=</span> -<span class="hljs-number">128</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">high</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;  <span class="hljs-comment">//静态内部类中h赋值给high</span><br><span class="hljs-comment">// 部分static&#123;&#125;代码</span><br><span class="hljs-keyword">static</span> &#123;<br>            <span class="hljs-comment">// high value may be configured by property</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">integerCacheHighPropValue</span> <span class="hljs-operator">=</span><br>                VM.getSavedProperty(<span class="hljs-string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);<br>            <span class="hljs-keyword">if</span> (integerCacheHighPropValue != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    h = Math.max(parseInt(integerCacheHighPropValue), <span class="hljs-number">127</span>);<br>                    <span class="hljs-comment">// Maximum array size is Integer.MAX_VALUE</span><br>                    h = Math.min(h, Integer.MAX_VALUE - (-low) -<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">catch</span>( NumberFormatException nfe) &#123;<br>                    <span class="hljs-comment">// If the property cannot be parsed into an int, ignore it.</span><br>                &#125;<br>            &#125;<br>            high = h;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;   <span class="hljs-comment">//i = 127</span><br>      <span class="hljs-keyword">if</span> (i &gt;= -<span class="hljs-number">128</span> &amp;&amp; i &lt;= <span class="hljs-number">127</span>) &#123;<br>          <span class="hljs-keyword">return</span> IntegerCache.cache[<span class="hljs-number">255</span>];  <span class="hljs-comment">//i + (-IntegerCache.low) = 255</span><br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i);<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li>​    如果装箱数据不在 -128 ~ 127 , 重新创建新的对象 new Integer(i);  堆中重新开辟内存，此时&#x3D;&#x3D;比较时候是两个不同内存地址的数据</li><li>​    如果装箱数据在 -128 ~ 127 , 不会创建新对象, 从cache数组中, 取出提前创建好的Integer对象返回</li></ul><p><strong>Integer类中, 定义的 Integer[] cache存储了256个Integer对象： -128 ~ 127</strong></p><div class="note note-primary">            <h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>实际比较时，调用qual()方法，包装类重写了父类的equal()方法，就是比较数据的</p>          </div><h2 id="Arrays-工具类"><a href="#Arrays-工具类" class="headerlink" title="Arrays 工具类"></a>Arrays 工具类</h2><p>数组操作工具类</p><table><thead><tr><th>常用方法</th><th>说明</th></tr></thead><tbody><tr><td>public static String toString(类型[] a)</td><td>将数组元素拼接为带有格式的字符串</td></tr><tr><td>public static boolean equals(类型[] a, 类型[] b)</td><td>比较两个数组内容是否相同</td></tr><tr><td>public static int binarySearch(int[] a, int key)</td><td>查找元素在数组中的索引 (二分查找法)</td></tr><tr><td>public static void sort(类型[] a)</td><td>对数组进行默认升序排序</td></tr></tbody></table><div class="note note-info">            <p>注：public static int binarySearch(int[] a, int key)： 如果查找的元素, 在数组中不存在: 返回 (-(插入点) - 1)</p>          </div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span>[] arr2 = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><br>System.out.println(Arrays.toString(arr1));   <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br>System.out.println(Arrays.equals(arr1, arr2));<span class="hljs-comment">// false</span><br>System.out.println(Arrays.binarySearch(arr1, <span class="hljs-number">2</span>));<span class="hljs-comment">// 1</span><br>System.out.println(Arrays.binarySearch(arr1, <span class="hljs-number">6</span>));<span class="hljs-comment">// -(5)-1 = -6</span><br>Arrays.sort(arr2);<br>System.out.println(Arrays.toString(arr2));      <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>包装类</tag>
      
      <tag>BigDecimal类</tag>
      
      <tag>System类</tag>
      
      <tag>Math类</tag>
      
      <tag>Object类</tag>
      
      <tag>Arrays 工具类</tag>
      
      <tag>API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13_窗口使用，华容道</title>
    <link href="/2023/02/14/%E5%8D%8E%E5%AE%B9%E9%81%93/"/>
    <url>/2023/02/14/%E5%8D%8E%E5%AE%B9%E9%81%93/</url>
    
    <content type="html"><![CDATA[<h1 id="华容道小游戏"><a href="#华容道小游戏" class="headerlink" title="华容道小游戏"></a>华容道小游戏</h1><h5 id="绘制界面"><a href="#绘制界面" class="headerlink" title="绘制界面"></a>绘制界面</h5><p>设置窗体大小，居中显示，始终显示在顶层。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initFrame</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 设置窗体大小</span><br>        setSize(<span class="hljs-number">590</span>,<span class="hljs-number">635</span>);<br>        <span class="hljs-comment">// 设置窗体关闭模式</span><br>        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>        <span class="hljs-comment">// 设置窗体标题</span><br>        setTitle(<span class="hljs-string">&quot;华容道&quot;</span>);<br>        <span class="hljs-comment">// 设置窗体置顶</span><br>        setAlwaysOnTop(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 设置窗体居中</span><br>        setLocationRelativeTo(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 取消默认布局</span><br>        setLayout(<span class="hljs-literal">null</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>加载图片：</strong>两层循环，图片用二维数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> data[][] = &#123;<br>        &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>        &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,<br>        &#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;<br>&#125;;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">3</span> ; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; j &lt; <span class="hljs-number">3</span> ; j++)<br>            &#123;<br>                <span class="hljs-type">JLabel</span> <span class="hljs-variable">jLabel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(<span class="hljs-string">&quot;E:\\Desktop\\pic\\&quot;</span>+data[i][j]+<span class="hljs-string">&quot;.png&quot;</span>));<br>                jLabel.setBounds(<span class="hljs-number">30</span>+<span class="hljs-number">175</span>*j,<span class="hljs-number">60</span>+<span class="hljs-number">175</span>*i,<span class="hljs-number">175</span>,<span class="hljs-number">175</span>);<br>                jFrame.getContentPane().add(jLabel);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>使用窗体，但是增加新功能：</p><h5 id="继承改进"><a href="#继承改进" class="headerlink" title="继承改进"></a>继承改进</h5><ol><li>定义 MainFrame 类继承 JFrame</li><li>将代码抽取到一个单独的方法 initFrame()</li><li>将绘制界面的代码, 抽取为一个单独的方法 paintView()</li><li>将二维数组提取到成员变量的位置</li><li>JFrame 类中方法的调用方式, 更换为super或省略</li><li>在构造方法中, 调用 initFrame() 和 paintView()</li><li>在构造方法的最后调用 setVisible(true);</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">MyFrame</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 窗体对象.addKeyListener(KeyListener实现类对象);</span><br>    <span class="hljs-comment">// this : 当前类对象代表</span><br>    <span class="hljs-comment">//          1) 窗体对象</span><br>    <span class="hljs-comment">//          2) KeyListener实现类对象</span><br>    <span class="hljs-built_in">this</span>.addKeyListener(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-comment">// 初始化窗体</span><br>    initFrame();<br>    <span class="hljs-comment">// 初始化数据</span><br>    initData();<br>    <span class="hljs-comment">// 绘制游戏界面</span><br>    paintView();<br>    <span class="hljs-comment">// 设置窗体可见</span><br>    setVisible(<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="初始化九宫格"><a href="#初始化九宫格" class="headerlink" title="初始化九宫格"></a>初始化九宫格</h5><p><strong>核心思路：</strong>遍历二维数组获取每一个元素，和其他元素随机交换</p><p><em><strong>注：二维数组数据覆盖不允许，需要重新new {}</strong></em></p><ol><li>遍历二维数组, 获取到每一个元素     </li><li>在遍历的过程中, 产生两个随机的索引</li><li>让当前元素, 和随机索引所指向的元素进行交换</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initFrame</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;            <span class="hljs-comment">//遍历二维数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; data[i].length; j++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">3</span>);          <span class="hljs-comment">//产生随机索引值，交换数据</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">3</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data[i][j];<br>            data[i][j] = data[x][y];<br>            data[x][y] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="上下左右变位—键盘监听"><a href="#上下左右变位—键盘监听" class="headerlink" title="上下左右变位—键盘监听"></a>上下左右变位—键盘监听</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(keyCode == <span class="hljs-number">37</span> )&#123;                     <span class="hljs-comment">//左按键</span><br>    <span class="hljs-keyword">if</span>(column == <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span>;                         <span class="hljs-comment">//在右边界时，无法移动</span><br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data[row][column];           <span class="hljs-comment">//空白和右边的交换</span><br>    data[row][column] = data[row][column + <span class="hljs-number">1</span>];<br>    data[row][column + <span class="hljs-number">1</span>] = temp;<br>    column++;                               <span class="hljs-comment">//交换后，列值加1</span><br>    count++;                            <span class="hljs-comment">//步数+1</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注：数据在数组中改变之后，界面需要重新刷新</strong></p><ol><li><p>每一次移动之后，调用paintView重新绘制界面</p></li><li><p>paintView方法中，加载图片资源之前，需要将现有的组件移除</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">getContentPane</span>()<span class="hljs-selector-class">.removeAll</span>();<br></code></pre></td></tr></table></figure></li><li><p>加载后，需要刷新界面</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">getContentPane</span>()<span class="hljs-selector-class">.repaint</span>();<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">//到达边界不会再移动的情况<br><span class="hljs-attribute">column</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">3</span> 不允许左移动<br><span class="hljs-attribute">row</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">3</span> 不允许上移动<br><span class="hljs-attribute">column</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">0</span> 不允许右移动<br><span class="hljs-attribute">row</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">0</span> 不允许下移动<br></code></pre></td></tr></table></figure><h5 id="游戏判定胜利"><a href="#游戏判定胜利" class="headerlink" title="游戏判定胜利"></a>游戏判定胜利</h5><ol><li>定义新的二维数组, 存储游戏胜利的数据</li><li>使用现有数组中的元素, 和胜利数组中元素逐个进行比对</li><li>每一次移动后, 都需要调用绘制界面的方法，在该方法中判断是否胜利</li></ol><p>注意：胜利界面出现后，游戏将进入不可移动的状态</p><p>在移动的方法中，再次调用 victory方法，如果为胜利，直接return</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">victory</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; data[i].length; j++) &#123;<br>            <span class="hljs-keyword">if</span> (data[i][j] != victory[i][j]) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;                           <span class="hljs-comment">//数据不一致，还没有胜利</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="统计步数"><a href="#统计步数" class="headerlink" title="统计步数"></a>统计步数</h5><p>添加统计变量 count<br>每次上下左右移动，count ++</p><h5 id="重新游戏"><a href="#重新游戏" class="headerlink" title="重新游戏"></a>重新游戏</h5><p>绑定动作监听 ActionListenter </p><ol><li>步数归零</li><li>重新调用initData()方法</li><li>重新调用paintView()方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">JButton</span> <span class="hljs-variable">btn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;重新开始&quot;</span>);<br>btn.setBounds(<span class="hljs-number">350</span>,<span class="hljs-number">20</span>,<span class="hljs-number">100</span>,<span class="hljs-number">20</span>);<br>getContentPane().add(btn);<br>btn.setFocusable(<span class="hljs-literal">false</span>);                            <span class="hljs-comment">//取消按钮焦点</span><br>btn.addActionListener(e -&gt; &#123;                        <span class="hljs-comment">//初始化游戏数据</span><br>    count = <span class="hljs-number">0</span>;<br>    initData();<br>    paintView();<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><h4 id="Run-java"><a href="#Run-java" class="headerlink" title="Run.java"></a>Run.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Run</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFrame</span>();  <span class="hljs-comment">//调用构造方法即可</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MyFrame-java"><a href="#MyFrame-java" class="headerlink" title="MyFrame.java"></a>MyFrame.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.event.KeyEvent;<br><span class="hljs-keyword">import</span> java.awt.event.KeyListener;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyListener</span> &#123;<br>    <span class="hljs-type">int</span>[][] data = &#123;<br>            &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>            &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,<br>            &#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-type">int</span>[][] victory = &#123;<br>            &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>            &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,<br>            &#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-type">int</span> row;                <span class="hljs-comment">// 空白块 行</span><br>    <span class="hljs-type">int</span> column;             <span class="hljs-comment">// 空白块 列</span><br>    <span class="hljs-type">int</span> count;              <span class="hljs-comment">// 步数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyFrame</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 窗体对象.addKeyListener(KeyListener实现类对象);</span><br>        <span class="hljs-comment">// this : 当前类对象代表</span><br>        <span class="hljs-comment">//          1) 窗体对象</span><br>        <span class="hljs-comment">//          2) KeyListener实现类对象</span><br>        <span class="hljs-built_in">this</span>.addKeyListener(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-comment">// 初始化窗体</span><br>        initFrame();<br>        <span class="hljs-comment">// 初始化数据</span><br>        initData();<br>        <span class="hljs-comment">// 绘制游戏界面</span><br>        paintView();<br>        <span class="hljs-comment">// 设置窗体可见</span><br>        setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化窗体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initFrame</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 设置窗体大小</span><br>        setSize(<span class="hljs-number">590</span>,<span class="hljs-number">635</span>);<br>        <span class="hljs-comment">// 设置窗体关闭模式</span><br>        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>        <span class="hljs-comment">// 设置窗体标题</span><br>        setTitle(<span class="hljs-string">&quot;华容道&quot;</span>);<br>        <span class="hljs-comment">// 设置窗体置顶</span><br>        setAlwaysOnTop(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 设置窗体居中</span><br>        setLocationRelativeTo(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 取消默认布局</span><br>        setLayout(<span class="hljs-literal">null</span>);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化九宫格图片</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;            <span class="hljs-comment">//遍历二维数组</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; data[i].length; j++) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">3</span>);          <span class="hljs-comment">//产生随机索引值，交换数据</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">3</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data[i][j];<br>                data[i][j] = data[x][y];<br>                data[x][y] = temp;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;             <span class="hljs-comment">//找到空白元素所在位置</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; data[i].length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (data[i][j] == <span class="hljs-number">9</span>) &#123;<br>                    row = i;<br>                    column = j;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 绘制华容道界面</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paintView</span><span class="hljs-params">()</span> &#123;<br>        getContentPane().removeAll();                       <span class="hljs-comment">//清空原始配置</span><br><br>        <span class="hljs-keyword">if</span>(victory())&#123;                                      <span class="hljs-comment">//胜利弹窗</span><br>            <span class="hljs-type">JLabel</span> <span class="hljs-variable">win</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(<span class="hljs-string">&quot;E:\\Desktop\\pic\\win.png&quot;</span>));<br>            win.setBounds(<span class="hljs-number">120</span>,<span class="hljs-number">220</span>,<span class="hljs-number">270</span>,<span class="hljs-number">90</span>);<br>            getContentPane().add(win);<br>        &#125;<br><br>        <span class="hljs-type">JButton</span> <span class="hljs-variable">btn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;重新开始&quot;</span>);<br>        btn.setBounds(<span class="hljs-number">350</span>,<span class="hljs-number">20</span>,<span class="hljs-number">100</span>,<span class="hljs-number">20</span>);<br>        getContentPane().add(btn);<br>        btn.setFocusable(<span class="hljs-literal">false</span>);                            <span class="hljs-comment">//取消按钮焦点</span><br>        btn.addActionListener(e -&gt; &#123;                        <span class="hljs-comment">//初始化游戏数据</span><br>            count = <span class="hljs-number">0</span>;<br>            initData();<br>            paintView();<br>        &#125;);<br><br>        <span class="hljs-type">JLabel</span> <span class="hljs-variable">jLabel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-string">&quot;步数：&quot;</span> + count );<br>        jLabel.setBounds(<span class="hljs-number">50</span>,<span class="hljs-number">20</span>,<span class="hljs-number">100</span>,<span class="hljs-number">20</span>);<br>        getContentPane().add(jLabel);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">3</span> ; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; j &lt; <span class="hljs-number">3</span> ; j++)<br>            &#123;<br>                <span class="hljs-type">JLabel</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(<span class="hljs-string">&quot;E:\\Desktop\\pic\\&quot;</span>+data[i][j]+<span class="hljs-string">&quot;.png&quot;</span>));<br>                image.setBounds(<span class="hljs-number">30</span>+<span class="hljs-number">175</span>*j,<span class="hljs-number">60</span>+<span class="hljs-number">175</span>*i,<span class="hljs-number">175</span>,<span class="hljs-number">175</span>);<br>                getContentPane().add(image);<br>            &#125;<br>        &#125;<br><br>        getContentPane().repaint();                           <span class="hljs-comment">//重新安排布局</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断胜利</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">victory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; data[i].length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (data[i][j] != victory[i][j]) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;                           <span class="hljs-comment">//数据不一致，还没有胜利</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 上下左右移动</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">(<span class="hljs-type">int</span> keyCode)</span>&#123;<br>        <span class="hljs-comment">//System.out.println(keyCode);</span><br>        <span class="hljs-keyword">if</span>(victory())&#123;<br>            <span class="hljs-keyword">return</span>;                             <span class="hljs-comment">//游戏胜利，停止移动</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(keyCode == <span class="hljs-number">37</span> )&#123;                     <span class="hljs-comment">//左按键</span><br>            <span class="hljs-keyword">if</span>(column == <span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-keyword">return</span>;                         <span class="hljs-comment">//在右边界时，无法移动</span><br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data[row][column];           <span class="hljs-comment">//空白和右边的交换</span><br>            data[row][column] = data[row][column + <span class="hljs-number">1</span>];<br>            data[row][column + <span class="hljs-number">1</span>] = temp;<br>            column++;                               <span class="hljs-comment">//交换后，列值加1</span><br>            count++;                            <span class="hljs-comment">//步数+1</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(keyCode == <span class="hljs-number">38</span> )&#123;               <span class="hljs-comment">//上按键</span><br>            <span class="hljs-keyword">if</span>(row == <span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-keyword">return</span>;                         <span class="hljs-comment">//在下边界时，无法移动</span><br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data[row][column];           <span class="hljs-comment">//空白和下边的交换</span><br>            data[row][column] = data[row + <span class="hljs-number">1</span>][column];<br>            data[row + <span class="hljs-number">1</span>][column] = temp;<br>            row++;                               <span class="hljs-comment">//交换后，行值加1</span><br>            count++;                             <span class="hljs-comment">//步数+1</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(keyCode == <span class="hljs-number">39</span> )&#123;               <span class="hljs-comment">//右按键</span><br>            <span class="hljs-keyword">if</span>(column == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span>;                         <span class="hljs-comment">//在左边界时，无法移动</span><br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data[row][column];           <span class="hljs-comment">//空白和左边的交换</span><br>            data[row][column] = data[row][column - <span class="hljs-number">1</span>];<br>            data[row][column - <span class="hljs-number">1</span>] = temp;<br>            column--;                               <span class="hljs-comment">//交换后，列值-1</span><br>            count++;                             <span class="hljs-comment">//步数+1</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(keyCode == <span class="hljs-number">40</span> )&#123;               <span class="hljs-comment">//下按键</span><br>            <span class="hljs-keyword">if</span>(row == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span>;                         <span class="hljs-comment">//在下边界时，无法移动</span><br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data[row][column];           <span class="hljs-comment">//空白和上边的交换</span><br>            data[row][column] = data[row - <span class="hljs-number">1</span>][column];<br>            data[row - <span class="hljs-number">1</span>][column] = temp;<br>            row--;                               <span class="hljs-comment">//交换后，行值-1</span><br>            count++;                             <span class="hljs-comment">//步数+1</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (keyCode == <span class="hljs-number">32</span>) &#123;<br>            <span class="hljs-comment">// 测试：如果按空格，直接胜利</span><br>            data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;<br>                    &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>                    &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,<br>                    &#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;<br>            &#125;;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyTyped</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">keyCode</span> <span class="hljs-operator">=</span> e.getKeyCode();<br>        move(keyCode);<br>        <span class="hljs-comment">// 每一次移动之后, 都重新绘制游戏界面</span><br>        paintView();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>main函数中仅有new MyFarme语句，此时调用构造方法，实现类中的各个方法，简化代码；同时，因为继承Farme类，所以调用其中的方法为super.xxx(),而子类也没有重写过该方法，所以super可以省略，直接方法名调用</p>          </div><div class="note note-info">            <p>窗体对象.addKeyListener(KeyListener实现类对象);<br>this.addKeyListener(this);<br>        this : 当前类对象代表<br>                 1) 窗体对象<br>                                   2) KeyListener实现类对象<br>所以可以这样用this;</p>          </div>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>华容道</tag>
      
      <tag>窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12_代码块，内部类，Lambda表达式，窗体的使用，设计模式</title>
    <link href="/2023/02/14/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BB%A3%E7%A0%81%E5%9D%97%EF%BC%8C%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%8CLambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E7%AA%97%E4%BD%93%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/02/14/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BB%A3%E7%A0%81%E5%9D%97%EF%BC%8C%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%8CLambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E7%AA%97%E4%BD%93%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA-SE-代码块，内部类，Lambda表达式，窗体的使用，设计模式"><a href="#JAVA-SE-代码块，内部类，Lambda表达式，窗体的使用，设计模式" class="headerlink" title="JAVA SE   代码块，内部类，Lambda表达式，窗体的使用，设计模式"></a>JAVA SE   代码块，内部类，Lambda表达式，窗体的使用，设计模式</h1><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>在Java类下，使用 { } 括起来的代码被称为代码块</p><p>分类：局部代码块  构造代码块  静态代码块  同步代码块[多态]</p><ul><li>局部代码块</li></ul><p>​位置：方法中定义<br>​作用：限定变量的生命周期，及早释放，提高内存利用率</p><ul><li>构造代码块</li></ul><p>​位置：类中方法外定义<br>​特点：每次构造方法执行的时，都会执行该代码块中的代码，并且在构造方法执行前执行<br>​作用：将多个构造方法中相同的代码，抽取到构造代码块中，提高代码的复用性</p><ul><li>静态代码块</li></ul><p>​位置：类中方法外定义<br>​特点：需要通过static关键字修饰，随着类的加载而加载，并且只执行一次<br>​作用：在类加载的时候做一些数据初始化的操作；加载配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">static</span> String school;<br>    <span class="hljs-keyword">static</span> &#123;<br>        school = <span class="hljs-string">&quot;ABC&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>内部类:定义在一个类里面的类</p><h4 id="创建对象的格式"><a href="#创建对象的格式" class="headerlink" title="创建对象的格式"></a>创建对象的格式</h4><p>外部类名.内部类名 对象名 &#x3D; new 外部类对象().new 内部类对象();</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Outer</span>.<span class="hljs-keyword">Inner</span> <span class="hljs-keyword">in</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">Outer</span>().<span class="hljs-built_in">new</span> <span class="hljs-keyword">Inner</span>();<br></code></pre></td></tr></table></figure><h4 id="成员访问细节"><a href="#成员访问细节" class="headerlink" title="成员访问细节 :"></a>成员访问细节 :</h4><ul><li>内部类中, 访问外部类成员 : 直接访问, 包括私有</li><li>外部类中, 访问内部类成员 : 需要创建对象访问</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        MyOuter.<span class="hljs-type">MyInner</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyOuter</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInner</span>();<br>        a.show();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyOuter</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInner</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>            System.out.println(num);                            <span class="hljs-comment">// 30 输出内部类方法中定义的</span><br>            System.out.println(<span class="hljs-built_in">this</span>.num);                       <span class="hljs-comment">// 20 输出内部类成员变量</span><br>            System.out.println(MyOuter.<span class="hljs-built_in">this</span>.num);               <span class="hljs-comment">// 10 输出外部类成员变量，指定this是MyOuter本类的</span><br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="静态内部类-static-修饰的成员内部类"><a href="#静态内部类-static-修饰的成员内部类" class="headerlink" title="静态内部类 : static 修饰的成员内部类"></a>静态内部类 : static 修饰的成员内部类</h4><p>​    创建对象格式 : 外部类名.内部类名 对象名 &#x3D; new 外部类名.内部类对象();</p><p>​    <em><strong>注意事项 : 静态只能访问静态</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticInnerTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Outer.InnerClass.A();                 <span class="hljs-comment">//静态可以通过类名调用</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClass</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-type">Outer</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>();    <span class="hljs-comment">//非静态成员，需要先创建对象，才能调用</span><br>            System.out.println(o.num1);<br>            System.out.println(num2);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="局部内部类-放在方法、代码块、构造器等执行体中"><a href="#局部内部类-放在方法、代码块、构造器等执行体中" class="headerlink" title="局部内部类: 放在方法、代码块、构造器等执行体中"></a>局部内部类: 放在方法、代码块、构造器等执行体中</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalClassTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        a.show();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;B&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();           <span class="hljs-comment">//要调用方法中的类，需要先在该方法中创建对象，使用内部类要用的方法，最后在主函数中通过调用外部类的该方法才能使用，很麻烦，一般不会使用</span><br>        b.method(); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>概述 : 匿名内部类本质上是一个特殊的局部内部类（定义在方法内部）,匿名内部类可以使代码更加简洁，定义一个类的同时对其进行实例化<br>前提 : 需要存在一个接口或类<br>格式 :<br>                    new 类名\接口名 () {  }</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">new</span> 类名()&#123;&#125;  :  代表继承这个类<br><span class="hljs-keyword">new</span> 接口名()&#123;&#125; : 代表实现这个接口<br>   结论 : 可以让代码变得更加简洁, 在定义类的时候对其进行实例化<br></code></pre></td></tr></table></figure><p><strong>问题: 方法的形参是接口类型, 我们该传入的是什么?</strong><br>                    <em><em>: —–&gt;传入的是该接口的</em><u>实现类对象</u>      要实现的方法多时，就实例化一个接口，方法少时就用匿名内部类</em>**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnonClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        useInter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InterImpl</span>());<br>        useInter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inter</span>()&#123;                                   <span class="hljs-comment">//匿名内部类作实现类对象</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;                                <span class="hljs-comment">//实现接口的方法</span><br>                System.out.println(<span class="hljs-string">&quot;匿名内部类&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useInter</span><span class="hljs-params">(Inter i)</span>&#123;   <span class="hljs-comment">// Inter i = new InterImpl(); 要传入一个实现类对象</span><br>        i.show();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Inter</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>Lambda表达式 : JDK8开始后的一种新语法形式</p><p>   <strong>作用 :</strong> 简化匿名内部类的代码写法。<br>   <strong>格式 :</strong> () -&gt; {}</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-function"><span class="hljs-params">(匿名内部类被重写方法的形参列表)</span> -&gt;</span> &#123;   被重写方法的方法体代码。&#125;<br>注：-&gt; 是语法形式，无实际含义<br></code></pre></td></tr></table></figure><p><strong>注意：Lambda 表达式只能简化函数式接口的匿名内部类的写法形式</strong></p><h5 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h5><ul><li>必须是接口,接口中有且仅有一个抽象方法的形式</li><li>通常会在接口上加上一个@FunctionalInterface注解，标记该接口必须是满足函数式接口。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Inter</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">cx</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">//使用</span><br>useInter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cx</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;cx&quot;</span>);<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><p><em>IDEA简化成Lambda快捷键：alt+回车</em></p><h4 id="Lambda表达式的省略写法"><a href="#Lambda表达式的省略写法" class="headerlink" title="Lambda表达式的省略写法"></a>Lambda表达式的省略写法</h4><ul><li>参数类型可以省略不写。</li><li>如果只有一个参数，参数类型可以省略，同时 () 也可以省略。</li><li>如果Lambda表达式的方法体代码只有一行代码<br>可以省略大括号不写,同时要省略分号<br>此时，如果这行代码是return语句，必须省略return不写，同时也必须省略 “;” 不写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br>&#125;<br><br>Calculator方法：<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> calculator.calc(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br>System.out.println(result);<br><br>Lambda表达实现：<br>Calculator((a, b) -&gt; a - b);<br></code></pre></td></tr></table></figure><h4 id="匿名内部类-amp-Lambda"><a href="#匿名内部类-amp-Lambda" class="headerlink" title="匿名内部类&amp;Lambda"></a>匿名内部类&amp;Lambda</h4><ul><li><h5 id="使用限制不同"><a href="#使用限制不同" class="headerlink" title="使用限制不同"></a>使用限制不同</h5></li></ul><p>匿名内部类 : 可以操作类, 接口<br>Lambda表达式 : 只能操作函数式接口</p><ul><li><h5 id="实现原理不同"><a href="#实现原理不同" class="headerlink" title="实现原理不同"></a>实现原理不同</h5></li></ul><p>匿名内部类：编译之后，产生一个<strong>单独的.class字节码</strong>文件<br>Lambda表达式：编译之后，没有一个单独的.class字节码文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">use(<span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;匿名内部类&quot;</span>);<br>    &#125;<br>&#125;);<br><br>use(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;Lambda&quot;</span>);<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="窗体、组件、事件"><a href="#窗体、组件、事件" class="headerlink" title="窗体、组件、事件"></a>窗体、组件、事件</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>    <span class="hljs-comment">// 创建窗体对象</span><br>    <span class="hljs-title class_">JFrame</span> frame = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>();<br>    <span class="hljs-comment">// 设置窗体大小 单位：像素</span><br>    frame.<span class="hljs-title function_">setSize</span>(<span class="hljs-number">500</span>, <span class="hljs-number">800</span>);    <br>    <span class="hljs-comment">// 修改窗体的关闭模式 </span><br>  frame.<span class="hljs-title function_">setDefaultCloseOperation</span>(<span class="hljs-title class_">WindowConstants</span>.<span class="hljs-property">EXIT_ON_CLOSE</span>);<br>    <span class="hljs-comment">// 设置窗体标题</span><br>    frame.<span class="hljs-title function_">setTitle</span>(<span class="hljs-string">&quot;窗体&quot;</span>);<br>    <span class="hljs-comment">// 设置窗体可见</span><br>    frame.<span class="hljs-title function_">setVisible</span>(<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="组件的添加"><a href="#组件的添加" class="headerlink" title="组件的添加"></a>组件的添加</h4><ol><li><p>窗体对象.setLayout(null); 取消默认布局</p></li><li><p>创建组件对象</p></li><li><p>组件对象.setBounds(x,y,width,height); 设置摆放位置</p></li><li><p>窗体对象.getContentPane().add(组件对象);</p><p><strong>如果相同位置，先来的会显示，优先级高，后设置的被覆盖；</strong></p><h5 id="窗体中添加按钮组件"><a href="#窗体中添加按钮组件" class="headerlink" title="窗体中添加按钮组件"></a>窗体中添加按钮组件</h5></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">JButton构造方法 :<br>      <span class="hljs-number">1.</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_">JButton</span><span class="hljs-params">()</span> : 创建一个空白的按钮<br>      <span class="hljs-number">2.</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_">JButton</span><span class="hljs-params">(String text)</span> : 创建一个带文本的按钮<br> 注: 如果取消窗体的默认布局, 需要手动指定组件的摆放位置<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">JFrame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>();<br>    frame.setSize(<span class="hljs-number">500</span>,<span class="hljs-number">500</span>);<br>   frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>    frame.setLayout(<span class="hljs-literal">null</span>);              <span class="hljs-comment">// 取消窗体默认布局</span><br>     <br>    <span class="hljs-type">JButton</span> <span class="hljs-variable">btn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;Hello World&quot;</span>);<span class="hljs-comment">// 1. 创建按钮对象</span><br>    btn.setBounds(<span class="hljs-number">60</span>,<span class="hljs-number">60</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);          <span class="hljs-comment">//    设置按钮位置 大小</span><br><br>    frame.getContentPane().add(btn);<span class="hljs-comment">// 2. 将按钮添加到窗体的面板对象中</span><br>    frame.setVisible(<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用JLabel展示文本和图片"><a href="#使用JLabel展示文本和图片" class="headerlink" title="使用JLabel展示文本和图片"></a>使用JLabel展示文本和图片</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"> JLabel构造方法 :<br>        JLabel(String text) 使用指定的文本创建一个 JLabel 对象<br>        JLabel(Icon image) 创建一个具有指定图像的 JLabel 对象<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">JFrame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>();<br>    frame.setSize(<span class="hljs-number">500</span>,<span class="hljs-number">500</span>);<br>    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>    frame.setLayout(<span class="hljs-literal">null</span>);<br><br>    <span class="hljs-type">JLabel</span> <span class="hljs-variable">jl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-string">&quot;你好&quot;</span>);   <span class="hljs-comment">// JLabel展示文本</span><br>    jl.setBounds(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br>    frame.getContentPane().add(jl);<br>    <br>    <span class="hljs-type">JLabel</span> <span class="hljs-variable">imgLabel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(<span class="hljs-string">&quot;&lt;图片位置&gt;&quot;</span>));   <span class="hljs-comment">// JLabel展示图片</span><br>    imgLabel.setBounds(<span class="hljs-number">50</span>, <span class="hljs-number">150</span>, <span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br>    frame.getContentPane().add(imgLabel);<br><br>    frame.setVisible(<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="监听器的使用"><a href="#监听器的使用" class="headerlink" title="监听器的使用"></a>监听器的使用</h4><h5 id="动作事件-ActionListener"><a href="#动作事件-ActionListener" class="headerlink" title="动作事件 : ActionListener"></a>动作事件 : ActionListener</h5><ul><li><p>鼠标点击  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">JButton btn = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JButton(<span class="hljs-string">&quot;按钮&quot;</span>)</span>;  <span class="hljs-comment">//按钮点击事件</span><br>btn.set<span class="hljs-constructor">Bounds(0,0,100,100)</span>;<br>frame.get<span class="hljs-constructor">ContentPane()</span>.add(btn);<br><br>btn.add<span class="hljs-constructor">ActionListener(<span class="hljs-params">new</span> ActionListener()</span> &#123;<br>    @Override<br>    public void action<span class="hljs-constructor">Performed(ActionEvent <span class="hljs-params">e</span>)</span> &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;按钮被点击了&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>空格按键</p><p><em>通过打印e.getKeyCode()的值，快速获取需要的按键代码数值</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">frame.addKeyListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyListener</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyTyped</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>        <span class="hljs-comment">//无法监听：fn，ctrl，esc，上下左右  很少用</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123; <span class="hljs-comment">//点击事件</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">keyCode</span> <span class="hljs-operator">=</span> e.getKeyCode();<br>        <span class="hljs-keyword">if</span>(keyCode == <span class="hljs-number">37</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;左&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(keyCode == <span class="hljs-number">38</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;上&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(keyCode == <span class="hljs-number">39</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;右&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(keyCode == <span class="hljs-number">40</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;下&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//适配器模式</span><br>frame.addKeyListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyAdapter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;键盘&quot;</span>);<br>            &#125;   <span class="hljs-comment">//只需要重写这一个方法</span><br>        &#125;);<br><br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> &#123; <span class="hljs-comment">//松开事件</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h5 id="焦点-程序的注意力集中在了某一个组件上"><a href="#焦点-程序的注意力集中在了某一个组件上" class="headerlink" title="焦点: 程序的注意力集中在了某一个组件上"></a>焦点: 程序的注意力集中在了某一个组件上</h5><p>注: 按钮组件比较特殊, 在创建好之后, 程序的焦点, 默认就在按钮组件上</p><p>​<strong>但按钮组件, 其实不需要占用程序的焦点，通过setFocusable(false); 取消焦点；</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">btn.set<span class="hljs-constructor">Focusable(<span class="hljs-params">false</span>)</span>;<br></code></pre></td></tr></table></figure><p><em>否则：监听点击按钮事件和键盘点击事件同时设置后，焦点在按钮上，操作键盘会显示按钮事件发生，自己的键盘事件无法使用。</em></p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p><strong>设计模式（Design pattern）：</strong>一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。<br> <strong>目的：</strong>使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性、程序的重用性。</p><h4 id="适配器设计模式：解决接口与接口实现类之间的矛盾问题"><a href="#适配器设计模式：解决接口与接口实现类之间的矛盾问题" class="headerlink" title="适配器设计模式：解决接口与接口实现类之间的矛盾问题"></a>适配器设计模式：解决接口与接口实现类之间的矛盾问题</h4><h5 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h5><ol><li>编写一个 xxxAdapter 类,  实现对应接口</li><li>重写内部所有抽象方法,  但方法都是空实现</li><li>让自己的类去继承适配器类, 重写自己需要的方法即可</li><li>为了避免其他类创建适配器类的对象,  使用 abstract 进行修饰</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Inter</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">C</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A_Adapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Inter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">C</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NeedC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A_Adapter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">C</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;只需要重写所需的这个方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="模板设计模式：把抽象类整体看做成一个模板，模板中不能决定的东西定义成抽象方法"><a href="#模板设计模式：把抽象类整体看做成一个模板，模板中不能决定的东西定义成抽象方法" class="headerlink" title="模板设计模式：把抽象类整体看做成一个模板，模板中不能决定的东西定义成抽象方法"></a>模板设计模式：把抽象类整体看做成一个模板，模板中不能决定的东西定义成抽象方法</h4><p><strong>让使用模板的类（继承抽象类的类）去重写抽象方法实现需求</strong> </p><p><strong>目的：</strong>模板设计模式的优势，模板已经定义了通用结构，使用者只需要关心自己需要实现的功能即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Template</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">()</span> &#123;    <span class="hljs-comment">//final修饰，防止子类修改</span><br>        System.out.println(<span class="hljs-string">&quot;模板头部固定代码&quot;</span>);<br>        body();<br>        System.out.println(<span class="hljs-string">&quot;模板尾部固定代码&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">body</span><span class="hljs-params">()</span>;   <span class="hljs-comment">//中间设置为抽象方法，供子类实现</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Happy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Template</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">body</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;模板中要实现的代码&quot;</span>);<br>    &#125;<br>&#125;<br><br>使用：<br>    <span class="hljs-type">Happy</span> <span class="hljs-variable">happy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Happy</span>();<br>    happy.write();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>代码块</tag>
      
      <tag>内部类</tag>
      
      <tag>Lambda表达式</tag>
      
      <tag>窗体的使用</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注解</title>
    <link href="/2023/02/13/%E6%B3%A8%E8%A7%A3/"/>
    <url>/2023/02/13/%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>@FunctionalInterface注解: 标记该接口必须是满足函数式接口。</p><h5 id="函数式接口-接口中有且仅有一个抽象方法的形式"><a href="#函数式接口-接口中有且仅有一个抽象方法的形式" class="headerlink" title="函数式接口:接口中有且仅有一个抽象方法的形式"></a>函数式接口:接口中有且仅有一个抽象方法的形式</h5>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>零碎知识点</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>11_Package包，抽象类，接口，多态</title>
    <link href="/2023/02/10/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Package%E5%8C%85%EF%BC%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%EF%BC%8C%E6%8E%A5%E5%8F%A3%EF%BC%8C%E5%A4%9A%E6%80%81/"/>
    <url>/2023/02/10/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Package%E5%8C%85%EF%BC%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%EF%BC%8C%E6%8E%A5%E5%8F%A3%EF%BC%8C%E5%A4%9A%E6%80%81/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-SE-Package包，抽象类，接口，多态"><a href="#Java-SE-Package包，抽象类，接口，多态" class="headerlink" title="Java SE    Package包，抽象类，接口，多态"></a>Java SE    Package包，抽象类，接口，多态</h1><h2 id="Package包"><a href="#Package包" class="headerlink" title="Package包"></a>Package包</h2><p>包本质来说就是文件夹,  用来管理类文件<br>建包的语法格式：package 域名倒写.自定义名称。 通常小写。</p><h4 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h4><ul><li>相同包下的类可以直接访问，不同包下的类必须导包,才可以使用。       <em>格式：import 包名.类名;</em></li><li>假如一个类中需要用到不同类，而这个两个类的名称是一样的，那么默认只能导入一个类，另一个类要带包名访问。</li></ul><h5 id="具体："><a href="#具体：" class="headerlink" title="具体："></a>具体：</h5><p>如果有相同的两个类Student，在不同包下，此时第一次调用会导包，但是如果需要用到另一个***.***.b.Student时，就要用全类名创建对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> ***.***.a.Student;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>    stu.eat();<br>    com.itheima.b.<span class="hljs-type">Student</span> <span class="hljs-variable">stu2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.itheima.b.Student();  <span class="hljs-comment">// 使用全类名创建对象 : 包名 + 类名</span><br>    stu2.sleep();<br>&#125;<br></code></pre></td></tr></table></figure><p>同理，如果创建类名为Scanner的类，和util中的重名，将无法正常导包使用Scanner，需要用下述的  <strong>全类名</strong> 格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Scanner</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        java.util.<span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(System.in);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul><li>抽象方法：将共性的行为（方法）抽取到父类之后，发现该方法的实现逻辑无法在父类中给出具体明确，该方法就可以定义为抽象方法。</li></ul><p>​定义格式：public abstract 返回值类型 方法名(参数列表);</p><ul><li>抽象类：如果一个类中存在抽象方法，那么该类就必须声明为抽象类</li></ul><p>​定义格式：public abstract class 类名{}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;猫&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;狗&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>1.抽象类不能实例化</p><p>​<em>如果抽象类允许创建对象, 就可以调用内部没有方法体的抽象方法,没有意义</em></p><p>2.抽象类存在构造方法</p><p>​<em>交给子类, 通过super进行访问，进行初始化等功能实现</em></p><p>3.抽象类中可以存在普通方法</p><p>​<em>子类继承来使用</em></p><p>4.抽象类的子类<br>        <em>1). 要么重写抽象类中的所有抽象方法</em><br>        <em>2). 要么成为抽象类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showA</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showA</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showB</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showB</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="abstract-关键字的冲突"><a href="#abstract-关键字的冲突" class="headerlink" title="abstract 关键字的冲突"></a>abstract 关键字的冲突</h4><ul><li>final：被 abstract 修饰的方法，强制要求子类重写，被 final 修饰的方法子类不能重写</li><li>private：被 abstract 修饰的方法，强制要求子类重写，被 private 修饰的方法子类不能重写</li><li>static：被 static 修饰的方法可以类名调用，类名调用抽象方法没有意义</li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>体现的思想是对<strong>规则</strong>的声明</p><p>思路: 如果发现一个类, 所有的组成, 都是抽象方法*[ 没有成员变量，没有普通方法时 ]*</p><p>​            <strong>这种类, 我们通常会设计为Java中的接口, 因为现在这个类存在的唯一价值, 就只是声明规则了</strong></p><hr><h4 id="定义格式-interface-接口名"><a href="#定义格式-interface-接口名" class="headerlink" title="定义格式:    interface 接口名 {}"></a>定义格式:    interface 接口名 {}</h4><p>注意: 接口不允许实例化</p><p>接口和类之间是实现关系, 通过implements关键字来完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">class 类名 implements 接口名 &#123;&#125;<br></code></pre></td></tr></table></figure><p>实现类(接口的子类)的两种方式:</p><pre><code class="hljs">               1. 重写所有抽象方法</code></pre><ol start="2"><li>将实现类变成抽象类  [此时还是不能实例化，要再继承类，一般不用]</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Inter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InterImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Inter</span> &#123;<br>    <span class="hljs-built_in">super</span>()； <span class="hljs-comment">//此时是调用Object的构造方法，不是Inter的</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;A&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;B&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>所有的类都会默认继承Object类;</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">super();  <span class="hljs-comment">// IDEA中ctrl+点击查看方法的具体实现---&gt;Object的构造方法</span><br></code></pre></td></tr></table></figure><h4 id="接口的成员特点"><a href="#接口的成员特点" class="headerlink" title="接口的成员特点"></a>接口的成员特点</h4><p>1.成员变量 :  只能定义常量, 因为系统会默认加入三个关键字<br>                  public static final      <em>这三个关键字没有顺序关系</em></p><p>2.成员方法 :  只能是抽象方法, 因为系统会默认加入两个关键字  <em><strong>注：JDK8 和 JDK9 中有一些新特性</strong></em>  见后续补充<br>                  public abstract</p><p>3.构造方法 :  没有</p><p><strong>即</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyInter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NUM</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;   <span class="hljs-comment">//final命名规则：大写</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="接口和类之间的各种关系"><a href="#接口和类之间的各种关系" class="headerlink" title="接口和类之间的各种关系 :"></a>接口和类之间的各种关系 :</h4><ul><li><p>类和类之间 : 继承关系, 只支持单继承, <strong>不支持多继承</strong>, 但是可以多层继承</p></li><li><p>类和接口之间 : 实现关系, 可以单实现, <strong>多实现</strong>, <strong>同时可以在继承一个类的同时, 实现多个接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fu</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;此时不需要再重写了&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">showA</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">showB</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fu</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A</span>, B &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showA</span><span class="hljs-params">()</span> &#123;  <span class="hljs-comment">//interface A中的方法</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showB</span><span class="hljs-params">()</span> &#123;   <span class="hljs-comment">//interface B中的方法</span><br>    &#125;<br>    <br>    <span class="hljs-comment">//注：A,B接口中show()同名，那么只需要实现一个即可，已经继承fu类了，所以不需要在此再次实现</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>接口和接口之间 : 继承关系, 可以单继承, 也可以<strong>多继承</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">InterA</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">InterB</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">InterC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InterA</span>, InterB &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InterCImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InterC</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;&#125;  <span class="hljs-comment">//同名，实现一个就是实现所有的逻辑了；  如果方法不同名，每一个接口的抽象方法都要实现；</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="抽象类-amp-接口-对比"><a href="#抽象类-amp-接口-对比" class="headerlink" title="抽象类&amp;接口 对比"></a>抽象类&amp;接口 对比</h4><p><strong>抽象类 : 对事物做抽象 (描述事物)</strong><br><strong>接口     : 对行为抽象 (制定规则)</strong></p><ul><li>成员变量 :</li></ul><p>​抽象类 : 可以定义变量, 也可以定义常量<br>​接口 : 只能定义常量 </p><ul><li>成员方法</li></ul><p>​抽象类 : 可以是定义具体方法, 也可以定义抽象方法<br>​接口 : 只能定义抽象方法</p><ul><li>构造方法</li></ul><p>​抽象类 : 有<br>​接口 : 没有</p><p><em>注：接口可以为程序制定规则, 代码更加规范；如果有抽象方法没实现，就无法创建类</em></p> <img src="/2023/02/10/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Package%E5%8C%85%EF%BC%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%EF%BC%8C%E6%8E%A5%E5%8F%A3%EF%BC%8C%E5%A4%9A%E6%80%81/%E6%8E%A5%E5%8F%A3%E7%A4%BA%E4%BE%8B.png" class=""> <h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>同一个行为具有多个不同表现形式或形态的能力</p><h4 id="多态的前提"><a href="#多态的前提" class="headerlink" title="多态的前提 :"></a>多态的前提 :</h4><ul><li>​            有继承 &#x2F; 实现关系</li><li>​            有方法重写</li><li>​            <strong>有父类引用指向子类对象</strong></li></ul><h4 id="多态的好处"><a href="#多态的好处" class="headerlink" title="多态的好处"></a>多态的好处</h4><p><strong>提高了程序的扩展性</strong></p><ol><li><p><strong>对象多态</strong><br>Animal a &#x3D; new Dog();<br>Animal b &#x3D; new Cat();<br>​    <em>好处: 方法的形参定义为父类类型, 这个方法可以接收该父类的任意子类对象</em></p></li><li><p><strong>行为多态</strong><br><em>好处: 同一个方法, 具有多种不同表现形式&#x2F;形态的能力</em></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Polymorphism</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        useAnimal(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>());<br>        useAnimal(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>());<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useAnimal</span><span class="hljs-params">(Animal a)</span> &#123;        <span class="hljs-comment">// Animal a = new Dog()/Cat();</span><br>          a.eat();                                  <span class="hljs-comment">// 行为多态</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;狗&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;猫&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="多态的成员访问特点"><a href="#多态的成员访问特点" class="headerlink" title="多态的成员访问特点"></a>多态的成员访问特点</h4><ul><li>成员变量：编译看左边（父类），执行看左边（父类）</li><li>成员方法：编译看左边（父类），执行看右边（子类）</li></ul><p>​<strong>在编译的时候, 会检查父类中有没有这个方法</strong><br>​        没有 : 编译出错<br>​        有 : 编译通过, 但是运行的时候, 一定会执行子类的方法逻辑</p><p>​                               <strong>原因: 担心你调用的方法, 在父类中是一个抽象方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Inter</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>;<br>&#125;    <span class="hljs-comment">//例如：父类为接口</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Polymorphism</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Fu</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Zi</span>();<br>        System.out.println(f.num);  <span class="hljs-comment">// 10</span><br>        f.show();                   <span class="hljs-comment">// Zi</span><br>        f.print();                  <span class="hljs-comment">// FuStatic</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fu</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Fu&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;FuStatic&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fu</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Zi&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ZiStatic&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>多态创建对象, 调用静态成员时 :  看类名</li></ul><p>​        <em>静态的成员, 推荐类名进行调用</em><br>​        <strong>原因: 静态的成员, 可以使用对象名调用, 但这是一种假象；实际上生成字节码文件后, 会自动将对象名调用, 改成类名调用.</strong></p><h4 id="多态的弊端"><a href="#多态的弊端" class="headerlink" title="多态的弊端"></a>多态的弊端</h4><p>不能使用子类的特有成员</p><h5 id="解决方法——多态中的转型"><a href="#解决方法——多态中的转型" class="headerlink" title="解决方法——多态中的转型"></a>解决方法——多态中的转型</h5><ul><li><p>向上转型</p><p>​从子到父（父类引用指向子类对象）</p></li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">Fu f = <span class="hljs-keyword">new</span> <span class="hljs-type">Zi</span>();   <span class="hljs-comment">//堆内存中开辟空间</span><br></code></pre></td></tr></table></figure><ul><li>向下转型</li></ul><p>​从父到子（将父类引用所指向的对象, 转交给子类类型）</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Zi z <span class="hljs-operator">=</span> (Zi)f<span class="hljs-comment">;      //空间地址赋值给z，加上强转</span><br></code></pre></td></tr></table></figure><p><strong>问题：如果被转的引用类型变量，对应的实际类型和目标类型不是同一种类型，那么在转换的时候就会出现ClassCastException</strong> </p><h6 id="判断工具：关键字-instanceof"><a href="#判断工具：关键字-instanceof" class="headerlink" title="判断工具：关键字 instanceof"></a>判断工具：关键字 instanceof</h6><p><strong>使用格式：  对象名 instanceof 类型</strong><br>判断一个对象是否是一个类的实例<br>即：判断关键字左边的对象，是否是右边的类型，返回boolean类型结果</p><h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><p><strong>实现支付功能，需要支持多种支付方式：支付平台支付、银行卡网银支付、信用卡快捷支付，选择支付方式和输入金额后，输出为：通过—支付了—元。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请选择支付方式:  1. 支付平台支付   2. 银行卡网银支付  3. 信用卡快捷支付&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">choice</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;    <span class="hljs-comment">//重点：引用型先赋null，否则payment.pay(money);会因为没有实例报错</span><br><br>        <span class="hljs-keyword">switch</span> (choice) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> :<br>                payment = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PlatformPaymentImpl</span>();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                payment = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BankCardPaymentImpl</span>();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                payment = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreditCardPaymentImpl</span>();<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;请输入支付金额: &quot;</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> sc.nextDouble();<br>        payment.pay(money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BankCardPaymentImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Payment</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;通过银行卡网银支付了:&quot;</span> + money + <span class="hljs-string">&quot;元!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreditCardPaymentImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Payment</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;通过信用卡快捷支付:&quot;</span> + money + <span class="hljs-string">&quot;元!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PlatformPaymentImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Payment</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;通过支付平台支付了:&quot;</span> + money + <span class="hljs-string">&quot;元!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Payment</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="补充：JDK-8-9对接口的新特性"><a href="#补充：JDK-8-9对接口的新特性" class="headerlink" title="补充：JDK 8,9对接口的新特性"></a>补充：JDK 8,9对接口的新特性</h2><h3 id="JDK8版本接口特性"><a href="#JDK8版本接口特性" class="headerlink" title="JDK8版本接口特性:"></a>JDK8版本接口特性:</h3><h5 id="1-允许定义非抽象方法-需要加入default关键字"><a href="#1-允许定义非抽象方法-需要加入default关键字" class="headerlink" title="1.允许定义非抽象方法, 需要加入default关键字"></a>1.允许定义非抽象方法, 需要加入default关键字</h5><p>​作用: 解决接口的升级问题[ 接口中添加新方法，实现更多功能 ， 不影响之前的 ]</p><p>​注意事项:</p><ol><li>public可以省略, 但是default不能省略</li><li>默认方法, 实现类是允许重写的, 但是需要去掉default关键字</li><li>如果实现了多个接口, <strong>多个接口中存在相同的默认方法</strong>, 实现类必须重写默认方法 [因为不知道要实现哪一个默认方法，必须重写]</li></ol><h5 id="2-允许定义静态方法"><a href="#2-允许定义静态方法" class="headerlink" title="2.允许定义静态方法"></a>2.允许定义静态方法</h5><p>​理解: 既然接口已经允许方法带有方法体了, 干脆也放开静态方法, 可以类名调用</p><p>​注意事项:</p><pre><code class="hljs">        1.public可以省略, 但是static不能省略</code></pre><p>​            2.接口中的静态方法, 只允许接口名进行调用, 不允许实现类通过对象调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span> &#123;<br>    [<span class="hljs-keyword">public</span>] <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    [<span class="hljs-keyword">public</span>] <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">function</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDK9-接口特性"><a href="#JDK9-接口特性" class="headerlink" title="JDK9 接口特性"></a>JDK9 接口特性</h3><p><strong>接口中允许定义 private 私有方法</strong></p><p>接口中静态方法的定义格式：<br>格式1：private 返回值类型 方法名(参数列表) {}<br>范例1：private void show() {}</p><p>格式2：private static 返回值类型 方法名(参数列表) {}<br>范例2：private static void method() {}</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">interface</span> <span class="hljs-title">Inter</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span>()</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">start</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;start方法执行...&quot;</span>);<br>        log();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">end</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;end方法执行...&quot;</span>);<br>        log();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;日志记录&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>好处：抽取log()方法为private static，这样可以在内部静态方法中使用，减少冗余代码并且不被其他调用。</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>Package包</tag>
      
      <tag>抽象类</tag>
      
      <tag>接口</tag>
      
      <tag>多态</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10_JavaSE学习笔记[static，final关键字及继承的使用]</title>
    <link href="/2023/02/09/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-static%EF%BC%8Cfinal%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%8A%E7%BB%A7%E6%89%BF%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/02/09/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-static%EF%BC%8Cfinal%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%8A%E7%BB%A7%E6%89%BF%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-SE-static，final关键字及继承的使用"><a href="#Java-SE-static，final关键字及继承的使用" class="headerlink" title="Java SE    static，final关键字及继承的使用"></a>Java SE    static，final关键字及继承的使用</h1><h2 id="Static关键字"><a href="#Static关键字" class="headerlink" title="Static关键字"></a>Static关键字</h2><p>static 关键字 : 修饰符, 可以修饰成员变量, 成员方法</p><p>static 成员变量：共享数据</p><p>static 成员方法：常用于工具类</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h4><pre><code class="hljs">      1. 被类的所有对象所共享      2. 多了一种调用方式, 可以通过类名进行调用 (推荐使用类名调用)      3. 随着类的加载而加载, 优先于对象存在</code></pre><h4 id="内存图示意："><a href="#内存图示意：" class="headerlink" title="内存图示意："></a>内存图示意：</h4> <img src="/2023/02/09/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-static%EF%BC%8Cfinal%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%8A%E7%BB%A7%E6%89%BF%E7%9A%84%E4%BD%BF%E7%94%A8/1.png" class=""> <p><em>解释：new创建对象的堆内存地址中会链接到静态成员变量区，这样调用该对象时就可以使用 static 成员变量了。</em></p><h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><ul><li>static 方法中,  只能访问静态成员 (直接访问)</li><li>static 中不允许使用 this 关键字</li></ul><p>原因：static是在代码加载时就生成了，不需要生成对象再使用。所以static方法中无法调用还没生成对象的非静态成员，同样this关键字是属于对象的，没创建对象前无法使用。</p><h4 id="static-成员方法"><a href="#static-成员方法" class="headerlink" title="static 成员方法"></a>static 成员方法</h4><ol><li><p>成员方法什么时候加入 static</p><ul><li>常用于制作工具类</li></ul></li><li><p>工具类: 用来实现某种功能，而不是描述事物的类</p></li><li><p>如果一个类中的所有方法都是 static 所修饰的</p><p>则——<strong>私有该类的构造方法</strong>     <em>目的 : 为了不让其他类再创建该类对象，如  System类</em></p></li></ol><p>示例：ArrayTools用来做数组的操作，这里仅写了一个求最大值的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTools</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ArrayTools</span><span class="hljs-params">()</span>&#123;&#125;   <span class="hljs-comment">//私有构造方法</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMax</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; max) &#123;<br>                max = arr[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br><span class="hljs-comment">// 主方法中调用ArrayTools.printArray(arr);</span><br></code></pre></td></tr></table></figure><h4 id="main-方法-详细分析"><a href="#main-方法-详细分析" class="headerlink" title="main 方法  详细分析"></a>main 方法  详细分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>public：被JVM调用，访问权限足够大</p></li><li><p>static： 被JVM调用，不用创建对象</p><p>​<em>注：因为main方法是静态的，故测试类中其他方法也需要是静态的</em></p></li><li><p>void：  被JVM调用，不需要给JVM返回值</p></li><li><p>main：一个通用的名称，虽然不是关键字，但是被JVM识别</p></li><li><p>String[] args: 以前用于接收键盘录入数据的，现在无作用</p></li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承：让类与类之间产生关系（子父类关系），子类可以直接使用父类中非私有的成员；[私有成员变量通过调用公有方法使用，get()，set()]</p><p>格式：public class 子类名 extends 父类名 { }</p><p>使用时机：当类与类之间，存在相同 (共性) 的内容，并且产生了 is a 的关系，就可以考虑使用继承，来优化代码。</p><h4 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h4><p>子父类中, 出现了方法声明一模一样的方法 (方法名, 参数, 返回值)</p><p>​    <strong>在创建子类对象, 调用方法的时候, 会优先使用子类的方法逻辑</strong><br>​            <em>这虽然是就近原则的现象, 但其实是子类的方法, 对父类的方法, 进行了重写操作</em></p><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景:"></a>使用场景:</h5><p>当子类需要父类的方法, 但父类的方法逻辑不合适 (需要进行修改 | 增强)  就需要对父类的方法进行重写</p><ul><li><h4 id="this，super的使用"><a href="#this，super的使用" class="headerlink" title="this，super的使用"></a>this，super的使用</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fu</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fu</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>System.out.println( num  );           <span class="hljs-comment">// 30    </span><br>        System.out.println( <span class="hljs-built_in">this</span>.num );       <span class="hljs-comment">// 20        </span><br>        System.out.println( <span class="hljs-built_in">super</span>.num );      <span class="hljs-comment">// 10    </span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>子类重写父类方法，需要保证方法声明完全一致（方法名，参数，返回值类型需要保持一致）</p><p>@Override：识别出方法是不是重写的</p><h4 id="方法重载-amp-方法重写-比较"><a href="#方法重载-amp-方法重写-比较" class="headerlink" title="方法重载 &amp; 方法重写   比较"></a>方法重载 &amp; 方法重写   比较</h4><ul><li>方法重载(Overload) : 在同一个类中, 方法名相同, 参数不同(类型不同, 个数不同, 顺序不同), 与返回值无关</li><li>方法重写(Override) : 在子父类当中, 出现了方法声明一模一样的方法 (方法名, 参数, 返回值)</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>父类中私有方法不能被重写</li><li>子类重写父类方法时，访问权限必须大于等于父类</li></ul><table><thead><tr><th>private[最高]</th></tr></thead><tbody><tr><td>(default)</td></tr><tr><td>protected</td></tr><tr><td>public</td></tr></tbody></table><h5 id="protected详述："><a href="#protected详述：" class="headerlink" title="protected详述："></a>protected详述：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fu</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;fu&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> ***.Fu;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    和Fu是不同包的</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fu</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">super</span>.show();     <span class="hljs-comment">//用super调用Fu中的protected方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    Zi类 和 Test类是同包下的</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Zi</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Zi</span>();<br>        z.method();      <span class="hljs-comment">//通过调用method()方法，间接调用show()，很麻烦，通常不用</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="继承的特点"><a href="#继承的特点" class="headerlink" title="继承的特点"></a>继承的特点</h4><p><strong>Java只支持单继承，不支持多继承，但支持多层继承</strong></p><p><em>解释：</em></p><p>如果是多继承：  若父类A,B有相同的方法，子类C不知道调用哪个；</p><p>多层继承：有方法重写的机制，继承只有一个，是唯一的；可以实现类似”爷-父-子”的多级继承关系；</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>不能被继承： 构造方法要和类名保持一致，继承下来父类的构造方法名不匹配；</p><p>子类初始化之前，要先完成</p><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><p>除了Object类（最顶层的类）, 在所有构造方法的第一行代码, 都默认隐藏了一句代码——super();<br>&#x2F;&#x2F;    <em>通过这句代码, 访问父类的空参数构造方法</em></p><p>总结： Java当中所有的类, 都直接或者间接的继承到了 Object 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="具体案例实现"><a href="#具体案例实现" class="headerlink" title="具体案例实现"></a>具体案例实现</h4><p>需求:<br>        Person：姓名, 年龄</p><p>​        Teacher: 姓名, 年龄, teach()</p><p>​        Student: 姓名, 年龄, 成绩,study()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, age);   <span class="hljs-comment">//重点：super调用父类</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">teach</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span> + <span class="hljs-built_in">super</span>.getName() + <span class="hljs-string">&quot;, 年龄：&quot;</span> + <span class="hljs-built_in">super</span>.getAge());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, age);     <span class="hljs-comment">//重点：super调用父类</span><br>        <span class="hljs-built_in">this</span>.score = score;   <span class="hljs-comment">// 初始私有成员变量</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span> + <span class="hljs-built_in">super</span>.getName() + <span class="hljs-string">&quot;, 年龄：&quot;</span> + <span class="hljs-built_in">super</span>.getAge() + <span class="hljs-string">&quot;岁, 成绩：&quot;</span> + score );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码的堆内存中的存储情况：</p><p>new一个Student对象时，会同时又父类Person(super)，存放其成员变量；</p> <img src="/2023/02/09/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-static%EF%BC%8Cfinal%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%8A%E7%BB%A7%E6%89%BF%E7%9A%84%E4%BD%BF%E7%94%A8/2.png" class=""> <p><strong>父类的私有成员变量其实是继承到的，只是不能直接访问</strong></p><h4 id="this，super"><a href="#this，super" class="headerlink" title="this，super"></a>this，super</h4><ul><li>this：代表本类对象的引用</li><li>super：代表父类存储空间的标识</li></ul><p>super 调用父类成员的省略规则 :</p><p>​            super.父类成员变量 | super.父类成员方法()   &lt;实际上，是this的使用可以省略，子类继承父类的这些变量&#x2F;方法&gt;</p><p>​            -&gt; 被调用的变量和方法, 在子类中不存在, super.可以直接省略的</p><table><thead><tr><th><strong>关键字</strong></th><th><strong>访问成员变量</strong></th><th><strong>访问成员方法</strong></th><th><strong>访问构造方法</strong></th></tr></thead><tbody><tr><td>this</td><td>this.本类成员变量;</td><td>this.本类成员方法();</td><td>this(); this(…);本类构造方法</td></tr><tr><td>super</td><td>super.父类成员变量;</td><td>super.父类成员方法();</td><td>super(); super(…);父类构造方法</td></tr></tbody></table><p><strong>注意：this() 和 super() 都在争夺构造方法第一行的位置   —&gt;   二者不能共存;</strong></p><p><em>IDEA中的提示：’super()’ &#x2F; ‘this()’   调用必须是构造函数主体中的第一条语句</em></p><h6 id="this-的使用场景"><a href="#this-的使用场景" class="headerlink" title="this()的使用场景"></a>this()的使用场景</h6><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">开闭原则 : 对功能扩展做开放, 对修改代码做关闭<br></code></pre></td></tr></table></figure><p>示例</p><p>项目Version1.0版本 : 有3个成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> &#123;<br>    <span class="hljs-built_in">super</span>();<br>    <span class="hljs-built_in">this</span>.a = a;<br>    <span class="hljs-built_in">this</span>.b = b;<br>    <span class="hljs-built_in">this</span>.c = c;<br>&#125;<br><span class="hljs-comment">// 使用时</span><br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>项目Version1.1版本 : 新增一个成员变量</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//新增构造方法</span><br>public <span class="hljs-constructor">A(<span class="hljs-params">int</span> <span class="hljs-params">a</span>, <span class="hljs-params">int</span> <span class="hljs-params">b</span>, <span class="hljs-params">int</span> <span class="hljs-params">c</span>, <span class="hljs-params">int</span> <span class="hljs-params">d</span>)</span> &#123;<br>    this(a, b, c);<br>    this.d = d;<br>&#125;<br><span class="hljs-comment">//原本代码A a = new A(1, 2, 3);使用不变</span><br>A a = <span class="hljs-keyword">new</span> <span class="hljs-constructor">A(1, 2, 3 , 4)</span>;<br></code></pre></td></tr></table></figure><p>此时内部不掉用super(),因为不能共存，在this(a,b,c)调用的构造方法中使用super();</p><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><p>final 关键字是最终的意思，修饰符，可用于修饰方法，类，变量</p><h4 id="final-修饰的特点"><a href="#final-修饰的特点" class="headerlink" title="final 修饰的特点"></a>final 修饰的特点</h4><ul><li><p>修饰方法：表明该方法是最终方法，不能被重写</p></li><li><p>修饰类：表明该类是最终类，不能被继承（可以有父类）              |  如String类</p></li><li><p>修饰变量：表明该变量是常量，不能再次被赋值</p></li></ul><h4 id="修饰变量的细节"><a href="#修饰变量的细节" class="headerlink" title="修饰变量的细节"></a>修饰变量的细节</h4><ul><li>变量是基本数据类型：数据值不能发生改变</li><li>变量是引用数据类型：引用类型的地址值不能发生改变，但是地址里面的内容是可以发生改变的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-comment">// arr = new int[3];   报错</span><br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>;   <span class="hljs-comment">//成功编译</span><br></code></pre></td></tr></table></figure><ul><li>成员变量如果被 final 修饰，需要在构造方法结束之前完成赋值</li></ul><h4 id="final修饰成员变量的注意事项"><a href="#final修饰成员变量的注意事项" class="headerlink" title="final修饰成员变量的注意事项"></a>final修饰成员变量的注意事项</h4><ol><li><p>final修饰成员变量, 不允许修饰默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> num ;  <span class="hljs-comment">//只有这一条默认值语句的话，会报错； 必须初始化赋值</span><br></code></pre></td></tr></table></figure></li><li><p>final修饰成员变量的初始化时机</p><p>1). 在定义的时候直接赋值<br>2). 在构造方法中完成赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> num ;   <span class="hljs-comment">//final int num = 20;  构造语句中不能再赋值</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span> <span class="hljs-params">()</span>&#123;<br>num = <span class="hljs-number">20</span>；<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="final修饰变量的命名规范"><a href="#final修饰变量的命名规范" class="headerlink" title="final修饰变量的命名规范"></a>final修饰变量的命名规范</h4><p>​      如果变量名是一个单词：所有字母大写  max  MAX<br>​      如果变量名是多个单词：所有字母大写, 中间使用下划线分割   maxValue    MAX_VALUE</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>static</tag>
      
      <tag>final</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9_List集合的使用,学生管理系统的实现</title>
    <link href="/2023/02/07/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B009/"/>
    <url>/2023/02/07/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B009/</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习笔记9"><a href="#Java学习笔记9" class="headerlink" title="Java学习笔记9"></a>Java学习笔记9</h1><h2 id="集合-List"><a href="#集合-List" class="headerlink" title="集合  List"></a>集合  List</h2><h3 id="ArrayList集合的使用"><a href="#ArrayList集合的使用" class="headerlink" title="ArrayList集合的使用:"></a>ArrayList集合的使用:</h3><p>​    创建String, StringBuilder, ArrayList类的对象, 打印对象名, 都没有看到地址值, 而是元素内容</p><h5 id="1-构造方法"><a href="#1-构造方法" class="headerlink" title="1.构造方法 :"></a>1.构造方法 :</h5><p>public ArrayList() : 创建一个空的集合容器</p><h5 id="2-集合容器的创建"><a href="#2-集合容器的创建" class="headerlink" title="2.集合容器的创建 :"></a>2.集合容器的创建 :</h5><p>ArrayList list &#x3D; new ArrayList();<br>可以添加任意类型数据，会导致集合内的数据类型不一致，处理时有问题。</p><p><strong>解决：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">ArrayList<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> list = new ArrayList<span class="hljs-tag">&lt;&gt;</span>();   //jdk7开始右边<span class="hljs-tag">&lt;&gt;</span>内不用写了，自动填入前面<span class="hljs-tag">&lt;&gt;</span>的内容<br></code></pre></td></tr></table></figure><p>​            &lt;&gt; : 泛型<br>​                        使用泛型, 可以对集合中存储的数据, 进行类型限制<br>​                        <strong>泛型中, 不允许编写基本数据类型</strong><br>​                        在集合中, 存储 整数, 小数, 字符… 这些数据,类型的方法：<br>​                                                          ————<strong>使用基本数据类型对应的包装类</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">byte</span>           <span class="hljs-keyword">Byte</span><br><span class="hljs-keyword">short</span>          <span class="hljs-keyword">Short</span><br><span class="hljs-keyword">int</span>            Integer    <br><span class="hljs-keyword">long</span>           <span class="hljs-keyword">Long</span><br><span class="hljs-keyword">float</span>          <span class="hljs-keyword">Float</span><br><span class="hljs-keyword">double</span>         <span class="hljs-keyword">Double</span><br><span class="hljs-keyword">boolean</span>        <span class="hljs-keyword">Boolean</span><br><span class="hljs-keyword">char</span>           Character  <br></code></pre></td></tr></table></figure><p><em>注：没有隐式转换，不需要考虑</em></p><h3 id="ArrayList-常用成员方法"><a href="#ArrayList-常用成员方法" class="headerlink" title="ArrayList 常用成员方法 :"></a>ArrayList 常用成员方法 :</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">ArrayList<span class="hljs-tag">&lt;<span class="hljs-name">E</span>&gt;</span> list<br></code></pre></td></tr></table></figure><h5 id="1-增"><a href="#1-增" class="headerlink" title="1.增 :"></a>1.增 :</h5><p>public boolean add(E e) :    将指定的元素添加到此列表的尾部   &#x2F;&#x2F;永远返回true，一般不用数据接收<br>public void add(int index, E element) : 在指定索引位置, 添加对应的元素 (插队)</p><h5 id="2-删"><a href="#2-删" class="headerlink" title="2.删"></a>2.删</h5><p>public E remove(int index) :   根据索引做删除, 返回被删除掉的元素<br>public boolean remove(Object o) :               根据元素做删除, 删除首次出现的，返回是否删除成功的状态</p><h5 id="3-改"><a href="#3-改" class="headerlink" title="3.改"></a>3.改</h5><p>public E set(int index, E element) :                修改指定索引位置, 为对应的元素, 返回被覆盖掉的元素</p><h5 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h5><p>public E get(int index)  :                                   根据索引, 获取集合中的元素<br>public int size()  :                                               返回集合中元素的个数</p><h5 id="实际使用："><a href="#实际使用：" class="headerlink" title="实际使用："></a>实际使用：</h5><p><em>需求1：创建一个存储字符串的集合, 内部存储字符串元素</em><br>        使用程序实现在控制台遍历该集合, 将字符串长度为3的输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>list.add(<span class="hljs-string">&quot;abcdf&quot;</span>);<br>list.add(<span class="hljs-string">&quot;sanio&quot;</span>);<br>list.add(<span class="hljs-string">&quot;happy&quot;</span>);<br>list.add(<span class="hljs-string">&quot;sad&quot;</span>);<br>list.add(<span class="hljs-string">&quot;try&quot;</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> list.get(i);<br>    <span class="hljs-keyword">if</span>(s.length() == <span class="hljs-number">3</span>)&#123;<br>        System.out.println(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>需求2: 创建一个存储String的集合,内部存储（test,张三,李四,test,test）字符串</em><br>        删除所有的test字符串,删除后,将集合剩余元素打印在控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> list.get(i);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;test&quot;</span>.equals(s))&#123;<br>        list.remove(i);<br>        i--;                     <span class="hljs-comment">//重点，删除后先i-- 再i++ 回来</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结: 在遍历集合的过程中, 有删除操作</p><pre><code class="hljs">           1. 正序遍历 : 不要忘记   --操作           2. 倒序遍历：不需要，正常遍历即可</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> list.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> list.get(i);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;test&quot;</span>.equals(s))&#123;<br>        list.remove(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>注：变量和常量比较</em></p><p><em>要用常量.equals(变量)； 否则变量.equals(常量)可能发生空指针异常；</em></p><h3 id="学生管理系统的搭建——集合的增删改查"><a href="#学生管理系统的搭建——集合的增删改查" class="headerlink" title="学生管理系统的搭建——集合的增删改查"></a>学生管理系统的搭建——集合的增删改查</h3><p>需求：实现学生信息（id, name, age,birthday）的增删改查，学号不允许重复。</p><h5 id="Student类"><a href="#Student类" class="headerlink" title="Student类"></a>Student类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String birthday;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String id, String name, <span class="hljs-type">int</span> age, String birthday)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.birthday = birthday;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBirthday</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> birthday;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBirthday</span><span class="hljs-params">(String birthday)</span> &#123;<br>        <span class="hljs-built_in">this</span>.birthday = birthday;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="StudentManage"><a href="#StudentManage" class="headerlink" title="StudentManage"></a>StudentManage</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;Student&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;--------学生管理系统--------&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;1 添加学生&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;2 删除学生&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;3 修改学生&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;4 查看学生&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;5 退出&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;请输入您的选择:&quot;</span>);<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">choice</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-keyword">switch</span> (choice) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    addStudent(list);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    deleteStudentById(list);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    updateStudentInfoById(list);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                    queryStudentInfos(list);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                    System.out.println(<span class="hljs-string">&quot;感谢您的使用, 再见&quot;</span>);<br>                    System.exit(<span class="hljs-number">0</span>);          <span class="hljs-comment">// 终止正在运行的JVM虚拟机;对应之前的lo标记循环再break</span><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入有误, 请检查&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 键盘录入学生信息, 封装学生对象, 存入集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(ArrayList&lt;Student&gt; list)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入学生学号:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            id = sc.next();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> getIndex(id, list);<br>            <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">// 学号在集合查询-1，代表为空，可以使用</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;您输入的学号已被占用, 请重新输入!&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;请输入学生姓名:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sc.next();<br>        System.out.println(<span class="hljs-string">&quot;请输入学生年龄:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        System.out.println(<span class="hljs-string">&quot;请输入学生生日:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">birthday</span> <span class="hljs-operator">=</span> sc.next();<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(id, name, age, birthday);<br>        list.add(stu);<br>        System.out.println(<span class="hljs-string">&quot;添加成功!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据学号修改集合中的学生信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateStudentInfoById</span><span class="hljs-params">(ArrayList&lt;Student&gt; list)</span> &#123;<br>        <span class="hljs-comment">// 1. 键盘录入要修改的学生学号</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入要修改的学生学号:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">updateId</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-comment">// 2. 调用 getIndex 方法查找学号对应的索引</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> getIndex(updateId, list);<br>        <span class="hljs-comment">// 3. 如果学号不存在, 给出错误提示</span><br>        <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;查无此人, 修改失败!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 4. 如果学号存在, 录入新的学生信息, 完成修改</span><br>            System.out.println(<span class="hljs-string">&quot;请输入新的学生姓名:&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sc.next();<br>            System.out.println(<span class="hljs-string">&quot;请输入新的学生年龄:&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            System.out.println(<span class="hljs-string">&quot;请输入新的学生生日:&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">birthday</span> <span class="hljs-operator">=</span> sc.next();<br><br>            <span class="hljs-comment">// 将新录入的学生信息, 封装为学生对象</span><br>            <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(updateId, name, age, birthday);<br>            list.set(index, stu);<br>            System.out.println(<span class="hljs-string">&quot;修改成功!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据学号删除集合中的学生</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteStudentById</span><span class="hljs-params">(ArrayList&lt;Student&gt; list)</span> &#123;<br>        <span class="hljs-comment">// 1. 键盘录入要删除的学生学号</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入您要删除的学生学号:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-comment">// 2. 调用getIndex方法, 查找学号在集合中的索引</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> getIndex(id, list);<br>        <span class="hljs-comment">// 3. 判断方法的返回值是不是 -1</span><br>        <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 3.1 是-1, 说明学号不存在, 给出错误提示</span><br>            System.out.println(<span class="hljs-string">&quot;查无此人, 删除失败!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 3.2 不是-1, 说明学号存在, 根据索引做删除</span><br>            list.remove(index);<br>            System.out.println(<span class="hljs-string">&quot;删除成功!&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查看学生</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryStudentInfos</span><span class="hljs-params">(ArrayList&lt;Student&gt; list)</span> &#123;<br>        <span class="hljs-keyword">if</span> (list.size() == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;查无信息, 请重试!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;学号\t\t\t姓名\t年龄\t生日&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>                <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> list.get(i);<br>                System.out.println(stu.getId() + <span class="hljs-string">&quot;\t&quot;</span> + stu.getName() + <span class="hljs-string">&quot;\t&quot;</span> + stu.getAge() + <span class="hljs-string">&quot;\t&quot;</span> + stu.getBirthday());<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据学号, 集合中查找对应的索引</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getIndex</span><span class="hljs-params">(String id, ArrayList&lt;Student&gt; list)</span> &#123;<br>        <span class="hljs-comment">// 1. 遍历集合, 获取到每一个学生对象</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> list.get(i);<br>            <span class="hljs-comment">// stu.getId() : 从集合中取出的学生学生</span><br>            <span class="hljs-comment">// id : 要查找的学号</span><br>            <span class="hljs-comment">// 2. 比对</span><br>            <span class="hljs-keyword">if</span> (stu.getId().equals(id)) &#123;<br>                <span class="hljs-comment">// 3. 找到了, 返回正确的索引</span><br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 4. 没找到, 返回-1</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注：System.exit(0);          &#x2F;&#x2F; 终止正在运行的JVM虚拟机， 通常用0表示正常退出</strong></p><p><strong>效果同之前的lo标记循环再break lo；</strong></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>List集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常量优化机制</title>
    <link href="/2023/02/06/%E5%B8%B8%E9%87%8F%E4%BC%98%E5%8C%96%E6%9C%BA%E5%88%B6/"/>
    <url>/2023/02/06/%E5%B8%B8%E9%87%8F%E4%BC%98%E5%8C%96%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>回头总结一下</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>零碎知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>常量优化机制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8_API帮助文档的使用，String类</title>
    <link href="/2023/02/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B008/"/>
    <url>/2023/02/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B008/</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习笔记8"><a href="#Java学习笔记8" class="headerlink" title="Java学习笔记8"></a>Java学习笔记8</h1><h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><h3 id="API帮助文档"><a href="#API帮助文档" class="headerlink" title="API帮助文档"></a>API帮助文档</h3><ol><li><p>在索引位置搜索自己要查看的类</p></li><li><p>看包<br> 目的: 是不是java.lang包(核心包), 是的话不需要编写导包代码(import)<br>                     - 不是java.lang包, 需要编写导包代码</p></li><li><p>看这个类的介绍<br> 目的: 搞清楚这个类的作用</p></li><li><p>看这个类的构造方法<br> 目的: 为了将该类的对象, 创建出来</p></li><li><p>看这个类的成员方法(方法摘要)</p><pre><code class="hljs"> 1. 方法名 2. 参数 3. 返回值 4. 介绍</code></pre><p> 示例：Scanner的使用</p> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Scanner键盘录入字符串 :<br><br>    <span class="hljs-function">String <span class="hljs-title">next</span>() : 遇到了空格, 或者是tab键就不再录入了</span><br><span class="hljs-function">    String <span class="hljs-title">nextLine</span>() : 以回车作为录入的结束标记</span><br><span class="hljs-function"></span><br><span class="hljs-function">    弊端:</span><br><span class="hljs-function">            1. <span class="hljs-title">next</span>() : 数据可能录入不完整</span><br><span class="hljs-function">            2. <span class="hljs-title">nextLine</span>() : 之前调用过<span class="hljs-title">nextInt</span>(), <span class="hljs-title">nextDouble</span>(), <span class="hljs-title">nextFloat</span>()...</span><br><span class="hljs-function">                                <span class="hljs-title">nextLine</span>()方法, 就直接使用上面用剩下的回车键，直接结束</span><br><span class="hljs-function">    解决：  先把<span class="hljs-title">next</span>()的回车键使用掉再调用<span class="hljs-title">nextLint</span>()</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="String类的特点"><a href="#String类的特点" class="headerlink" title="String类的特点 :"></a>String类的特点 :</h3><ul><li><p>Java 程序中所有双引号字符串, 都是String这个类的对象</p></li><li><p>字符串一旦被创建, 就不可更改, 字符串内容不可改变<br>   如果想要更改, 只能使用新的对象, 做替换</p></li><li><p>String字符串虽然不可改变, 但是可以被共享</p><p>   <strong>字符串常量池: 当我们使用双引号创建字符串对象时, 会检查常量池中是否存在该数据</strong><br>         不存在 : 创建      存在 : 复用</p></li></ul><h3 id="String类常见构造方法"><a href="#String类常见构造方法" class="headerlink" title="String类常见构造方法 :"></a>String类常见构造方法 :</h3><ul><li><p>​    public String() : 创建一个空白字符串, 里面不含任何内容</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">String</span> s1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>();<br></code></pre></td></tr></table></figure></li><li><p>​    public String(char[] chs) : 根据传入的字符数组, 创建字符串对象</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">char</span>[] chs = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br><span class="hljs-type">String</span> s2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(chs);<br></code></pre></td></tr></table></figure></li><li><p>​    public String(String original) : 根据传入的字符串, 来创建字符串对象</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">String</span> s3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><hr><ol><li><p>打印对象名, 会看到对象的内存地址；但打印字符串对象, 直接输出内容</p></li><li><p>这三个构造方法, 创建字符串对象, 没有双引号直接创建简便.</p><p> ​    String s &#x3D; “abc”;</p></li></ol><hr><h5 id="字符串对象-两种创建方式的区别"><a href="#字符串对象-两种创建方式的区别" class="headerlink" title="字符串对象, 两种创建方式的区别"></a>字符串对象, 两种创建方式的区别</h5><pre><code class="hljs">       1. 双引号直接创建       2. 通过过构造方法创建</code></pre><h3 id="字符串比较（4种）"><a href="#字符串比较（4种）" class="headerlink" title="字符串比较（4种）"></a>字符串比较（4种）</h3><p><strong>注： &#x3D;&#x3D;判断引用型时，是看地址是否一样</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>    System.out.println(s1 == s2);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：True</p><p>解释：String字符串虽然不可改变, 但是可以被共享；  堆内存中地址一样</p><p> <strong>字符串常量池: 当我们使用双引号创建字符串对象时, 会检查常量池中是否存在该数据</strong></p> <img src="/2023/02/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B008/1.png" class=""> <p><em><strong>jdk7版本之前:StringTable是在方法区中jdk7版本开始:StringTable 被挪到了堆内存中</strong></em></p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>    System.out.println(s1 == s2);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：False</p><p>解释：new String(“abc”)在堆中创建了两个对象，new的一个新地址给s2，所以s1，s2地址不同</p> <img src="/2023/02/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B008/2.png" class=""> <hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ab&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> s2 + (<span class="hljs-string">&quot;c&quot;</span>);<br>    System.out.println(s1 == s3);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：False</p><p>解释：字符串拼接时，调用StringBuilder，在堆中开辟新内存，但此时数据类型不同一个String，一个StringBuilder类型，所以自动调用toString方法，堆中开辟新的内存地址。</p><img src="/2023/02/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B008/3.png" class=""> <p><em>API文档：Java 语言提供对字符串串联符号（”+”）以及将其他对象转换为字符串的特殊支持。字符串串联是通过 <code>StringBuilder</code>（或  <code>StringBuffer</code>）类及其 <code>append</code> 方法实现的。字符串转换是通过  <code>toString</code> 方法实现的，该方法由 <code>Object</code> 类定义，并可被 Java 中的所有类继承。</em></p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span> + <span class="hljs-string">&quot;b&quot;</span> + <span class="hljs-string">&quot;c&quot;</span>;<br>    System.out.println(s1 == s2);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：True</p><p>解释：Java的常量优化机制，反编译.class文件后，”a” + “b” + “c”自动转化为”abc”;</p><h3 id="String类中用于比较的方法"><a href="#String类中用于比较的方法" class="headerlink" title="String类中用于比较的方法 :"></a>String类中用于比较的方法 :</h3><ul><li><p>​        public boolean equals(Object anObject) 将此字符串与指定的对象比较</p></li><li><p>​        public boolean equalsIgnoreCase(String anotherString) 将此 String 与另一个 String 比较，不考虑大小写  [如验证码]</p></li></ul><h3 id="String类用于遍历的方法"><a href="#String类用于遍历的方法" class="headerlink" title="String类用于遍历的方法:"></a>String类用于遍历的方法:</h3><ul><li><p>​    public char[] toCharArray()       将此字符串转换为一个新的字符数组</p></li><li><p>​    public char charAt(int index)    返回指定索引处的 char 值</p></li><li><p>​    public int length()                       返回此字符串的长度</p></li></ul><p><strong>具体实现：</strong></p><p><strong>编写的方法和主方法平级的话，方法前要加static。</strong></p><ul><li><h5 id="字符串的第一种遍历方式"><a href="#字符串的第一种遍历方式" class="headerlink" title="字符串的第一种遍历方式"></a>字符串的第一种遍历方式</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print1</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcd&quot;</span>;<br><span class="hljs-type">char</span>[] chars = s.toCharArray();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chars.length; i++) &#123;<br>    System.out.println(chars[i]);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="字符串的第二种遍历方式"><a href="#字符串的第二种遍历方式" class="headerlink" title="字符串的第二种遍历方式"></a>字符串的第二种遍历方式</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcd&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s.charAt(i);<br>        System.out.println(c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="String方法合集"><a href="#String方法合集" class="headerlink" title="String方法合集"></a>String方法合集</h3><h5 id="String类的截取方法"><a href="#String类的截取方法" class="headerlink" title="String类的截取方法 :"></a>String类的截取方法 :</h5><ul><li>​    public String substring(int beginIndex) :  根据传入的索引开始做截取, 截取到字符串的末尾</li><li>​    public String substring(int beginIndex, int endIndex) :  根据传入的开始和结束索引, 对字符串做截取</li></ul><p>​                                                                             包含头, 不包含尾</p><p>​    <em>注意: 截取出来的内容, 是作为新的字符串返回, 需要找变量接收</em></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">String</span> s = <span class="hljs-string">&quot;abcd&quot;</span>;<br><span class="hljs-attribute">String</span> result = s.substring(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h5 id="String类的替换方法"><a href="#String类的替换方法" class="headerlink" title="String类的替换方法 :"></a>String类的替换方法 :</h5><ul><li>​    public String replace(CharSequence target, CharSequence replacement)  :</li></ul><p>​                                                                                          参数1 : 旧值   参数2 : 新值</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">String</span> s = <span class="hljs-string">&quot;abcd&quot;</span>;<br><span class="hljs-type">String</span> result = s.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&quot;cd&quot;</span>, <span class="hljs-string">&quot;ef&quot;</span>);<br></code></pre></td></tr></table></figure><p>String类的切割方法 :</p><ul><li>​    public String[] split(String regex) : 根据传入的字符串作为规则, 切割当前字符串</li></ul><p><strong>如果切割失败，切割字符前加入\\</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">String s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;111.222.333.444&quot;</span><span class="hljs-comment">;</span><br>String[] sArr <span class="hljs-operator">=</span> s.split(<span class="hljs-string">&quot;\\.&quot;</span>)<span class="hljs-comment">;</span><br>for (int i <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; sArr.length; i++) &#123;</span><br>    System.out.println(sArr[i])<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><em>原因： ‘ .’是通配字符，相当于每个位置切一刀，如果没有\\就代表每个位置一刀，得不到结果；”\\.”表示以’.’作分隔符。</em></p><h3 id="StringBuilder的使用"><a href="#StringBuilder的使用" class="headerlink" title="StringBuilder的使用"></a>StringBuilder的使用</h3><p><strong>StringBuilder的作用 : 提高字符串的操作效率</strong></p><p>示例： 拼接1-10000数字成字符串</p><p>System.currentTimeMillis()：获取1970年1月1日0时0分0秒到现在所经历过的毫秒值 (1秒 &#x3D; 1000毫秒)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">long start = <span class="hljs-keyword">System</span>.currentTimeMillis();<br>String s = &quot;&quot;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100000</span>; i++)&#123;<br>    s += i;<br>&#125;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s);<br>long end = <span class="hljs-keyword">System</span>.currentTimeMillis();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">end</span> - <span class="hljs-keyword">start</span>);            // <span class="hljs-number">3000</span>毫秒<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">long start = <span class="hljs-keyword">System</span>.currentTimeMillis();<br>StringBuilder s = <span class="hljs-built_in">new</span> StringBuilder();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100000</span>; i++)&#123;<br>    sb.append(i);<br>&#125;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s);<br>long end = <span class="hljs-keyword">System</span>.currentTimeMillis();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">end</span> - <span class="hljs-keyword">start</span>);            // <span class="hljs-number">9</span>毫秒<br></code></pre></td></tr></table></figure><h4 id="StringBuilder的介绍"><a href="#StringBuilder的介绍" class="headerlink" title="StringBuilder的介绍 :"></a>StringBuilder的介绍 :</h4><pre><code class="hljs">   1. StringBuilder是一种可变的字符序列   2. StringBuilder是字符串缓冲区, 将其理解是容器, 这个容器可以存储**任意数据类型**, 但是只要进入到这个容器, **全部变成字符串**.</code></pre><h4 id="StringBuilder的构造方法"><a href="#StringBuilder的构造方法" class="headerlink" title="StringBuilder的构造方法 :"></a>StringBuilder的构造方法 :</h4><ul><li>​    public StringBuilder() : 创建一个空白的字符串缓冲区(容器), 其初始容量为16个字符</li><li>​    public StringBuilder(String str) : 创建一个字符串缓冲区(容器), 容器在创建好之后, 就带有参数的内容</li></ul><h4 id="StringBuilder常用成员方法"><a href="#StringBuilder常用成员方法" class="headerlink" title="StringBuilder常用成员方法 :"></a>StringBuilder常用成员方法 :</h4><ul><li>​public StringBuilder append(任意类型) : 添加数据, 并返回对象自己</li><li>​    public StringBuilder reverse() : 将缓冲区中的内容, 进行反转</li><li>​    public int length() : 返回长度</li><li>​    public String toString() : 将缓冲区的内容, 以String字符串类型返回</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">StringBuilder sb = <span class="hljs-built_in">new</span> StringBuilder();<br><span class="hljs-comment">// 链式编程: 调用的方法, 返回的结果是对象, 就可以继续向下调用方法</span><br>sb.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;红色&quot;</span>).<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;绿色&quot;</span>).<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;蓝色&quot;</span>);<br>System.out.<span class="hljs-built_in">println</span>(sb);    <span class="hljs-comment">//红色绿色蓝色蓝色</span><br></code></pre></td></tr></table></figure><p>同理：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">String s = <span class="hljs-string">&quot;abcd&quot;</span>；<br>s.<span class="hljs-keyword">substring</span>(<span class="hljs-number">1</span>).<span class="hljs-keyword">substring</span>(<span class="hljs-number">1</span>)；<span class="hljs-comment">//两次截取</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 情况: 数据在StringBuilder当中, 但是需要调用的方法在StringBuilder中没有, String有<br><span class="hljs-regexp">//</span> 解决: StringBuilder转换为String, 再调用<br>String[] sArr = sb.toString().split(<span class="hljs-string">&quot;色&quot;</span>);  <span class="hljs-regexp">//</span>接着上面的代码<br><span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; sArr.length; i++) &#123;<br>    System.out.println(sArr[i]);            <span class="hljs-regexp">//</span>红 绿 蓝  [省略了回车]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="String-和-StringBuilder-的转换"><a href="#String-和-StringBuilder-的转换" class="headerlink" title="String 和 StringBuilder 的转换"></a>String 和 StringBuilder 的转换</h4><ul><li>​        String —&gt; StringBuilder</li></ul><p>​                        String s &#x3D; “abc”;<br>​                        StringBuilder sb &#x3D; new StringBuilder(s);</p><ul><li>​        StringBuilder —&gt; String</li></ul><p>​                        String s &#x3D; sb.toString();</p><p>需求: 键盘接受一个字符串，程序判断出该字符串是否是对称字符串(回文字符串)，并在控制台打印True&#x2F;False<br>        <em>对称字符串:  123321、111    非对称字符串: 123123</em></p><p>思路: 对拿到的字符串进行反转, 反转后的内容, 如果跟原数据相同, 判定为回文字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入一个对称字符串: &quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> sc.nextLine();<br><br><span class="hljs-comment">// 将String转换为StringBuilder, 调用其内部反转的方法</span><br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(content);<br>sb.reverse();<br><br><span class="hljs-comment">// 判断反转后的内容与原数据是否相同</span><br><span class="hljs-comment">// content : String类型</span><br><span class="hljs-comment">// sb : StringBuilder类型</span><br><span class="hljs-keyword">if</span> (content.equals(sb.toString())) &#123;        <span class="hljs-comment">//重点：如果没有toString()方法，则equal判断的两个数据不是同类型，必定返回false</span><br>    System.out.println(<span class="hljs-string">&quot;True&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;False&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="StringBuilder和StringBuffer"><a href="#StringBuilder和StringBuffer" class="headerlink" title="StringBuilder和StringBuffer"></a>StringBuilder和StringBuffer</h3><p>构造方法，使用完全一样。</p><h5 id="不同："><a href="#不同：" class="headerlink" title="不同："></a>不同：</h5><p>将StrinaBuilder 的实例用于多个线程是不安全的。如果需要这样的同步。则建议使用StringBuffer。</p><p>StringBuffer:线程安全的可变字符序列。</p><p>不安全—&gt;效率往往比较高            安全—&gt;效率比较低</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>String类，API帮助文档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7_面向对象的知识点，设计电影信息系统</title>
    <link href="/2023/02/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/"/>
    <url>/2023/02/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习笔记7"><a href="#Java学习笔记7" class="headerlink" title="Java学习笔记7"></a>Java学习笔记7</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><h3 id="创建Student类的对象进行使用"><a href="#创建Student类的对象进行使用" class="headerlink" title="创建Student类的对象进行使用"></a>创建Student类的对象进行使用</h3><ol><li><p>创建对象的格式<br>类名 对象名 &#x3D; new 类名();</p></li><li><p>使用对象成员变量的格式<br>对象名.成员变量;</p></li><li><p>使用对象成员方法的格式<br>对象名.成员方法();</p></li></ol><hr><p>细节:</p><p>1.打印对象名, 可以看到对象的内存地址</p><p>com.njucm.Student@4eec7777<br>全类名 : 包名 + 类名</p><p>2.成员变量就算没有赋值, 也可以直接用, 使用的是对象的默认值</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>Java当中要想创建对象, 必须现有类的存在</p><p>类 : 一组相关属性和行为的集合, 将其看做为是对象的设计图.<br>对象 : 是根据设计图(类), 创建出来的实体</p><h4 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系:"></a>类和对象的关系:</h4><pre><code class="hljs">依赖关系: 需要根据类, 创建对象量关系: 根据一个类, 可以创建出多个对象</code></pre><p>类的组成:</p><p>​        类的本质 : 就是对事物进行的描述</p><p>​        属性(大多为名词): 在代码中使用成员变量表示, 成员变量跟之前定义变量的格式一样, 只不过位置发生了改变, 类中方法外.</p><p>​        行为(大多为动词): 在代码中使用成员方法表示, 成员方法跟之前定义方法的格式一样, 只不过需要去掉 static 关键字</p><h3 id="对象内存图"><a href="#对象内存图" class="headerlink" title="对象内存图"></a>对象内存图</h3><p><em>具体动画查看对应文件夹下“内存动画.pptx”文件。</em></p><h5 id="单个对象内存图"><a href="#单个对象内存图" class="headerlink" title="单个对象内存图"></a>单个对象内存图</h5> <img src="/2023/02/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/1.png" class=""> <h5 id="两个对象内存图"><a href="#两个对象内存图" class="headerlink" title="两个对象内存图"></a>两个对象内存图</h5> <img src="/2023/02/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/2.png" class=""> <h5 id="两个引用指向相同内存图"><a href="#两个引用指向相同内存图" class="headerlink" title="两个引用指向相同内存图"></a>两个引用指向相同内存图</h5> <img src="/2023/02/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/3.png" class=""> <p><strong>JAVA里的垃圾自动清理，堆中不用的会一定时间内被自动清理，不需要delete</strong></p><h3 id="成员变量和局部变量的区别"><a href="#成员变量和局部变量的区别" class="headerlink" title="成员变量和局部变量的区别"></a>成员变量和局部变量的区别</h3> <img src="/2023/02/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/%E5%8C%BA%E5%88%AB.png" class=""><h3 id="This关键字"><a href="#This关键字" class="headerlink" title="This关键字"></a>This关键字</h3><p><strong>成员变量和局部变量重名的情况, Java使用的是就近原则</strong></p><p>问题: 非要使用成员变量, 怎么办?<br>解决: 使用this关键字进行区分</p><p>this可以区分局部变量和成员变量的重名问题</p><h5 id="this关键字的作用"><a href="#this关键字的作用" class="headerlink" title="this关键字的作用:"></a>this关键字的作用:</h5><p>​        this可以调用本类成员 (变量, 方法)</p><p>​            this.本类成员变量<br>​            this.本类成员方法();</p><p>​        this.的省略规则 :</p><p>​            本类成员方法 : 没有前提条件, this.可以直接省略<br>​            本类成员变量 : 方法中没有出现重名的变量, this.才可以省略</p><hr><h5 id="this-代表当前类对象的引用-地址"><a href="#this-代表当前类对象的引用-地址" class="headerlink" title="this : 代表当前类对象的引用(地址)"></a>this : 代表当前类对象的引用(地址)</h5><ul><li><p>谁调用就代表谁.</p><p>方法中的this, 代表的就是哪一个对象.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">Student stu1 = <span class="hljs-built_in">new</span> Student();<br>System.out.<span class="hljs-built_in">println</span>(stu1);<br>Student stu2 = <span class="hljs-built_in">new</span> Student();<br>System.out.<span class="hljs-built_in">println</span>(stu2);<br>stu1.<span class="hljs-built_in">print</span>()  <span class="hljs-comment">// ----&gt; this ---&gt; stu1的地址</span><br>stu2.<span class="hljs-built_in">print</span>()  <span class="hljs-comment">// ----&gt; this ---&gt; stu2的地址</span><br></code></pre></td></tr></table></figure></li></ul><p>​                </p><h3 id="构造方法-构造器"><a href="#构造方法-构造器" class="headerlink" title="构造方法(构造器)"></a>构造方法(构造器)</h3><p>初始化一个新建的对象<br>构建、创造对象的时候，所调用的方法</p><h5 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h5><p>1.方法名与类名相同，大小写也要一致<br>2.没有返回值类型，连void都没有<br>3.没有具体的返回值（不能由return带回结果数据）</p><h5 id="构造方法的作用"><a href="#构造方法的作用" class="headerlink" title="构造方法的作用 :"></a>构造方法的作用 :</h5><pre><code class="hljs">       1. 本质的作用 : 创建对象       2. 结合执行时机 : 可以创建对象的时候, 给对象中的数据初始化</code></pre><h5 id="构造方法的注意事项"><a href="#构造方法的注意事项" class="headerlink" title="构造方法的注意事项 :"></a>构造方法的注意事项 :</h5><pre><code class="hljs">       1. 一个类中, 没有编写构造方法, 系统将会提供一个 **[默认的] [无参数]** 的构造方法       2. 一个类中, 如果手动编写了构造方法, 系统将不会再提供那个默认的无参构造了       3. 构造方法不允许手动调用          * *建议 : 编写类的时候, 无参构造, 带参构造, 全部手动给出*</code></pre><p><strong>执行完构造方法里的语句后再将地址赋值回来。</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Student stu</span> = new Student(<span class="hljs-string">&quot;你好&quot;</span>,123);<br></code></pre></td></tr></table></figure><p>new在堆内存形成一个地址存放默认数据，栈内存中调用Student的有参构造方法，执行赋值语句，使堆内存中参数值改为你好，123； 最后将堆内存地址值传回来给stu。</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>使用类设计对象时将需要处理的数据以及处理这些数据的方法, 设计到对象中</p><p><strong>封装的设计规范 : 合理隐藏, 合理暴露</strong></p><ul><li>更好的维护数据</li><li>使用者无需关心内部实现, 只要知道如何使用即可</li></ul><h5 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符 :"></a>权限修饰符 :</h5><p>​            private : 同一个类中<br>​            (default) : 同一个类中, 同一个包中<br>​            protected : 同一个类中, 同一个包中, 不同包的子类<br>​            public : 任意位置访问</p><h3 id="标准JavaBean"><a href="#标准JavaBean" class="headerlink" title="标准JavaBean"></a>标准JavaBean</h3><ul><li>这个类中的成员变量都要私有，并且要对外提供相应的getXxx ，setXxx方法</li><li>类中提供无参, 带参构造方法。</li></ul><h5 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h5><p>只负责数据存取，而对数据的处理交给其他类来完成，以实现数据和数据业务处理相分离。</p><p><strong>安装插件JSP：直接获取构造方法，getXxx ，setXxx方法。</strong></p><h3 id="电影信息系统"><a href="#电影信息系统" class="headerlink" title="电影信息系统"></a>电影信息系统</h3><p>需求</p><ul><li>展示系统中的全部电影(每部电影展示：名称、评分)</li><li>允许用户根据电影编号（id）查询出某个电影的详细信息</li></ul> <img src="/2023/02/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/%E5%9B%BE%E7%89%871.png" class=""><p>代码：</p><p>Moive</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Movie</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String time;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br>    <span class="hljs-keyword">private</span> String area;<br>    <span class="hljs-keyword">private</span> String type;<br>    <span class="hljs-keyword">private</span> String director;<br>    <span class="hljs-keyword">private</span> String starring;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String title, String time, <span class="hljs-type">double</span> score, String area, String type, String director, String starring)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.title = title;<br>        <span class="hljs-built_in">this</span>.time = time;<br>        <span class="hljs-built_in">this</span>.score = score;<br>        <span class="hljs-built_in">this</span>.area = area;<br>        <span class="hljs-built_in">this</span>.type = type;<br>        <span class="hljs-built_in">this</span>.director = director;<br>        <span class="hljs-built_in">this</span>.starring = starring;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTitle</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> title;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTitle</span><span class="hljs-params">(String title)</span> &#123;<br>        <span class="hljs-built_in">this</span>.title = title;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> time;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTime</span><span class="hljs-params">(String time)</span> &#123;<br>        <span class="hljs-built_in">this</span>.time = time;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getArea</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> area;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setArea</span><span class="hljs-params">(String area)</span> &#123;<br>        <span class="hljs-built_in">this</span>.area = area;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setType</span><span class="hljs-params">(String type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.type = type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDirector</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> director;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDirector</span><span class="hljs-params">(String director)</span> &#123;<br>        <span class="hljs-built_in">this</span>.director = director;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStarring</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> starring;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStarring</span><span class="hljs-params">(String starring)</span> &#123;<br>        <span class="hljs-built_in">this</span>.starring = starring;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MovieService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MovieService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Movie[] movies;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MovieService</span><span class="hljs-params">(Movie[] movies)</span> &#123;<br>        <span class="hljs-built_in">this</span>.movies = movies;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 启动电影信息管理系统</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br><br>        lo:<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;----------电影信息系统----------&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;请输入您的选择:&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;1. 查询全部电影信息&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;2. 根据id查询电影信息&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;3. 退出&quot;</span>);<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">choice</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>            <span class="hljs-keyword">switch</span> (choice) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    queryMovieInfos();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    queryMovieInfoById();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    System.out.println(<span class="hljs-string">&quot;感谢您的使用, 再见!&quot;</span>);<br>                    <span class="hljs-keyword">break</span> lo;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;您的输入有误, 请检查&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 此方法根据电影编号, 查询电影详情信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryMovieInfoById</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 键盘录入用户输入的编号</span><br>        System.out.println(<span class="hljs-string">&quot;请输入您要查询的电影编号:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-comment">// 2. 遍历数组, 从数组中查询电影信息</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; movies.length; i++) &#123;<br>            <span class="hljs-type">Movie</span> <span class="hljs-variable">movie</span> <span class="hljs-operator">=</span> movies[i];<br>            <span class="hljs-keyword">if</span>(movie.getId() == id)&#123;<br>                <span class="hljs-comment">// 3. 将找到的电影信息, 打印在控制台</span><br>                System.out.println(movie.getId() + <span class="hljs-string">&quot;---&quot;</span> + movie.getTitle() + <span class="hljs-string">&quot;---&quot;</span> + movie.getTime()<br>                        + <span class="hljs-string">&quot;---&quot;</span> + movie.getScore() + <span class="hljs-string">&quot;---&quot;</span> + movie.getArea() + <span class="hljs-string">&quot;---&quot;</span><br>                        + movie.getType() + <span class="hljs-string">&quot;---&quot;</span> + movie.getDirector() + <span class="hljs-string">&quot;---&quot;</span> + movie.getStarring());<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 代码要是走到这里, 说明没找到</span><br>        System.out.println(<span class="hljs-string">&quot;您输入的编号不存在, 请检查!&quot;</span>);<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 展示系统中全部的电影 (名称, 评分)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryMovieInfos</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 遍历数组, 取出每一个电影对象</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; movies.length; i++) &#123;<br>            <span class="hljs-type">Movie</span> <span class="hljs-variable">movie</span> <span class="hljs-operator">=</span> movies[i];<br>            <span class="hljs-comment">// System.out.println(movie);   打印对象名, 会看到内存地址</span><br>            <span class="hljs-comment">// 2. 通过电影对象, 调用内部getXxx方法, 获取信息并打印</span><br>            System.out.println(movie.getTitle() + <span class="hljs-string">&quot;---&quot;</span> + movie.getScore());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MovieTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Movie</span> <span class="hljs-variable">movie1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;东八区的先生们&quot;</span>, <span class="hljs-string">&quot;2022&quot;</span>, <span class="hljs-number">2.1</span>, <span class="hljs-string">&quot;中国大陆&quot;</span>, <span class="hljs-string">&quot;剧情 喜剧&quot;</span>, <span class="hljs-string">&quot;夏睿&quot;</span>, <span class="hljs-string">&quot;张翰 王晓晨&quot;</span>);<br>        <span class="hljs-type">Movie</span> <span class="hljs-variable">movie2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;上海堡垒&quot;</span>, <span class="hljs-string">&quot;2019&quot;</span>, <span class="hljs-number">2.9</span>, <span class="hljs-string">&quot;中国大陆&quot;</span>, <span class="hljs-string">&quot;爱情 战争 科幻&quot;</span>, <span class="hljs-string">&quot;滕华涛&quot;</span>, <span class="hljs-string">&quot;鹿晗 舒淇&quot;</span>);<br>        <span class="hljs-type">Movie</span> <span class="hljs-variable">movie3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;纯洁心灵·逐梦演艺圈&quot;</span>, <span class="hljs-string">&quot;2015&quot;</span>, <span class="hljs-number">2.2</span>, <span class="hljs-string">&quot;中国大陆&quot;</span>, <span class="hljs-string">&quot;剧情 喜剧&quot;</span>, <span class="hljs-string">&quot;毕志飞&quot;</span>, <span class="hljs-string">&quot;朱一文 李彦漫&quot;</span>);<br><br>        Movie[] movies = &#123;movie1, movie2, movie3&#125;;<br><br>        <span class="hljs-comment">// 该如何将一个类中的数据, 传递给另外一个类</span><br>        <span class="hljs-type">MovieService</span> <span class="hljs-variable">movieService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MovieService</span>(movies);<br>        movieService.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>对象</tag>
      
      <tag>this</tag>
      
      <tag>JavaBean</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6_Swap,数组的使用,实现随机产生验证码的功能</title>
    <link href="/2023/02/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006/"/>
    <url>/2023/02/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006/</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习笔记6"><a href="#Java学习笔记6" class="headerlink" title="Java学习笔记6"></a>Java学习笔记6</h1><p>几个案例实现过程中的知识点记录</p><h3 id="x3D-x3D-符号"><a href="#x3D-x3D-符号" class="headerlink" title="&#x3D;&#x3D;符号"></a>&#x3D;&#x3D;符号</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">== :</span><br><span class="hljs-code">        1. 基本数据类型 : 比较数据值</span><br><span class="hljs-code">        2. 引用数据类型 : 比较地址值</span><br></code></pre></td></tr></table></figure><h3 id="查找索引位置，返回类型为数组"><a href="#查找索引位置，返回类型为数组" class="headerlink" title="查找索引位置，返回类型为数组"></a>查找索引位置，返回类型为数组</h3><p><strong>需求: 设计一个方法, 查找元素在数组中的索引位置 (考虑重复元素问题)</strong><br><em>注意: return只能返回一个结果</em></p><p>问题: 当一个方法运行结束后, 有多个结果需要返回, 怎么处理?<br>回答: 可以将多个结果, 存入一个数组容器, 将数组返回.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] getIndex(<span class="hljs-type">int</span> num, <span class="hljs-type">int</span>[] arr) &#123;<br>    <span class="hljs-comment">// 1. 统计要查找的元素, 在数组中出现的个数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span>(arr[i] == num)&#123;<br>            count++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 2. 根据统计出来的个数, 创建数组容器</span><br>    <span class="hljs-type">int</span>[] results = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[count];<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 3. 查找元素在数组中的索引, 将找到的索引, 存入数组容器</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span>(arr[i] == num)&#123;<br>            <span class="hljs-comment">// results[0] = 0;</span><br>            <span class="hljs-comment">// results[1] = 5;</span><br>            <span class="hljs-comment">// results[2] = 6;</span><br>            results[index] = i;<br>            index++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 4. 将装满了索引的数组, 返回</span><br>    <span class="hljs-keyword">return</span> results;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Swap"><a href="#Swap" class="headerlink" title="Swap"></a>Swap</h3><p>思路: 今后只要涉及到数据交换, 联想到第三方的变量</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">int</span> b = <span class="hljs-number">20</span>;<br><br><span class="hljs-built_in">int</span> c = a;<br>a = b;<br>b = c;<br><br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;a=&quot;</span> + a);   <span class="hljs-comment">// 20</span><br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;b=&quot;</span> + b);   <span class="hljs-comment">// 10 </span><br></code></pre></td></tr></table></figure><p><strong>面试题: 实现两个变量的数据交换, 不允许定义第三方变量</strong></p><p> ^ 异或 :</p><pre><code class="hljs">  特点:          1. 相同为false, 不同为true          2. 一个数字, 被另外一个数字异或两次, 该数本身不变</code></pre><p> 异或操作数值的运算过程 :</p><pre><code class="hljs">    1. 将需要运算的数据, 转换为二进制数据            0000 1010       10            0000 0101       5    2. 将二进制数据的0当做为false, 1当做为true, 运算            0000 1010        ^   0000 0101    --------------------            0000 1111    3. 将运算后的二进制数据, 转换为十进制</code></pre><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>a = a ^ b;  <span class="hljs-comment">// a = 10 ^ 20;</span><br>b = a ^ b;  <span class="hljs-comment">// b = 10 ^ 20 ^ 20;            b = 10</span><br>a = a ^ b;  <span class="hljs-comment">// a = 10 ^ 20 ^ 10;            a = 20</span><br></code></pre></td></tr></table></figure><h5 id="前后倒置的解决方法："><a href="#前后倒置的解决方法：" class="headerlink" title="前后倒置的解决方法："></a>前后倒置的解决方法：</h5><h6 id="解决1：i-和-length-1-i"><a href="#解决1：i-和-length-1-i" class="headerlink" title="解决1：i 和 length-1-i"></a>解决1：i 和 length-1-i</h6><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs prolog">确定好谁跟谁换<br><br>        第一个和倒数第一个 :  arr[<span class="hljs-number">0</span>]  arr[arr.length<span class="hljs-number">-1</span><span class="hljs-number">-0</span>]<br>        第二个和倒数第二个 :  arr[<span class="hljs-number">1</span>]  arr[arr.length<span class="hljs-number">-1</span><span class="hljs-number">-1</span>]<br>        第三个和倒数第三个 :  arr[<span class="hljs-number">2</span>]  arr[arr.length<span class="hljs-number">-1</span><span class="hljs-number">-2</span>]<br>        ...<br><br>        arr[i]  arr[arr.length<span class="hljs-number">-1</span>-i]<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseArray1</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length / <span class="hljs-number">2</span>; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>        arr[i] = arr[arr.length-<span class="hljs-number">1</span>-i];<br>        arr[arr.length-<span class="hljs-number">1</span>-i] = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="解决2：前后指针-start-end"><a href="#解决2：前后指针-start-end" class="headerlink" title="解决2：前后指针 start end"></a>解决2：前后指针 start end</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseArray2</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, end = arr.length - <span class="hljs-number">1</span>; start &lt; end; start++, end--)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[start];<br>        arr[start] = arr[end];<br>        arr[end] = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><em><strong>注：for语句的格式，初始化可以定义多个，不用在for循环上方定义了；最后的循环执行语句也可以多条，即不用写在循环体里了。</strong></em></p><h3 id="随机产生验证码"><a href="#随机产生验证码" class="headerlink" title="随机产生验证码"></a>随机产生验证码</h3><p>从26个英文字母（大小写都包含），以及数字0-9中，随机产生一个5位的字符串验证码并打印在控制台<br>效果：uYq8I，3r4Zj</p><p>随机效果的实现：</p><p><strong>从数组中随机取出一个元素根据数组的长度, 产生一个随机数, 拿着这个随机数, 当做索引去数组中获取元素</strong></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] sArr = &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>&#125;;<br>               <span class="hljs-comment">// 0    1    2    3    4</span><br><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> r.nextInt(sArr.length);           <span class="hljs-comment">//  0  1  2  3  4</span><br>System.out.println(i);<br>System.out.println(sArr[i]);<br></code></pre></td></tr></table></figure><p>字符叠加效果的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>s += <span class="hljs-string">&#x27;a&#x27;</span>;<br>s += <span class="hljs-string">&#x27;b&#x27;</span>;<br>s += <span class="hljs-string">&#x27;c&#x27;</span>;<br>System.out.println(s);<br></code></pre></td></tr></table></figure><p><strong>注：打印字符类型数组名, 不会看到地址值, 而是元素的内容</strong>[char类型的print输出语句就是输出其内容]</p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    <span class="hljs-type">char</span>[] chs = getContents();<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">checkCode</span> <span class="hljs-operator">=</span> getCheckCode(chs);<br><br>    System.out.println(<span class="hljs-string">&quot;产生的验证码为:&quot;</span> + checkCode);<br><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getCheckCode</span><span class="hljs-params">(<span class="hljs-type">char</span>[] chs)</span> &#123;<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">checkCode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">randomIndex</span> <span class="hljs-operator">=</span> r.nextInt(chs.length);<br>        checkCode += chs[randomIndex];<br>    &#125;<br>    <span class="hljs-keyword">return</span> checkCode;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span>[] getContents() &#123;<br>    <span class="hljs-type">char</span>[] chs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">26</span> + <span class="hljs-number">26</span> + <span class="hljs-number">10</span>];<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>; c &lt;= <span class="hljs-string">&#x27;z&#x27;</span>; c++)&#123;<br>        chs[index] = c;<br>        index++;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>; c &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>; c++)&#123;<br>        chs[index] = c;<br>        index++;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span>; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>; c++)&#123;<br>        chs[index] = c;<br>        index++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> chs;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>Random</tag>
      
      <tag>数组</tag>
      
      <tag>Swap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5_数组</title>
    <link href="/2023/02/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005/"/>
    <url>/2023/02/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005/</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习笔记5"><a href="#Java学习笔记5" class="headerlink" title="Java学习笔记5"></a>Java学习笔记5</h1><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><p>数组介绍 : 一种容器, 可以存储同种数据类型的多个值</p><p>数组的使用场景 : 发现手里的数据有多个, 并且这多个数据还属于同一组数据, 就可以考虑使用数组容器进行维护.</p><p>初始化 : 在内存中, 为数组容器开辟空间, 并将数据存入容器的过程.</p><hr><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">数组的定义格式 :<br><br>        <span class="hljs-number">1</span>. 数据类型[] 数组名;<br><br>        <span class="hljs-number">2</span>. 数据类型 数组名<span class="hljs-selector-attr">[]</span>;<br></code></pre></td></tr></table></figure><p>​        注意 : 这种定义格式, 定义出来的, 只是数组类型的变量而已, 内存中还没有创建出数组容器.</p><h3 id="数组的静态初始化格式"><a href="#数组的静态初始化格式" class="headerlink" title="数组的静态初始化格式"></a>数组的静态初始化格式</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 完整格式 :<br><span class="hljs-code">            数据类型[] 数组名 = new 数据类型[]&#123;元素1, 元素2, 元素3...&#125;;</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">2.</span> 简化格式 :<br><span class="hljs-code">           数据类型[] 数组名 = &#123;元素1, 元素2, 元素3...&#125;;</span><br></code></pre></td></tr></table></figure><p>打印输出数组名 :System.out.println(array);<br>       示例输出： [I@776ec8df</p><p>@ : 分割符<br>[ : 当前空间, 是数组类型的<br>I : 当前数组类型, 是int类型<br>776ec8df : 数组的十六进制内存地址</p><h3 id="数组元素访问格式"><a href="#数组元素访问格式" class="headerlink" title="数组元素访问格式"></a>数组元素访问格式</h3><p>​        数组名[索引];</p><p>​        索引 : 数组容器中空间所对应的编号, 编号从0开始, 逐个+1增长</p><h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><p>将数中的每一个(所有)的内容, 取出来进行操作</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">数组名.length : 动态获取到数组的长度 (元素的个数)<br></code></pre></td></tr></table></figure><p><em>IDEA中数组遍历快捷键 : 数组名.fori</em></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">注：double a <span class="hljs-operator">=</span> <span class="hljs-number">5</span>/<span class="hljs-number">2</span>     // a<span class="hljs-operator">=</span><span class="hljs-number">2.0</span>，先计算后赋值<br></code></pre></td></tr></table></figure><h3 id="数组的动态初始化"><a href="#数组的动态初始化" class="headerlink" title="数组的动态初始化"></a>数组的动态初始化</h3><p>在初始化的时候, 只需要指定数组的长度, 系统就会分配默认值(初始值)</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ada">格式: 数据类型[] 数组名 = <span class="hljs-keyword">new</span> 数据类型[长度];<br><br>默认值的分类 :<br><br>        整数 : 0<br>        小数 : 0.0<br>        布尔 : <span class="hljs-type">false</span><br>        <span class="hljs-comment">---------------------------</span><br>        字符 : &#x27;\<span class="hljs-type">u0000</span>&#x27;       <span class="hljs-comment">---&gt; Unicode字符  ---&gt; 常见的体现是空白字符</span><br>        引用数据类型 : <span class="hljs-keyword"><span class="hljs-keyword">null</span></span><br><br>        引用数据类型 : 数组, 类, 接口<br>        String : 类<br></code></pre></td></tr></table></figure><p><em>ctrl + alt + M :IDEA中抽取方法的快捷键</em></p><h3 id="数组两种初始化的区别"><a href="#数组两种初始化的区别" class="headerlink" title="数组两种初始化的区别"></a>数组两种初始化的区别</h3><p><strong>初始化：就是在内存中，为数组容器开辟空间，并将数据存入容器中的过程。</strong></p><p>​    动态初始化: 手动指定长度, 系统分配默认初始化值<br>​    静态初始化: 手动指定元素, 系统会根据元素的个数, 计算出数组的长度</p><p>两种初始化的使用选择 :</p><pre><code class="hljs">1. 静态初始化: 如果要操作的数据, 需求中已经明确给出了, 直接静态初始化                需求: 已知班级学生成绩为 100 100 90 20 100, 找出最高分                int[] arr = &#123;100,100,90,20,100&#125;;1. 动态初始化: 只明确元素个数, 不明确具体数值                需求1: 键盘录入5个学生成绩, 找出最高分                需求2: 产生10个1~100之间的随机数, 找出最小值</code></pre><h3 id="JAVA中内存分配"><a href="#JAVA中内存分配" class="headerlink" title="JAVA中内存分配"></a>JAVA中内存分配</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span>[] <span class="hljs-built_in">array</span>1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-built_in">int</span>[] <span class="hljs-built_in">array</span>2 = <span class="hljs-built_in">array</span>1;<br></code></pre></td></tr></table></figure><p><em>解释：array1将地址复制一份给array2</em></p><p>​            <em>操作array2时array一样变</em></p><p><strong>即：两个数组指向相同内存</strong></p> <img src="/2023/02/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.png" class=""> <p>截取了一个实例：</p> <img src="/2023/02/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005/%E5%AE%9E%E4%BE%8B.png" class=""> <p><strong>简化格式只是简化了代码书写，真正运行期间还是按照完整格式运行的int[] arr &#x3D; new int[]{11,22,33};</strong></p><h3 id="方法的参数传递问题"><a href="#方法的参数传递问题" class="headerlink" title="方法的参数传递问题 :"></a>方法的参数传递问题 :</h3><pre><code class="hljs">   1. 基本数据类型: 传递的是数据值   2. 引用数据类型: 传递的是地址值</code></pre><p>​    <em><em>问题: Java到底是值传递, 还是址传递?</em><br>​    答: 值传递, 地址值也是值</em></p><h3 id="数组使用常见问题"><a href="#数组使用常见问题" class="headerlink" title="数组使用常见问题"></a>数组使用常见问题</h3><h4 id="索引越界异常"><a href="#索引越界异常" class="headerlink" title="索引越界异常"></a>索引越界异常</h4><p>ArrayIndexOutOfBoundsException 当访问了数组中不存在的索引，就会引发索引越界异常</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= arr.<span class="hljs-built_in">length</span>; i++)&#123;<br>    System.<span class="hljs-keyword">out</span>.println(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="空指针异常"><a href="#空指针异常" class="headerlink" title="空指针异常"></a>空指针异常</h4><p>当引用数据类型变量被赋值为 null 之后，地址的指向被切断，还继续访问堆内存数据，就会引发空指针异常</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-attribute">arr</span> = null;<br><span class="hljs-attribute">System</span>.out.println(arr[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>二维数组是一种容器，该容器用于存储一维数组</p><p>总结: 二维数组在存储一维数组的时候, 具体存储的是一维数组的地址值</p><h3 id="二维数组的元素访问格式"><a href="#二维数组的元素访问格式" class="headerlink" title="二维数组的元素访问格式"></a>二维数组的元素访问格式</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">数组名[m索引][n索引] :<br><br> <span class="hljs-type">m</span>索引 : 指定访问哪一个一维数组<br> n索引 : 访问一维数组中的哪一个元素<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">打印输出二维数组名和各一维数组名<br>System.<span class="hljs-keyword">out</span>.println(arr);        <span class="hljs-comment">// [[I@776ec8df</span><br><br>System.<span class="hljs-keyword">out</span>.println(arr[<span class="hljs-number">0</span>]);     <span class="hljs-comment">// [I@4eec7777</span><br>System.<span class="hljs-keyword">out</span>.println(arr[<span class="hljs-number">1</span>]);     <span class="hljs-comment">// [I@3b07d329</span><br></code></pre></td></tr></table></figure><h3 id="静态初始化格式"><a href="#静态初始化格式" class="headerlink" title="静态初始化格式"></a>静态初始化格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">完整格式：数据类型[][] 数组名 = <span class="hljs-keyword">new</span> 数据类型[][] &#123;&#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>&#125;,&#123;元素<span class="hljs-number">1</span>, 元素<span class="hljs-number">2</span>&#125;&#125;;<br><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>&#125;,&#123;<span class="hljs-number">33</span>,<span class="hljs-number">44</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">简化格式：数据类型[][] 数组名 = &#123;&#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>&#125;, &#123;元素<span class="hljs-number">1</span>, 元素<span class="hljs-number">2</span>&#125;&#125;;<br><span class="hljs-type">int</span>[][] arr = &#123;&#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>&#125;,&#123;<span class="hljs-number">33</span>,<span class="hljs-number">44</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><h3 id="动态初始化格式"><a href="#动态初始化格式" class="headerlink" title="动态初始化格式"></a>动态初始化格式</h3><p>格式：数据类型[][] 数组名 &#x3D; new 数据类型[m][n];<br>m表示这个二维数组，可以存放多少个一维数组<br>n表示每一个一维数组，可以存放多少个元素</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">int<span class="hljs-comment">[]</span><span class="hljs-comment">[]</span> arr = new int<span class="hljs-comment">[2]</span><span class="hljs-comment">[3]</span>;<br></code></pre></td></tr></table></figure><h3 id="内存存储"><a href="#内存存储" class="headerlink" title="内存存储"></a>内存存储</h3> <img src="/2023/02/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98.png" class=""> <p>解释：栈内存中首先存放main()，然后运行</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">int<span class="hljs-comment">[]</span><span class="hljs-comment">[]</span> arr = new int<span class="hljs-comment">[2]</span><span class="hljs-comment">[3]</span>;<br></code></pre></td></tr></table></figure><p>分配内存地址0x0011,存放length，一维数组0,1的地址（创建二维数组时自动生成0x0022和0x0033两个堆内存地址）；</p><p>运行代码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span>[] arr1 = &#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>&#125;;<br><span class="hljs-attribute">int</span>[] arr2 = &#123;<span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>&#125;;<br></code></pre></td></tr></table></figure><p>堆内存中生成0x00AA和0x00BB地址存放数据</p><p>最后赋值代码，将arr1和arr2的地址0x00AA和0x00BB赋给二维数组在堆中存放的一维数组地址</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4_switch,跳转控制语句,Random,猜数字游戏</title>
    <link href="/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004/"/>
    <url>/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004/</url>
    
    <content type="html"><![CDATA[<h2 id="Java学习笔记4"><a href="#Java学习笔记4" class="headerlink" title="Java学习笔记4"></a>Java学习笔记4</h2><h3 id="switch语句注意事项"><a href="#switch语句注意事项" class="headerlink" title="switch语句注意事项 :"></a>switch语句注意事项 :</h3><ol><li><p>case 后面的值不允许重复</p></li><li><p>case 后面的值, 只能是字面量, 不能是变量</p></li><li><p>switch () 中可以接收的类型</p><p>1). 基本数据类型: byte short char int<br>2). 引用数据类型: <u>jdk5版本开始可以是枚举, jdk7版本开始可以是String字符串</u></p></li></ol><h4 id="if-amp-switch"><a href="#if-amp-switch" class="headerlink" title="if&amp;switch"></a>if&amp;switch</h4><ul><li><strong>if语句：使用与范围性的判断</strong></li><li><strong>switch语句：适用于固定值的匹配</strong></li></ul><h3 id="switch语句的case穿透现象"><a href="#switch语句的case穿透现象" class="headerlink" title="switch语句的case穿透现象"></a>switch语句的case穿透现象</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">    需求: 键盘录入一个数值, <span class="hljs-number">1</span>~<span class="hljs-number">5</span> : 输出工作日  6~7 : 输出休息日<br><br>​    现象: 多个<span class="hljs-keyword">case</span>中存在了重复的代码, 考虑使用<span class="hljs-keyword">case</span>穿透来优化代码<br></code></pre></td></tr></table></figure><p>   jdk14版本开始, case后面允许编写多个数据, 多个数据中间使用逗号分隔</p><p>最简洁：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">switch(week)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> -&gt; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;工作日&quot;);<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>, <span class="hljs-number">7</span> -&gt; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;休息日&quot;);<br>    <span class="hljs-keyword">default</span> -&gt; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;您的输入有误&quot;);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>四种书写格式：</strong></p><p>1.正常switch格式  2.使用case穿透  3.jdk14之后的简化格式  4.LAMBDA表达式</p> <img src="/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004/case%E7%A9%BF%E9%80%8F%E7%8E%B0%E8%B1%A1.png" class=""> <h3 id="Contiune和Break-跳转控制语句"><a href="#Contiune和Break-跳转控制语句" class="headerlink" title="Contiune和Break 跳转控制语句"></a>Contiune和Break 跳转控制语句</h3><p>break   :  终止循环体内容的执行，也就是说结束当前的整个循环<br>continue:  跳过某次循环体内容的执行，继续下一次的执行</p><p><strong>break : 只能在循环, 和 switch 当中进行使用</strong><br><strong>continue : 只能在循环中进行使用</strong></p><h3 id="判断语句执行流程"><a href="#判断语句执行流程" class="headerlink" title="判断语句执行流程"></a>判断语句执行流程</h3><h5 id="if"><a href="#if" class="headerlink" title="if"></a>if</h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">if</span> (判断条件<span class="hljs-number">1</span>) &#123;<br>    语句体<span class="hljs-number">1</span>;<br>&#125; <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(判断条件<span class="hljs-number">2</span>)</span> </span>&#123;<br>    语句体<span class="hljs-number">2</span>;<br>&#125; <br>...<br><span class="hljs-keyword">else</span> &#123;<br>    语句体n+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.首先计算判断条件1的值<br>2.如果值为true就执行语句体1；如果值为false就计算判断条件2的值<br>3.如果值为true就执行语句体2；如果值为false就计算判断条件3的值<br>4….<br>5.如果没有任何判断条件为true，就执行语句体n+1。</p><h5 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">switch</span>(表达式) &#123;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">1</span>：<br>语句体<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">2</span>：<br>语句体<span class="hljs-number">2</span>;<br><span class="hljs-keyword">break</span>;<br>    …<br>    <span class="hljs-keyword">default</span>：<br>语句体n+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.拿着表达式的值，依次和case后面的值进行匹配，匹配成功，就会执行对应的语句，在执行的过程中，遇到break就会结束。<br>2.如果所有的case都不匹配，就会执行default里面的语句体，然后程序结束掉。</p><h3 id="循环语句执行流程"><a href="#循环语句执行流程" class="headerlink" title="循环语句执行流程"></a>循环语句执行流程</h3><h5 id="for循环语句格式"><a href="#for循环语句格式" class="headerlink" title="for循环语句格式 :"></a>for循环语句格式 :</h5><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">for(初始化语句<span class="hljs-comment">; 判断条件; 条件控制语句)&#123;</span><br>    循环体语句<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>执行流程:<br>            1. 执行初始化语句, 在整个循环过程中, 只执行一次<br>            2. 执行判断条件, 看其返回结果是true, false<br>                    false : 循环结束<br>                    true : 执行第三步<br>            3. 执行循环体语句<br>            4. 执行条件控制语句<br>            5. 回到2继续…</p><h5 id="while循环格式"><a href="#while循环格式" class="headerlink" title="while循环格式:"></a>while循环格式:</h5><pre><code class="hljs">    初始化语句;    while(判断条件)&#123;        循环体语句;        条件控制语句;    &#125;</code></pre><p>执行流程:<br>    1. 执行初始化语句<br>    2. 执行判断条件, 看其返回结果是true, false<br>            false : 循环结束<br>            true : 进入第三步<br>    3. 执行循环体语句<br>    4. 执行条件控制语句<br>    5. 回到2继续</p><h5 id="do…while循环格式"><a href="#do…while循环格式" class="headerlink" title="do…while循环格式 :"></a>do…while循环格式 :</h5><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">初始化语句<span class="hljs-comment">;</span><br>do &#123;<br>    循环体语句<span class="hljs-comment">;</span><br>    条件控制语句<span class="hljs-comment">;</span><br>&#125;while(判断条件)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>执行流程:</p><ol><li>执行初始化语句</li><li>执行循环体语句</li><li>执行条件控制语句</li><li>执行判断条件, 看其返回结果是true, false<br> false : 循环结束<br> true : 回到第二步继续</li></ol><h3 id="循环标号"><a href="#循环标号" class="headerlink" title="循环标号"></a>循环标号</h3><p>给循环起名字（标号），这样就可以break这个循环，而不是循环体中的某一层。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mel">flag:  <span class="hljs-comment">// 标号 : 给循环起名字</span><br><span class="hljs-keyword">while</span> (true) &#123;<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">choice</span> = sc.nextInt();<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">choice</span>) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">break</span> flag;   <span class="hljs-comment">//结束这个无限循环</span><br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h3><h5 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> r.nextInt(    );<br></code></pre></td></tr></table></figure><h5 id="使用实例：产生20-80之间的随机数"><a href="#使用实例：产生20-80之间的随机数" class="headerlink" title="使用实例：产生20~80之间的随机数"></a>使用实例：产生20~80之间的随机数</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> num = r.nextInt(<span class="hljs-number">61</span>) + <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><h3 id="猜数字小游戏"><a href="#猜数字小游戏" class="headerlink" title="猜数字小游戏"></a>猜数字小游戏</h3><p>1.使用Random产生一个 20~100 之间的随机数  —&gt; randomNumber</p><p>2.使用Scanner从键盘录入用户猜的数据 —&gt; scNumber</p><p>3.比对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        guessNumber();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">guessNumber</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-comment">// 1. 使用Random产生一个 20~100 之间的随机数  ---&gt; randomNumber</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">randomNumber</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">100</span>) + <span class="hljs-number">20</span>;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 2. 使用Scanner从键盘录入用户猜的数据 ---&gt; scNumber</span><br>            System.out.println(<span class="hljs-string">&quot;请输入:&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">scNumber</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>            <span class="hljs-comment">// 3. 比对</span><br>            <span class="hljs-keyword">if</span> (scNumber &gt; randomNumber) &#123;<br>                System.out.println(<span class="hljs-string">&quot;猜大了&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (scNumber &lt; randomNumber) &#123;<br>                System.out.println(<span class="hljs-string">&quot;猜小了&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;猜对了!&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;恭喜!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IDEA使用的一个技巧"><a href="#IDEA使用的一个技巧" class="headerlink" title="IDEA使用的一个技巧"></a>IDEA使用的一个技巧</h3><div class="note note-success">            <p>生成方法返回值快捷键:<br>      1.  方法名().var + 回车<br>            2.  ctrl + alt + V</p>          </div>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>switch</tag>
      
      <tag>跳转控制语句</tag>
      
      <tag>Random</tag>
      
      <tag>猜数字游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3_运算符,方法</title>
    <link href="/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003/"/>
    <url>/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003/</url>
    
    <content type="html"><![CDATA[<h2 id="Java学习笔记3"><a href="#Java学习笔记3" class="headerlink" title="Java学习笔记3"></a>Java学习笔记3</h2><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">short s = <span class="hljs-number">1</span>;<br><br>s+ = <span class="hljs-number">1</span>;                   <span class="hljs-regexp">//</span> 正确<br>s = s + <span class="hljs-number">1</span>；               <span class="hljs-regexp">//</span> 编译失败<br></code></pre></td></tr></table></figure><p><strong>原因：扩展的赋值运算符隐含了强制类型转换</strong></p><p><em>再来看一个实例：</em></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">double</span> a = <span class="hljs-number">12.3</span> ;<br><br><span class="hljs-built_in">int</span> b = <span class="hljs-number">10</span> ;<br><br>b+ = a ;<br><br>System.<span class="hljs-keyword">out</span>.println(b)；    <span class="hljs-comment">// 22</span><br></code></pre></td></tr></table></figure><h4 id="短路逻辑运算符-amp-amp-和"><a href="#短路逻辑运算符-amp-amp-和" class="headerlink" title="短路逻辑运算符 &amp;&amp;和||"></a>短路逻辑运算符 &amp;&amp;和||</h4><ul><li><p>逻辑与 &amp;，无论左边 true false，右边都要执行。</p><p>​    短路与 &amp;&amp;，如果左边为 true，右边执行；如果左边为 false，右边不执行。</p></li><li><p>逻辑或 |，无论左边 true false，右边都要执行。</p><p>​    短路或 ||，如果左边为 false，右边执行；如果左边为 true，右边不执行。</p></li></ul><p>一般使用&amp;&amp;，||，提高运算效率（如果前面判断结束，后面就不执行）</p><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4> <img src="/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.png" class=""> <h4 id="方法调用与内存的关系"><a href="#方法调用与内存的关系" class="headerlink" title="方法调用与内存的关系"></a>方法调用与内存的关系</h4><p>方法没有被调用的时候，在方法区中的字节码文件中存放<br>方法被调用的时候，需要进入到栈内存中运行</p> <img src="/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003/%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8.png" class=""> <h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><ul><li>在同一个类中，定义了多个同名的方法，但每个方法具有不同的参数类型或参数个数，这些同名的方法，就构成了重载关系</li><li>简单记：同一个类中，方法名相同，参数不同的方法<br>参数不同：个数不同、类型不同、<strong>顺序不同</strong></li><li><em>注意：识别方法之间是否是重载关系，只看方法名和参数，跟返回值无关。</em></li></ul>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>运算符</tag>
      
      <tag>方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2_标识符,基本数据类型,Scanner,类型转换,二进制原码</title>
    <link href="/2023/02/01/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/"/>
    <url>/2023/02/01/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习笔记2"><a href="#Java学习笔记2" class="headerlink" title="Java学习笔记2"></a>Java学习笔记2</h1><p><em>南山的风吹散了谷堆,北海的水淹没了墓碑.</em><br><em>不是每个人，在蓦然茴首时，都可以看得到灯火阑珊处的那个人</em></p><hr><h3 id="Debug-工具"><a href="#Debug-工具" class="headerlink" title="Debug 工具"></a>Debug 工具</h3><p>Debug调试，又被称为断点调试，断点其实是一个标记，告诉Debug从标记的地方开始查看；</p><p>可以运行两个断点之间的代码</p><h3 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h3><ul><li>由数字、字母、下划线(_)和美元符($)组成</li><li>不能以数字开头</li><li>不能是关键字</li><li>区分大小写</li></ul><h3 id="标识符命名规范"><a href="#标识符命名规范" class="headerlink" title="标识符命名规范"></a>标识符命名规范</h3><p><strong>小驼峰命名法：变量</strong></p><p>规范1：标识符是一个单词的时候，所有字母小写    name</p><p>规范2：标识符由多个单词组成的时候，从第二个单词开始，首字母大写      firstName</p><p><strong>大驼峰命名法：类</strong></p><p>规范1：标识符是一个单词的时候，首字母大写    Student</p><p>规范2：标识符由多个单词组成的时候，每个单词的首字母大写        GoodStudent</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>整数默认是int                   当long时数据尾部加L</p><p>浮点数默认是double        当float时数据尾部加F</p><p>byte型数据取值范围-128~127</p><h4 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h4><p>输入字符串是scanner.next()</p><p>整数浮点数是scanner.nextInt;scanner.nextDouble；</p><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>当   +   操作中，遇到了字符串，这时 + 就是字符串连接符，而不是算术运算。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">System</span>.out.println(<span class="hljs-string">&quot;1+1=&quot;</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>输出：1+1&#x3D;11</p><p>原因：逐个分析数据，先+1，然后整体再+1；就是”1+1&#x3D;1“+1，结果1+1&#x3D;11</p><h3 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h3><p>只操作变量。（常量不行）</p><ul><li>如果放在变量的后边，在变量的后面，先拿变量的值进行运算，再对变量的值进行+1、-1 </li><li>如果放在变量的前边，先对变量进行+1、-1，再拿变量的值进行运算。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">int</span> a = <span class="hljs-number">3</span>;<br><span class="hljs-built_in">int</span> b = (++a) + (a++) + (a*<span class="hljs-number">10</span>);<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;a=&quot;</span> + a);       <span class="hljs-comment">//a=5</span><br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;b=&quot;</span> + b);       <span class="hljs-comment">//b=58</span><br></code></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h5 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h5><p>介绍: 将取值范围小的数据或变量, 给取值范围大的变量赋值, 可以直接赋值<br>         取值范围从小到大</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">byte</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">short</span>（char） -&gt;</span> <span class="hljs-function"><span class="hljs-title">int</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">long</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">float</span> -&gt;</span> double<br></code></pre></td></tr></table></figure><p><em>问题: float占用4个字节, 为什么放在了</em>long(8个字节)的后面*<br><em>解释: 虽然float占用4个字节, 但是 [取值范围] 要比8个字节的long 更大</em><br>                        - <strong>小数的二进制存储形式, 更加节省内存</strong>*</p><p>基本的隐式转换：<br>把一个取值范围小的数值或者变量，赋值给另一个取值范围大的变量</p><p>运算中的隐式转换：<br>取值范围小的数据，和取值范围大的数据进行运算，小的会先提升为大的之后，再进行运算<br>byte short char 三种数据在运算的时候，都会提升为int，然后再进行运算</p><h5 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h5><p>介绍 : 将取值范围大的数据或变量, 给取值范围小的变量赋值, 不允许直接赋值, 需要加入强转</p><p><em>注意 : 强制转换 <strong>[有可能]</strong> 会出现精度损失</em></p><h6 id="强转中的精度损失"><a href="#强转中的精度损失" class="headerlink" title="强转中的精度损失"></a>强转中的精度损失</h6><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int a <span class="hljs-operator">=</span> <span class="hljs-number">130</span><span class="hljs-comment">;</span><br>byte b<span class="hljs-operator">=</span> (byte) a<span class="hljs-comment">;</span><br>System.out.println(b)<span class="hljs-comment">;     //-126</span><br></code></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>1.整数130 ：默认为int，int占用4个字节，也就是4组8个二进制位</p><p>00000000 00000000 00000000 10000010‬</p><p>2.强转到byte：4个字节，强制转换为1个字节，就是砍掉前3组8位</p><p>10000010‬</p><p>3.根据运算后的补码，反向推原码</p><p>11111110    即-126</p><h3 id="计算机中进制的分类∶"><a href="#计算机中进制的分类∶" class="headerlink" title="计算机中进制的分类∶"></a>计算机中进制的分类∶</h3><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">计算机中进制的分类 </span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br>        <span class="hljs-attribute">十进制</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">默认</span><br>        <span class="hljs-attribute">二进制</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">0b开头</span><br>        <span class="hljs-attribute">八进制</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">0开头</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">编写数值, 尽量不要以0开头&#123;09就是错误的&#125;</span><br>        <span class="hljs-attribute">十六进制</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">0x开头</span><br></code></pre></td></tr></table></figure><h3 id="类型转换两种实例："><a href="#类型转换两种实例：" class="headerlink" title="类型转换两种实例："></a>类型转换两种实例：</h3><p><em>类型转换面试题 : 下列代码是否存在错误, 如果有, 请指出说明, 并改正</em></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">byte </span><span class="hljs-keyword">b1 </span>= <span class="hljs-number">3</span>;<br><span class="hljs-keyword">byte </span><span class="hljs-keyword">b2 </span>= <span class="hljs-number">4</span>;<br><span class="hljs-keyword">byte </span><span class="hljs-keyword">b3 </span>= <span class="hljs-keyword">b1 </span>+ <span class="hljs-keyword">b2;</span><br></code></pre></td></tr></table></figure><p>错误原因:<br>                b1和b2是两个byte类型, 在运算的时候, 会提升为int类型<br>                提升之后, 就是两个int在运算了, 运算的结果还是int.<br>                将int类型的结果, 赋值给byte类型的变量, 属于大给小, 不能直接给.</p><p>修改后：    </p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">byte </span><span class="hljs-keyword">b1 </span>= <span class="hljs-number">3</span>;<br>   <span class="hljs-keyword">byte </span><span class="hljs-keyword">b2 </span>= <span class="hljs-number">4</span>;<br>   <span class="hljs-keyword">byte </span><span class="hljs-keyword">b3 </span>= (<span class="hljs-keyword">byte)(b1 </span>+ <span class="hljs-keyword">b2);</span><br></code></pre></td></tr></table></figure><p><em>下面代码是否能编译通过：</em></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">byte</span> b = <span class="hljs-number">3</span> + <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><p><strong>可以解释：Java存在常量优化机制 : 在编译的时候 (javac) 就会将3和4这两个字面量进行运算.</strong><br><strong>产生的字节码文件 :  byte b &#x3D; 7;</strong></p><h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><p>可以将编译好的.class文件拖到IDEA中（或者直接jdk工具），查看编译后的文件变化。</p><p>如上述：byte b &#x3D; 3+4 ；</p><p>反编译后 ：byte b &#x3D; 7；</p><h3 id="反码-原码-补码"><a href="#反码-原码-补码" class="headerlink" title="反码 原码 补码"></a>反码 原码 补码</h3><p>计组中的知识点，简单汇总</p><p><strong>原码</strong><br>数据的二进制体现形式，一个字节由 8 个二进制位组成<br>高位：二进制数据中，最左侧的数据，通过高位代表符号位<br>    0 代表正数<br>    1 代表负数<br>    其余位，表示数值大小<br>弊端：遇到负数运算，可能会出现错误</p><p><strong>反码</strong><br>正数的反码与其原码相同<br>负数的反码是对其原码逐位取反，但符号位除外</p><p><strong>补码</strong><br>正数的补码与其原码相同<br>负数的补码是在其反码的末位加1</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE，标识符</tag>
      
      <tag>基本数据类型</tag>
      
      <tag>Scanner</tag>
      
      <tag>类型转换</tag>
      
      <tag>二进制原码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1_JAVA配置知识</title>
    <link href="/2023/02/01/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/"/>
    <url>/2023/02/01/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</url>
    
    <content type="html"><![CDATA[<h2 id="Java学习笔记1"><a href="#Java学习笔记1" class="headerlink" title="Java学习笔记1"></a>Java学习笔记1</h2><h4 id="人机交互方式"><a href="#人机交互方式" class="headerlink" title="人机交互方式"></a>人机交互方式</h4><ul><li>图形化界面</li><li>命令行</li></ul><p><strong>图形化界面消耗内存，运行速度慢。</strong></p><h4 id="Path环境变量"><a href="#Path环境变量" class="headerlink" title="Path环境变量"></a>Path环境变量</h4><p>系统中的一个大管家, 帮我们记录了很多软件的完整路径<br>当我们要运行一个程序，而没有告诉它程序所在的完整路径时<br>系统除了在当前目录下面寻找此程序外，还会到path中指定的路径去找</p><p><em>注：在之前的Java以及各种软件的环境变量配置中，配置Path路径的次数很多，但是为什么要配置，是这次学习中了解到的，简单理解来说就是可以在任何情况下使用软件，正常来说jdk安装完后要在该目录下运行java.exe,javac.exe才能编译运行代码，所以要将编写好的.java文件放在这里才可。但当把需要的java.exe等配置在Path目录时，就可以在别的文件目录中直接运行了。</em></p><h6 id=""><a href="#" class="headerlink" title=""></a></h6><h4 id="Java-SE-Java-ME-Java-EE"><a href="#Java-SE-Java-ME-Java-EE" class="headerlink" title="Java SE     Java ME     Java EE"></a>Java SE     Java ME     Java EE</h4><ul><li>Java SE : Java 语言的（标准版），用于桌面应用的开发，是其他两个版本的基础。</li></ul><p><em>桌面应用 ：用户只要打开程序，程序的界面会让用户在最短的时间内找到他们需要的功能，同时主动带领用户完成他们的工作并得到最好的体验。</em></p><ul><li>Java ME : Java 语言的（小型版），用于嵌入式消费类电子设备     [现在基本不用]</li><li>Java EE : Java 语言的（企业版），用于 Web 方向的网站开发。</li></ul><h4 id="JVM、JRE、JDK"><a href="#JVM、JRE、JDK" class="headerlink" title="JVM、JRE、JDK"></a>JVM、JRE、JDK</h4><ul><li>JVM（Java Virtual Machine）：Java虚拟机, 真正运行Java程序的地方</li><li>核心类库：Java自己写好的程序，给程序员自己的程序调用的</li><li>JRE（Java Runtime Environment）: Java的运行环境</li><li>JDK（Java Development Kit）: Java开发工具包（包括上面所有）</li></ul><p>JRE包括JVM和核心类库   JDK包括JRE和开发工具(Java,Javac……)</p><h4 id="Java-跨平台性"><a href="#Java-跨平台性" class="headerlink" title="Java 跨平台性"></a>Java 跨平台性</h4><p><strong>Java 程序可以在任意操作系统上运行</strong></p><p>在需要运行 Java 应用程序的操作系统上，安装一个与操作系统对应的Java虚拟机(JVM Java Virtual Machine)即可。</p><p><em>注：JVM 虚拟机本身不允许跨平台，允许跨平台的是 Java 程序</em></p><h4 id="一些JAVA基础知识"><a href="#一些JAVA基础知识" class="headerlink" title="一些JAVA基础知识"></a>一些JAVA基础知识</h4><p>JAVA_HOME使用原因：其他软件配合使用，所以名称不能变</p><p><em>注：如果电脑重启后环境变量失效的解决方案</em><br><em>1.重新打开path环境变量，无需做任何改动，点击确定</em><br><em>2.不使用JAVA_HOME将bin目录的完整路径配置到path中</em></p><p>JDK 11开始支持java直接运行源代码文件，但是最好不要用，因为打包等情况时必须要.class文件，不编译成class文件无法使用</p><p>对于public的暂时理解:限制类名称和文件名需要保持一致</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客说明</title>
    <link href="/2023/01/30/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/"/>
    <url>/2023/01/30/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h2 id="本站文章内容说明"><a href="#本站文章内容说明" class="headerlink" title="本站文章内容说明"></a>本站文章内容说明</h2><h3 id="内容概要"><a href="#内容概要" class="headerlink" title="内容概要"></a>内容概要</h3><p>本博客主要记录作者的学习笔记，平时会遇到的一些问题总结，欢迎阅读者在评论中讨论，看到会回复。</p><p><em><strong>注：采用无后端的valine评论系统，如需删除评论可追加评论告知</strong></em></p><h3 id="后续内容再补充"><a href="#后续内容再补充" class="headerlink" title="后续内容再补充"></a>后续内容再补充</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>你好</title>
    <link href="/2023/01/30/%E4%BD%A0%E5%A5%BD/"/>
    <url>/2023/01/30/%E4%BD%A0%E5%A5%BD/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p> <img src="/2023/01/30/%E4%BD%A0%E5%A5%BD/test.png" class="" title="图片引用方法一"> ]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/30/hello-world/"/>
    <url>/2023/01/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
