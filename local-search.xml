<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Honey Elder老年人身心健康综合服务平台</title>
    <link href="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/"/>
    <url>/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1. 需求分析"></a>1. 需求分析</h1><h2 id="1-1开发背景"><a href="#1-1开发背景" class="headerlink" title="1.1开发背景"></a>1.1开发背景</h2><p>根据第五次人口普查数据显示，我国 60 岁以上的老年人占总人口的 10.45%，达到了联合国对老龄化社会的界定标准，标志着我国正式成为老龄化国家。我国拥有世界上最大的老年人群体，同时也是世界上老龄化最严重的国家之一，老龄化将对经济和社会的可持续发展产生巨大的影响。截止 2019 年末，我国 60 岁以上人口为 25388 万人，占总人口 18.1%，其中,65 岁及以上人口为 17603 万人，占总人口 12.6%，老龄化程度进一步加深。预计到 2050 年，我国 65 岁及以上老年人口比例将会达到 26%，其中 80 岁及以上的老年占比将达到 8%，老龄化程度将会达到前所未有的程度。</p><p>对老年人身心健康问题的担忧，促使我们开始了对老年人身心健康综合服务平台的设计。本平台以提供老年社交服务为主，进行慢性疾病防治为辅，关爱老年人的身心健康，为老年人提供社会支持，缓解老年人的心理孤独感，立足于中医药知识，面向老年群体慢性疾病进行预防为主，防治结合的中医疗养，从而助力国家人口老龄化事业的发展。以新时代，新观念，新模式，新载体为老年群体提供一个温馨阳光，积极向上，参与度高，快速便捷的线上服务平台。平台通过独特的算法模型，将此模型应用于用户的慢病数据上，通过数据的分析得出影响用户身体健康最主要的因素，并预测健康未来的发展方向，再通过智能化的推送，使用户主动意识到防治慢病的重要性并做出相应的预防措施。在专业优势下和学校本身中医药环境的引导下，结合当下慢病防控的严峻形势和需求，来进行创新型平台的研究与开发。</p><h2 id="1-2市场分析"><a href="#1-2市场分析" class="headerlink" title="1.2市场分析"></a>1.2市场分析</h2><h3 id="1-2-1目标用户"><a href="#1-2-1目标用户" class="headerlink" title="1.2.1目标用户"></a>1.2.1目标用户</h3><p>缺失认同感、患有慢性疾病、对中医养生方面感兴趣的中老年群体</p><h3 id="1-2-2竞品分析"><a href="#1-2-2竞品分析" class="headerlink" title="1.2.2竞品分析"></a>1.2.2竞品分析</h3><p>目前市场主流养老服务平台，多聚焦于医疗服务及居家服务，而忽视了健康老人的精神文化养老。</p><p>例如“爱家养老”是一款预约居家养老服务、孝敬和关爱老人的手机APP，以“帮父母养老、助子女行孝”为目标，为忙碌或“偷懒”的子女们，为渐渐年迈的父母们，提供居家养老生活、健康、安全、关爱等服务。其主要由助餐、助洁、助医三大板块组成，辅以远程照护和老年教育等功能。</p><p>再如亲情圈APP是一款智慧居家养老应用。主打实现以老年人生活服务、购物、订餐、医护服务为主的商城服务，实现自助购物下单、家政服务预约下单、医护服务预约下单和亲情圈代下单。手机APP与物联网健康体检设备连接进行健康检测，数据解读，健康数据实时展示、消息推送等医护服务。与智能家居设备对接，实现老人状态监控、实时定位、居家安全监护等功能。如下所示为功能对比表</p><p>由此可见，市面现行养老软件对于健康老人的精神文化养老较少涉及。</p> <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image002.gif" class=""> <p>​表1 功能对比表</p><h2 id="1-3作品简介"><a href="#1-3作品简介" class="headerlink" title="1.3作品简介"></a>1.3作品简介</h2><h3 id="1-3-1主要功能"><a href="#1-3-1主要功能" class="headerlink" title="1.3.1主要功能"></a>1.3.1主要功能</h3><p>(1) 登录注册系统</p><p>(2) 多元化课程数据提供</p><p>(3) 提供老年社交服务</p><p>(4) 在线购买相关产品</p><p>(5) 智能打卡任务、打卡信息推送</p><p>(6) 中医养生药膳推荐</p><p>(7) 个人信息设置</p><h3 id="1-3-2优势及创新点"><a href="#1-3-2优势及创新点" class="headerlink" title="1.3.2优势及创新点"></a>1.3.2优势及创新点</h3><p>（1）本项目突破从单一的社会学或信息学领域进行研究的思维定式，融合管理学、卫生学与信息学等多学科的相关理论，不仅关注老年人的身体健康，预防老年人慢性疾病的发生，更提出关爱老年人心理健康的医养提议，还将构建老年慢性病管理系统与决策支持平台，在研究范式具有一定的创新性。</p><p>（2）借鉴发达国家的经验做法，剖析老年人对养老服务的差异性需求，研究如何构建一个既符合现实国情，又能满足老年人养老需求的健康新型管理模式，为新社会形态下所面临的严峻老年人医养问题，提供了新的理论视角和分析框架。</p><p>（3）项目采用机器学习方法，使用协同过滤、神经网络等算法，基于用户个人信息以及日常软件使用倾向对老年群体进行个性化推荐，并针对老年高血压、糖尿病、高血脂等慢性疾病进行分析，为患者提供自我保健方法，在研究方法上具有创新性。</p><p>（4）学校在中医方面深厚的知识与经验的积累，为平台提供强大的理论基础。</p><h1 id="2-概要设计"><a href="#2-概要设计" class="headerlink" title="2. 概要设计"></a>2. 概要设计</h1><h2 id="2-1数据流图"><a href="#2-1数据流图" class="headerlink" title="2.1数据流图"></a>2.1数据流图</h2> <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image004.jpg" class=""> <p>​图1 数据流图</p><h2 id="2-2总体设计"><a href="#2-2总体设计" class="headerlink" title="2.2总体设计"></a>2.2总体设计</h2><p>项目系统架构分为：可视界面层，业务机制层，数据支撑层</p><p> <strong>可视界面层：</strong>采用android端 UI交互，分为四个主要板块：银发学院，老年社区，银发商城，心情天地，共同构成了andriod端的主要UI，为老年人提供了抒发心情，分享爱好，学习交友的综合性服务平台。实现面向用户的多种功能，为用户提供银发学院、老年社区、银发商场、心情天地四个功能板块，监听和响应用户的请求，将用户需求和所需数据传递到业务机制层，同时接收从业务机制层向上表现的数据及内容，经一定渲染后展示给用户。</p><p><strong>业务机制层：</strong>主要以监控机制和推送机制为主。监控机制，是整个平台能够不断得以进步，不断改善自身的利器。同时，它的存在也保障着整个平台的环境能够稳定运行，让管理者能够更容易发现用户中，那些正待帮助的老年人，并提供恰到好处的帮助。推送机制，是整个平台的用户间学习新东西，交到新朋友的源泉，它的存在，让用户能看到自己想看的，让用户对平台产生青睐感，使用户的平台黏性更高，平台发展能够更加长远。是老年人身心健康app的核心层面，作为处于应用层和数据层之间的模块，不仅需对上层传输下来的数据及操作进行符合用户期望的相应操作，并将动作结果重新返回展示给用户层，也需接收从数据层向上传递的老人活动数据、银发商场数据、学院课程数据等有关数据，并将其存储进相应数据库，为之后个性化推荐等功能提供所需数据基础。该层包括用户功能业务与后台应用业务，前者包括老年人个性化分析、课程学院、聊天小圈、银发商品等模块，详尽的实现了用户的所有功能需求；后者负责处理后台应用程序，将用户个性化信息进行相应的数据分析，得出用户适合的业务推荐并向下层记录，同时向上层反馈，经一定渲染后展示给用户。</p><p> <strong>数据支撑层：</strong>是业务机制层的支柱，它收集用户在平台上活动的各类数据以及用户反馈的数据，运用协同过滤算法得出的结果最终反馈在业务机制层中。为业务层提供稳定可靠的数据访问接口，同时负责app中数据的增加、删除、修改、查询和持久性存储等功能。</p><p>使用应用层、业务层、数据层的系统架构，层次清晰，结构分明，有利于系统的开发，方便成员分工协作，若某一层次出现错误，只需对出问题的层面进行修改，不影响其他层次正常运行工作，为后台维护提供了极大的便捷，保证了系统的健壮性。</p> <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image006.jpg" class=""> <p>​图2 系统架构图</p><h2 id="2-3模块设计"><a href="#2-3模块设计" class="headerlink" title="2.3模块设计"></a>2.3模块设计</h2><p>综合应用协同过滤推荐、神经网络等算法，构建面向老年人心理健康与慢性病中医疗养的智能决策系统，整合银发学院、老年社区、银发商城、心情天地等功能，以年轻化的生活方式为驱动，以“互联网＋”应用模式为载体，为老年群体创建一个健康的、有活力的、参与度高的移动互联网服务平台。系统功能详见图 3。</p> <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image008.jpg" class=""> <p>​图3 功能模块图</p><p>当用户首次登入平台时，系统会以问卷形式进行简要人像刻画，涉及慢性疾病、喜好偏向、心理问题等多个方面，为平台进行内容推荐明确初始方向。</p><h3 id="2-3-1银发学院–老年网络课程学习，预防和治疗老年人慢性疾病"><a href="#2-3-1银发学院–老年网络课程学习，预防和治疗老年人慢性疾病" class="headerlink" title="2.3.1银发学院–老年网络课程学习，预防和治疗老年人慢性疾病"></a>2.3.1银发学院–老年网络课程学习，预防和治疗老年人慢性疾病</h3><p>前期提供高质量的网络课程（兴趣爱好培养、老年心理等课程），通过购买版权后投放平台，或由教育机构向平台投入课程。此板块包含中医课堂、中医养生等，其具有预防和治疗中老年人慢性疾病的功能和使命，以中医药防治为基本出发点，提供中医讲师课堂、穴位按摩、食疗、保健操法等基本手段，主要针对慢性新功能不全、糖尿病并发症、肾病综合症、中风后遗症、慢性呼吸道疾病等中老年人常见慢性疾病。</p><ol><li><p>老年网络课程：实时展示老年课程情况，通过表单形式显示课程数据，内容可由用户自创分享，也可由平台提供老年课程学习，结合折线图和饼状图显示近期与长期的用户课程学习信息等，令用户对自身的喜好兴趣情况有直观的了解。</p></li><li><p>预防老年慢性疾病：根据用户的疾病信息以及身体健康管控功能反馈的数据，利用时间序列分析算法对用户未来可能产生的慢性疾病进行预测，得到用户未来的健康发展趋势，为“中医养生日常打卡”、“治疗老年慢性疾病”等功能的实现提供了依据和方向。</p></li><li><p>治疗老年慢性疾病：结合用户当前疾病状况与影响因素占比，系统为用户提供中药配伍方案，用户通过完成该方案（食用、服用、用药参照等），改善健康状况。</p></li></ol><p>​    4.中医养生操法推荐：基于用户喜好，向用户推荐中医养生操法，如太极拳、五禽戏等，助力用户身体健康。</p><h3 id="2-3-2老年社区—银发小圈、日常打卡"><a href="#2-3-2老年社区—银发小圈、日常打卡" class="headerlink" title="2.3.2老年社区—银发小圈、日常打卡"></a>2.3.2老年社区—银发小圈、日常打卡</h3><p>为老年人提供一个互相交流的社交平台，其可以帮助问题解决、网络交友、日常分享等功能的实现，为老年群体提供社会支持，使该群体在网络社会中有存在感，缓解其内心孤独感。同时提供以中医养生为主的日常打卡机制。</p><p>银发小圈：致力于为中老年人提供一个便捷的交友平台。有利于初入平台的新用户快速掌握平台使用方法，加速用户融入。该部分主要有发帖、评论、点赞等功能。进入首页后用户可以滑动浏览，找到自己感兴趣的帖子，点击了解详情。每条帖子下都有评论和点赞按钮，点击以后触发事件，跳转到相应页面，用户可以点击评论发表自己的观点。用户如果想要分享自己的养生知识或者有疑问想和其他用户讨论，可以直接点击发表帖子按钮，跳转到发帖页面，从而发表自己的看法，发表后的帖子保存在数据库中，出现在论坛首页，用户可以在自己的帖子下看到其他用户的评论，并与其他用户进行交流。依托于移动客户端，在本平台的用户可以随时随地分享自己的日常动态，让更多人了解自己，或者去了解更多的人，缓解中老年人的心理孤独感。</p><p>日常打卡：结合用户当前健康状况，系统提供日常打卡方案。用户可对方案进行打卡，改善健康状况。</p><h3 id="2-3-3银发商城–分析预测老人偏好，便利老人生活"><a href="#2-3-3银发商城–分析预测老人偏好，便利老人生活" class="headerlink" title="2.3.3银发商城–分析预测老人偏好，便利老人生活"></a>2.3.3银发商城–分析预测老人偏好，便利老人生活</h3><p>主要实现商品购买的功能，除常用好物售卖，还有个性化智能推荐产品，我们采用了基于用户的协同过滤推荐算法，将用户的搜索内容、用户相似度作为自变量，找到最符合用户需求的物品推荐给用户。</p><h3 id="2-3-4心情天地–排解心理问题，幸福老年生活"><a href="#2-3-4心情天地–排解心理问题，幸福老年生活" class="headerlink" title="2.3.4心情天地–排解心理问题，幸福老年生活"></a>2.3.4心情天地–排解心理问题，幸福老年生活</h3><p>具有缓解与帮助老年人解决心理问题的社会责任与使命，为老龄人群排忧解难，结合当下热点，以面对点的形式为老龄人群排忧解难，为老年生活提供一丝甜蜜。</p><p>老年人心理咨询：通过心理咨询的方式释放或排解用户内心的痛苦和压抑的情感，减轻用户的内在压力和生活负担，缓解其紧张焦虑的情绪。同时该功能可及时发现用户的心理变化趋势，预防其可能出现的心理问题。</p><p>热门问题：向用户展示当下热门问题，用户可以在下方互相交流，抒发自己的意见，缓解心理问题。</p><h1 id="3-详细设计"><a href="#3-详细设计" class="headerlink" title="3. 详细设计"></a>3. 详细设计</h1><h2 id="3-1界面设计"><a href="#3-1界面设计" class="headerlink" title="3.1界面设计"></a>3.1界面设计</h2><p>软件整体采用简约直观的设计风格，界面以蓝白色为主色调，能够减缓电子屏幕带给眼睛的疲劳感。在界面布局上，对页面的文字、图形和图片等进行了合理的排布与设计，使之能够有效满足用户需求，并方便用户操作。除此之外，在单个模块设计时，也考虑到信息的层级关系明确，这样才能使信息传递效率最大化。 </p><p>在开发过程中，项目组向市面上界面美观布局优秀的应用学习，并结合自身软件设计理念，进行独立的开发，软件中大部分组件都是自制单项调试。除此以外，考虑到美观程度，在开发过程也使用了jumpingbeans、banner、MPAndroidChart这些开源组件，用于例如轮播图的定时跳转，饼状图的动态展示效果等。</p><h3 id="3-1-1登录界面"><a href="#3-1-1登录界面" class="headerlink" title="3.1.1登录界面"></a>3.1.1登录界面</h3> <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image010.jpg" class="">  <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image012.jpg" class="">  <p>图4 登录界面               图5 注册界面</p><h3 id="3-1-2用户界面"><a href="#3-1-2用户界面" class="headerlink" title="3.1.2用户界面"></a>3.1.2用户界面</h3> <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image014.jpg" class="">  <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image016.jpg" class="">  <p>图6 问卷界面-1               图7 问卷界面-2</p> <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image018.jpg" class="">  <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image020.jpg" class="">  <p>图8 问卷界面-3               图9 问卷界面-4</p> <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image022.jpg" class="">  <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image024.jpg" class="">  <p>图9 问卷界面-5               图10 问卷界面-6</p> <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image026.jpg" class="">  <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image028.jpg" class="">   <p>图11 银发学院                图12 银发学院-中医食疗</p> <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image030.jpg" class="">  <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image032.jpg" class="">  <p>图13 银发学院-热门排行           图12 银发学院-老年爱好</p> <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image035.jpg" class="">  <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image036.jpg" class="">  <p>图14 老年社区-日程计划           图15 老年社区-银发小圈</p> <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image038.jpg" class="">  <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image040.jpg" class="">  <p>图16 心情天地-因您推荐           图17 心情天地-热门问题</p> <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image043.jpg" class="">  <img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image044.jpg" class="">  <p>图18 银发商城                图19 我的</p><h2 id="3-2数据库设计"><a href="#3-2数据库设计" class="headerlink" title="3.2数据库设计"></a>3.2数据库设计</h2><p>本系统的数据库主要依靠MYSQL以及嵌入式ROOM数据库来实现，Mysql数据库主要用于存储通过服务器下行至软件的数据流，或存储软件通过服务器上行至Mysql数据库的相关数据流。Room数据库主要用来嵌入进软件中，用来存储用户本地的一些数据，例如搜索记录等不需要上传至服务器的简单数据。整体数据库的设计遵循软件工程规范，符合系统架构需求。数据库设计合理，规范度高。</p><h3 id="3-2-1实体-关系图"><a href="#3-2-1实体-关系图" class="headerlink" title="3.2.1实体-关系图"></a>3.2.1实体-关系图</h3><img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image046.jpg" class=""> <p>图20 实体-关系图</p><h3 id="3-2-2数据实体定义"><a href="#3-2-2数据实体定义" class="headerlink" title="3.2.2数据实体定义"></a>3.2.2数据实体定义</h3><p><strong>表 2 Doctors表</strong></p><table><thead><tr><th>字段名称</th><th>数据类型</th><th>备注</th><th>约束项</th><th>可为空值</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>大师编号</td><td>主键</td><td>否</td></tr><tr><td>name</td><td>varchar(12)</td><td>大师姓名</td><td></td><td>是</td></tr><tr><td>who</td><td>varchar(20)</td><td>大师身份</td><td></td><td>是</td></tr><tr><td>time</td><td>varchar(18)</td><td>大师出诊时间</td><td></td><td>是</td></tr><tr><td>Introduce</td><td>varchar(20)</td><td>大师简介</td><td></td><td>是</td></tr><tr><td>pic</td><td>varchar(20)</td><td>大师图片</td><td></td><td>是</td></tr><tr><td>appliance</td><td>varchar(20)</td><td>主治方向</td><td></td><td>是</td></tr></tbody></table><p><strong>表 3 User 表</strong></p><table><thead><tr><th>字段名称</th><th>数据类型</th><th>备注</th><th>约束项</th><th>可为空值</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>用户编号</td><td>主键</td><td>否</td></tr><tr><td>name</td><td>varchar(12)</td><td>用户姓名</td><td></td><td>是</td></tr><tr><td>user</td><td>char</td><td>用户名</td><td></td><td>是</td></tr><tr><td>sex</td><td>varchar(2)</td><td>用户性别</td><td></td><td>是</td></tr><tr><td>phone</td><td>char</td><td>用户手机号码</td><td>不可重复</td><td>是</td></tr><tr><td>password</td><td>varchar(18)</td><td>用户密码</td><td></td><td>是</td></tr><tr><td>ill</td><td>int</td><td>用户疾病</td><td></td><td>是</td></tr><tr><td>birthday</td><td>date</td><td>出生日期</td><td></td><td>是</td></tr><tr><td>avatar</td><td>varchar(18)</td><td>头像</td><td></td><td>是</td></tr></tbody></table><p><strong>表 4 video 表</strong></p><table><thead><tr><th>字段名称</th><th>数据类型</th><th>备注</th><th>约束项</th><th>可为空值</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>视频编号</td><td>主键</td><td>否</td></tr><tr><td>video</td><td>varchar(50)</td><td>视频内容</td><td></td><td>是</td></tr><tr><td>type</td><td>varchar(50)</td><td>视频类型</td><td></td><td>是</td></tr><tr><td>Author</td><td>varchar(200)</td><td>视频作者</td><td></td><td>是</td></tr><tr><td>Name</td><td>varchar(40)</td><td>视频名称</td><td></td><td>是</td></tr><tr><td>Introduce</td><td>varchar(100)</td><td>视频简介</td><td></td><td>是</td></tr><tr><td>Pic</td><td>varchar(50)</td><td>视频封面</td><td></td><td>是</td></tr><tr><td>Commentor1</td><td>varchar(100)</td><td>视频评论1</td><td></td><td>是</td></tr><tr><td>Commentor2</td><td>varchar(50)</td><td>视频评论2</td><td></td><td>是</td></tr><tr><td>Commentor3</td><td>varchar(50)</td><td>视频评论3</td><td></td><td>是</td></tr><tr><td>Type2</td><td>varchar(50)</td><td>视频属性</td><td></td><td>是</td></tr><tr><td>Id2</td><td>varchar(50)</td><td>属性编号</td><td></td><td>是</td></tr></tbody></table><p><strong>表 5 diet 表</strong></p><table><thead><tr><th>字段名称</th><th>数据类型</th><th>备注</th><th>约束项</th><th>可为空值</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>药膳编号</td><td>主键</td><td>否</td></tr><tr><td>name</td><td>varchar(50)</td><td>药膳名称</td><td></td><td>否</td></tr><tr><td>composition</td><td>varchar(50)</td><td>药膳配伍</td><td></td><td>否</td></tr><tr><td>way</td><td>varchar(200)</td><td>制作方法</td><td></td><td>否</td></tr><tr><td>application</td><td>varchar(20)</td><td>适宜情况</td><td></td><td>否</td></tr><tr><td>season</td><td>varchar(40)</td><td>适宜季节</td><td></td><td>否</td></tr><tr><td>proper</td><td>varchar(40)</td><td>建议</td><td></td><td>否</td></tr><tr><td>envy</td><td>varchar(40)</td><td>禁忌</td><td></td><td>否</td></tr><tr><td>introduce</td><td>varchar(40)</td><td>介绍</td><td></td><td>否</td></tr><tr><td>pic</td><td>varchar(40)</td><td>图片</td><td></td><td></td></tr></tbody></table><p><strong>表 6 diets 表</strong></p><table><thead><tr><th>字段名称</th><th>数据类型</th><th>备注</th><th>约束项</th><th>可为空值</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>药膳编号</td><td>主键</td><td>否</td></tr><tr><td>name</td><td>varchar(40)</td><td>药膳名称</td><td></td><td>否</td></tr><tr><td>composition</td><td>varchar(40)</td><td>创建时间</td><td></td><td>否</td></tr><tr><td>way</td><td>longtext</td><td>制作方法</td><td></td><td>否</td></tr><tr><td>nature</td><td>varchar(40)</td><td>属性</td><td></td><td>是</td></tr><tr><td>attribution</td><td>varchar(40)</td><td>病灶</td><td></td><td>是</td></tr><tr><td>type</td><td>varchar(40)</td><td>方剂类型</td><td></td><td>是</td></tr><tr><td>application</td><td>longtext</td><td>作用</td><td></td><td>是</td></tr><tr><td>malady</td><td>longtext</td><td>辩证</td><td></td><td>是</td></tr><tr><td>constitution</td><td>varchar(40)</td><td>体质</td><td></td><td>是</td></tr><tr><td>nowith</td><td>longtext</td><td>禁忌同食</td><td></td><td>是</td></tr></tbody></table><p><strong>表 7 xqtd 表</strong></p><table><thead><tr><th>字段名称</th><th>数据类型</th><th>备注</th><th>约束项</th><th>可为空值</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>问题编号</td><td>主键</td><td>否</td></tr><tr><td>Title</td><td>varchar(40)</td><td>问题名称</td><td></td><td>是</td></tr><tr><td>Name</td><td>varchar(20)</td><td>发布人姓名</td><td></td><td>是</td></tr><tr><td>Avatar</td><td>varchar(50)</td><td>附带图片</td><td></td><td>是</td></tr><tr><td>Introduce</td><td>longtext</td><td>问题介绍</td><td></td><td>是</td></tr><tr><td>More</td><td>longtext</td><td>详细介绍</td><td></td><td>是</td></tr><tr><td>cover</td><td>longtext</td><td>问题图片</td><td></td><td>是</td></tr></tbody></table><p><strong>表 8 Course 表</strong></p><table><thead><tr><th>字段名称</th><th>数据类型</th><th>备注</th><th>约束项</th><th>可为空值</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>商品编号</td><td>主键</td><td>否</td></tr><tr><td>Title</td><td>varchar(20)</td><td>商品名称</td><td></td><td>是</td></tr><tr><td>Price</td><td>double</td><td>商品价格</td><td></td><td>是</td></tr><tr><td>Short</td><td>varchar(300)</td><td>商品简介</td><td></td><td>是</td></tr><tr><td>Long</td><td>longtext</td><td>详细介绍</td><td></td><td>是</td></tr><tr><td>Cover</td><td>varchar(300)</td><td>封面图片</td><td></td><td>是</td></tr><tr><td>Introduce</td><td>longtext</td><td>商品介绍</td><td></td><td>是</td></tr><tr><td>Pic1</td><td>varchar(300)</td><td>商品图片1</td><td></td><td>是</td></tr><tr><td>Pic2</td><td>varchar(300)</td><td>商品图片2</td><td></td><td>是</td></tr><tr><td>Type</td><td>varchar(300)</td><td>商品类型</td><td></td><td>是</td></tr><tr><td>sum</td><td>int</td><td>总价</td><td></td><td>是</td></tr></tbody></table><p><strong>表 9 images 表</strong></p><table><thead><tr><th>字段名称</th><th>数据类型</th><th>备注</th><th>约束项</th><th>可为空值</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>图像编号</td><td>主键</td><td>否</td></tr><tr><td>Image_data</td><td>varchar(100)</td><td>图像内容</td><td></td><td>否</td></tr></tbody></table><p><strong>表 10 plan 表</strong></p><table><thead><tr><th>字段名称</th><th>数据类型</th><th>备注</th><th>约束项</th><th>可为空值</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>计划编号</td><td>主键</td><td>否</td></tr><tr><td>Type</td><td>varchar(100)</td><td>计划类型</td><td></td><td>否</td></tr><tr><td>Thing</td><td>varchar(100)</td><td>计划内容</td><td></td><td>否</td></tr></tbody></table><h3 id="3-2-3数据库关系图"><a href="#3-2-3数据库关系图" class="headerlink" title="3.2.3数据库关系图"></a>3.2.3数据库关系图</h3><img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image048.gif" class=""> <p>图21 数据库关系图</p><h2 id="3-3关键技术"><a href="#3-3关键技术" class="headerlink" title="3.3关键技术"></a>3.3关键技术</h2><p>项目技术路线以老年人本身为核心，聚焦于老年人在平台的活动轨迹。首先，收集老人在平台上填写的相关信息（年龄，身体状况，爱好等）以及在平台上的活动轨迹，接着对相关活动数据进行数据预处理操作（数据清洗，数据变换等操作），对已经预处理好的数据存储到老年人数据库中，从中选取一部分内容按类别以分类栏目的形式展示在平台上，供用户选择；再利用BP神经网络算法进行平台用户偏好的预测，依据得出的结果对平台内容进行优化和方向的调整；此外，在分类处理的同时，对身体长期患有慢性病的老人，结合中医养生和中医疗养专家的意见，根据具体的慢性病症推荐中医疗养方法；对当前心理处于亚健康或不健康状态的老人进行标签，依据老人的心情推荐能够自我疏导的方法，另外，在老人通过输入关键字查找想要内容时，平台对搜索的关键字进行预处理后，向数据库申请查找要求内容，查找成功后，向老人反馈内容；最后，平台利用协同过滤算法，向老人智能推荐中医养生课程，日常生活视频等等。技术路线详见图22</p><img src="/2024/03/06/Honey%20Elder%E8%80%81%E5%B9%B4%E4%BA%BA%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7%E7%BB%BC%E5%90%88%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0/clip_image050.gif" class=""><p>图22 技术路线图</p><h1 id="4-测试报告"><a href="#4-测试报告" class="headerlink" title="4. 测试报告"></a>4. 测试报告</h1><h2 id="4-1安装、卸载测试"><a href="#4-1安装、卸载测试" class="headerlink" title="4.1安装、卸载测试"></a>4.1安装、卸载测试</h2><p>软件安装时需要同意联网以及存储请求，如不给予网络权限，在进入软件时，会提示网络连接失败；如不给予存储请求，部分功能例如改变头像，会无法顺利进行。</p><p>软件卸载时，其会连同缓存数据一起清除。</p><h2 id="4-2功能测试"><a href="#4-2功能测试" class="headerlink" title="4.2功能测试"></a>4.2功能测试</h2><p>网络连接功能测试，出现断网情况时，会提示网络连接失败，软件功能失效。当服务器关闭时，也会提示网络连接失败，软件功能失效。</p><p>注册登录功能测试，信息通过服务器上传至mysql数据库成功，并成功跳转至对应主界面。</p><p>视频播放功能测试，视频流通过服务器下行至安卓端，安卓端进行解码后，通过视频适配器配置成功，并可以进行暂停以及前后退进度功能。</p><p>养生食疗功能测试，在网络连接顺畅的情况下，食疗主界面展示对应季节的食疗餐方推荐，当点击对应的食疗餐方后，进入对应的食疗餐方的细节内容，并显示成功。</p><p>心情天地功能测试，在网络连接顺畅的情况下，心情天地首页展示可能会困扰的问题，当点击对应词条后，成功进入对应词条的详细内容展示界面。</p><p>今日计划功能测试，在网络连接顺畅的情况下，当新增计划时，可以选择新增计划的类型以及计划内容，点击完成后，由本地通过服务器上传至mysql数据库，查看mysql数据库，发现上传成功，同时界面内容更新成功。</p><p>银发商城功能测试，在网络连接顺畅的情况下，商城主界面展示所推荐的商品，当点击对应商品后，即进入对应商品详情界面，显示商品价格，介绍，图片等。选择加入购物车后，购物车即出现对应商品内容，再次点击加入购物车，购物车对应商品数量增加。</p><p>购物车结算功能测试，在网络连接顺畅的情况下，可以在购物车对商品进行增加或减少功能，点击结算，会展示最新购物车商品总价，点击确认后，成功结算并清空购物车。</p><h2 id="4-3性能测试"><a href="#4-3性能测试" class="headerlink" title="4.3性能测试"></a>4.3性能测试</h2><p>服务器适合日访问量1万左右，通用场景为web应用、数据库等。</p><h2 id="4-4-Android特性测试"><a href="#4-4-Android特性测试" class="headerlink" title="4.4 Android特性测试"></a>4.4 Android特性测试</h2><p>软件的使用符合当下时代主流的手势操作习惯，同时也能够兼容导航栏的操作方式，方便长时间使用并已经习惯于导航栏操作的用户。</p><h2 id="4-5不同网络状态下进行的测试"><a href="#4-5不同网络状态下进行的测试" class="headerlink" title="4.5不同网络状态下进行的测试"></a>4.5不同网络状态下进行的测试</h2><p>在测试的过程中，我们通过查看主页推荐视频的呈现速度，来进行相关研究，发现当服务器为单核时，视频呈现较慢。当我们将服务器升级为多核时，视频呈现速度较快，符合用户的等待时间下限。</p><table><thead><tr><th>网络状态</th><th>视频的呈现速度</th></tr></thead><tbody><tr><td>Wifi(校园网)</td><td>获取较慢</td></tr><tr><td>移动网络</td><td>4G获取速度一般，5G速度获取较快</td></tr><tr><td>Wifi(其他的局域网)</td><td>获取速度取决于网速与带宽</td></tr></tbody></table><h2 id="4-6中断性测试"><a href="#4-6中断性测试" class="headerlink" title="4.6中断性测试"></a>4.6中断性测试</h2><p>测试过程中，当用户在查看养生食疗餐方时，突然退出软件，再次回到软件时，软件依然显示的是食疗餐方内容。当用户关闭软件，再次进入时，需要进行登陆操作。</p><p>测试过程中，当用户网络发生小幅度波动，可能会导致软件闪退或用户状态异常。</p><h2 id="4-7兼容性测试"><a href="#4-7兼容性测试" class="headerlink" title="4.7兼容性测试"></a>4.7兼容性测试</h2><p>开发的过程中选用的安卓版本最低为 Android 8.0，经过在电脑上虚拟机的测试，8.0 以上才能正常安装并运行顺畅，且向上兼容，包括最新的 Android 12.0 安装没有问题。</p><table><thead><tr><th>Android 版本</th><th>测试结果</th></tr></thead><tbody><tr><td>8.0 以下</td><td>当图片清晰度较高时，软件闪退</td></tr><tr><td>8.0 及以上</td><td>安装正常，运行正常</td></tr><tr><td>最新的 12.0</td><td>安装正常，运行正常</td></tr></tbody></table><h2 id="4-8-App在清空数据后或强制退出后还能正常运行否"><a href="#4-8-App在清空数据后或强制退出后还能正常运行否" class="headerlink" title="4.8 App在清空数据后或强制退出后还能正常运行否"></a>4.8 App在清空数据后或强制退出后还能正常运行否</h2><p>App 在清空数据后能正常运行，但是需要缓存的数据需要重新缓存才可以正常使用，例如主页视频的展示，头像等。</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Honor of Kings 数 据 分 析</title>
    <link href="/2024/03/06/Honor-of-Kings-%E6%95%B0-%E6%8D%AE-%E5%88%86-%E6%9E%90/"/>
    <url>/2024/03/06/Honor-of-Kings-%E6%95%B0-%E6%8D%AE-%E5%88%86-%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="1-项目背景"><a href="#1-项目背景" class="headerlink" title="1.项目背景"></a>1.项目背景</h1><p>《王者荣耀》作为腾讯公司的重要产品之一，是一款5V5团队公平竞技手游，已成为国际范围内最受欢迎的MOBA手游之一。自从它在移动设备上推出以来，便吸引了数以百万计的玩家，构建了一个庞大的社交和竞技游戏生态系统。</p><p>截止目前，游戏已经拥有超过106个英雄角色，这些英雄涵盖了不同的职业定位，如坦克、战士、刺客、法师、射手和辅助。每个英雄都拥有独特的技能和特点，这使得游戏变得多样化和复杂。《王者荣耀》的玩家社群不断壮大，其中既包括了新手玩家，也包括了专业电竞选手。</p><p>随着游戏的不断发展，玩家对于英雄数据的需求也逐渐增加。他们希望能够更深入地了解每个英雄的性能、胜率、地区差异和战斗表现。这种深入了解不仅有助于提升玩家的游戏技能，还可以为游戏开发者提供有价值的数据，以进行游戏平衡调整和改进。</p><p>这个项目的目标是为《王者荣耀》玩家和开发者提供一个全面的英雄数据平台，使他们能够更轻松地获取、分析和应用英雄相关的信息。通过系统的数据分析和可视化功能，玩家可以优化他们的游戏策略，提高竞技水平，而游戏开发者可以依靠这些数据做出更明智的决策，以持续改进游戏的质量和平衡性。这个项目的意义不仅体现在提升游戏体验上，还有助于推动《王者荣耀》作为一款竞技电竞游戏的发展和壮大。</p><h1 id="2-系统开发意义"><a href="#2-系统开发意义" class="headerlink" title="2. 系统开发意义"></a>2. 系统开发意义</h1><p>数据分析与处理在《王者荣耀》这款备受欢迎的MOBA手游中具有重要意义。本系统的开发不仅对于玩家个人而言有着深远的意义，也对整个游戏生态系统和游戏开发者有着重要的影响。：本系统的数据分析和处理主要围绕王者荣耀游戏中的英雄数据展开，包括但不限于英雄热度、胜率、bp率等。</p><h2 id="2-1-个人层面的意义："><a href="#2-1-个人层面的意义：" class="headerlink" title="2.1 个人层面的意义："></a>2.1 个人层面的意义：</h2><p>（1）提高游戏表现：通过本系统提供的英雄数据分析，玩家可以更全面地了解每位英雄的强弱和适用场景。这将使他们能够做出更明智的英雄选择，制定更有效的战略，从而提高在游戏中的表现。</p><p>（2）加强竞技体验：本系统的数据分析功能有助于提高玩家的竞技水平，帮助他们更好地理解英雄的胜率趋势和战术变化。这不仅会增加游戏的趣味性，还可以促进更有竞技精神的游戏社区的形成。</p><h2 id="2-2-整个游戏生态系统的意义："><a href="#2-2-整个游戏生态系统的意义：" class="headerlink" title="2.2 整个游戏生态系统的意义："></a>2.2 整个游戏生态系统的意义：</h2><p>（1）促进游戏平衡：通过收集和分析大量的英雄数据，本系统可以为游戏开发者提供宝贵的信息，有助于他们更好地进行英雄平衡调整。这将有助于确保游戏中的英雄都有机会被玩家使用，减少不平衡和不公平的情况。</p><p>（2）提高玩家参与度：有了本系统，玩家可以更深入地了解游戏中的英雄，这可能会引发更多的探索欲望，增加游戏的长期参与度。这对于游戏的长期健康和生存至关重要。</p><p>（3）数据驱动游戏开发：本系统收集的数据不仅可以用于英雄平衡，还可以为游戏开发者提供关于玩家行为和偏好的见解。这有助于更精确地制定游戏更新和改进策略，以满足玩家的需求。</p><p>总之，本系统的开发不仅对于玩家在游戏中获得更好体验有着直接影响，还在更大范围内促进了《王者荣耀》作为一款竞技游戏的长期成功和发展。它为玩家提供了强大的工具来提高他们的游戏技能，同时也为游戏开发者提供了宝贵的反馈和改进机会。</p><h1 id="3-系统功能需求"><a href="#3-系统功能需求" class="headerlink" title="3. 系统功能需求"></a>3. 系统功能需求</h1><h2 id="3-1系统主要功能"><a href="#3-1系统主要功能" class="headerlink" title="3.1系统主要功能"></a>3.1系统主要功能</h2><p>（1）查看英雄数据： 系统将提供一个易于访问的英雄数据库，允许用户检索各个英雄的详细信息。这些信息包括但不限于热度、胜率、bp率、战力、技能效果、皮肤和背景故事等方面的数据。用户可以根据不同的标准（如版本、地区、英雄类型等）来进行搜索和过滤，以获取最相关的信息。</p><p>（2）数据分析与可视化： 系统将提供强大的数据分析工具，用户可以使用这些工具深入挖掘英雄数据。用户可以生成图表、统计数据和趋势分析，以更好地理解英雄的性能和演化。可视化功能将包括直方图、折线图、雷达图等，以便用户可以以直观的方式比较不同英雄之间的数据。</p><p>（3）英雄推荐： 系统将基于数据分析结果提供个性化的英雄推荐。用户可以输入他们的游戏偏好和风格，系统将根据这些信息推荐最适合的英雄。推荐将考虑用户的技能水平、游戏版本、队伍构成等因素，以确保英雄的选择最符合用户的需求。</p><p>（4）地区和版本比较： 用户将能够轻松比较不同地区和游戏版本中英雄的性能。系统将提供地区和版本选择功能，允许用户查看不同地区或版本中英雄数据的变化。这将有助于玩家更好地适应不同的游戏环境和战术要求。</p><p>（5）数据导出和分享： 系统将支持用户将数据导出为可分享的格式，如PDF或CSV。这样，用户可以保存自己感兴趣的数据、与其他玩家分享分析结果，或将数据用于其他目的，如社交媒体分享或战术讨论。</p><p>（6）用户反馈和报告： 用户将能够提供反馈和举报不准确或有问题的数据。系统将提供一个用户反馈渠道，以确保数据的准确性和完整性，并及时修复任何错误。</p><h2 id="3-2系统用例分析"><a href="#3-2系统用例分析" class="headerlink" title="3.2系统用例分析"></a>3.2系统用例分析</h2><h3 id="3-2-1系统用例图"><a href="#3-2-1系统用例图" class="headerlink" title="3.2.1系统用例图"></a>3.2.1系统用例图</h3> <img src="/2024/03/06/Honor-of-Kings-%E6%95%B0-%E6%8D%AE-%E5%88%86-%E6%9E%90/clip_image002.jpg" class=""> <h3 id="3-2-2关键用例的详细描述"><a href="#3-2-2关键用例的详细描述" class="headerlink" title="3.2.2关键用例的详细描述"></a>3.2.2关键用例的详细描述</h3><table><thead><tr><th>用例名称</th><th>进入王者荣耀推荐网页</th></tr></thead><tbody><tr><td>参与者</td><td>用户</td></tr><tr><td>描述</td><td>用户通过浏览器进入系统，查看英雄的相应信息，例如，高胜率英雄推荐、英雄ban位饼状图、英雄热度柱状图等内容。</td></tr></tbody></table><table><thead><tr><th>用例名称</th><th>进入王者荣耀推荐网页</th></tr></thead><tbody><tr><td>参与者</td><td>用户</td></tr><tr><td>描述</td><td>用户通过浏览器进入系统，查看英雄的相应信息，例如，高胜率英雄推荐、英雄ban位饼状图、英雄热度柱状图等内容。</td></tr><tr><td>主干过程</td><td>1.0 查看高胜率英雄推荐  1.系统显示当前高胜率英雄，并由高至低排序  2.0查看英雄ban位饼状图  1.系统显示当前英雄ban位饼状图，并由高至低排序  3.0查看英雄热度柱状图  1.系统显示当前英雄热度柱状图，并由高至低排序</td></tr></tbody></table><table><thead><tr><th>用例名称</th><th>查询英雄战力</th></tr></thead><tbody><tr><td>参与者</td><td>用户</td></tr><tr><td>描述</td><td>用户进入王者荣耀推荐网页，单击王者荣耀英雄战力查询按钮，查看英雄战力的相应信息，例如，省级上榜最低战力、市级上榜最低战力、区级上榜最低战力等内容。</td></tr><tr><td>主干过程</td><td>1.0查询英雄战力  系统被查询英雄的相关战力  1.1 查看省级上榜最低战力  1.系统显示省级上榜最低战力  1.2查看市级上榜最低战力  1.系统显示市级上榜最低战力  1.3查看区级上榜最低战力  1.系统显示区级上榜最低战力</td></tr></tbody></table><h2 id="3-3数据字典"><a href="#3-3数据字典" class="headerlink" title="3.3数据字典"></a>3.3数据字典</h2><h3 id="3-3-1-E-R图"><a href="#3-3-1-E-R图" class="headerlink" title="3.3.1 E-R图"></a>3.3.1 E-R图</h3> <img src="/2024/03/06/Honor-of-Kings-%E6%95%B0-%E6%8D%AE-%E5%88%86-%E6%9E%90/clip_image004.jpg" class=""> <h3 id="3-3-2数据实体定义"><a href="#3-3-2数据实体定义" class="headerlink" title="3.3.2数据实体定义"></a>3.3.2数据实体定义</h3><table><thead><tr><th>heroscore</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>字段名</td><td>类型</td><td>描述</td><td>备注</td></tr><tr><td>Id</td><td>Int</td><td>编号</td><td>主键，自增长</td></tr><tr><td>Name</td><td>Varchar（32）</td><td>名称</td><td>非空</td></tr><tr><td>Area</td><td>Varchar（32）</td><td>地区</td><td></td></tr><tr><td>Score</td><td>Int</td><td>分数</td><td></td></tr></tbody></table><table><thead><tr><th>herosscore</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>字段名</td><td>类型</td><td>描述</td><td>备注</td></tr><tr><td>Id</td><td>Int</td><td>编号</td><td>主键，自增长</td></tr><tr><td>Name</td><td>Varchar（32）</td><td>名称</td><td>非空</td></tr><tr><td>Area</td><td>Varchar（32）</td><td>地区</td><td></td></tr><tr><td>areapower</td><td>Int</td><td>区级上榜最低战力</td><td></td></tr><tr><td>City</td><td>Varchar（32）</td><td>城市</td><td></td></tr><tr><td>Citypower</td><td>Int</td><td>市级上榜最低战力</td><td></td></tr><tr><td>Province</td><td>Varchar（32）</td><td>省市</td><td></td></tr><tr><td>ProvincePower</td><td>Int</td><td>省级上榜最低战力</td><td></td></tr></tbody></table><table><thead><tr><th>heroinfos</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>字段名</td><td>类型</td><td>描述</td><td>备注</td></tr><tr><td>id</td><td>Int</td><td>编号</td><td>主键，自增长</td></tr><tr><td>heroId</td><td>Int</td><td>英雄编号</td><td></td></tr><tr><td>heroName</td><td>Varchar（32）</td><td>英雄名称</td><td>非空</td></tr><tr><td>banRate</td><td>float</td><td>禁止率</td><td></td></tr><tr><td>ShowRate</td><td>float</td><td>出场率</td><td></td></tr><tr><td>winRate</td><td>float</td><td>胜率</td><td></td></tr><tr><td>HeroCare</td><td>Varchar（32）</td><td>位置</td><td></td></tr><tr><td>tRank</td><td>char</td><td>热度</td><td></td></tr></tbody></table><h1 id="4-系统非功能性需求"><a href="#4-系统非功能性需求" class="headerlink" title="4. 系统非功能性需求"></a>4. 系统非功能性需求</h1><h2 id="4-1性能需求"><a href="#4-1性能需求" class="headerlink" title="4.1性能需求"></a>4.1性能需求</h2><p>网络平台要求:</p><p>（1）多用户系统</p><p>在王者荣耀战力系统中，网络平台要求支持多用户访问。尽管玩家没有权限录入、修改或删除数据，但他们可以在各自的客户端上进行数据查询操作。这要求系统具备多用户支持，确保各用户的操作不会相互干扰，同时允许信息共享。信息主要存储在服务器端的数据库中，由各使用者在规定的权限下在各自的客户端上录入，修改，删除相关的内容，进行各自的相关操作，不可跨权限进行操作。各用户还可进行查询，调用，达到信息共享。</p><p>（2）数据的完整性，准确性</p><p>数据的完整性和准确性是关键要求。尽管玩家只能进行查询操作，但系统需要确保查询结果反映了最新的、准确的战力数据。录入数据时，系统应对数据进行验证和限制,以防止不合法的数据进入数据库，限制录入数据类型及取值范围以保证数据的完整性及准确性。</p><p>（3）数据安全性</p><p>系统应确保只有经过身份验证的用户才能进行查询操作，以保护战力数据的隐私和安全性。密码控制功能和访问权限规定是实现数据安全性的关键措施。本系统采用二级安全保障：第一级:依赖于网络本身对用户使用权限的规定。不同的使用者具有不同的使用权限。第二级:在程序模块中通过使用密码控制功能对用户使用权限加以限制。以保证系统的正常使用。</p><h2 id="4-2软件开发运行环境需求"><a href="#4-2软件开发运行环境需求" class="headerlink" title="4.2软件开发运行环境需求"></a>4.2软件开发运行环境需求</h2><p>1.开发环境：IntelliJ IDEA，是 Java 语言的集成开发环境，IDEA 在业界被公认为是最好的 java 开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE 支持、Ant、JUnit、CVS 整合、代码审查、创新的 GUI 设计等方面的功能可以说是超常的。</p><p>2.运行环境：IDEA，浏览器。在部署和运行阶段，王者荣耀战力系统的服务器端需要配置适当的硬件和操作系统环境，以支持高并发的数据查询请求。用户的客户端需要支持现代浏览器，以便访问系统的前端界面。</p><h2 id="4-3其他需求"><a href="#4-3其他需求" class="headerlink" title="4.3其他需求"></a>4.3其他需求</h2><h3 id="4-3-1安全性需求"><a href="#4-3-1安全性需求" class="headerlink" title="4.3.1安全性需求"></a>4.3.1安全性需求</h3><p> 虽然玩家只能查看数据，但仍然需要确保数据的保密性和完整性。系统应采取措施，如对账号密码进行加密，以防止未经授权的访问和信息泄露。</p><h3 id="4-3-2-服务需求"><a href="#4-3-2-服务需求" class="headerlink" title="4.3.2 服务需求"></a>4.3.2 服务需求</h3><p>为了确保系统易于维护，提供简单的安装和维护流程是必要的。管理员需要能够轻松地配置和管理系统，监控系统状态，并执行备份和恢复操作。系统应提供用户友好的查询界面，以方便玩家查看战力数据。</p><h1 id="5-系统具体实现设计"><a href="#5-系统具体实现设计" class="headerlink" title="5. 系统具体实现设计"></a>5. 系统具体实现设计</h1><h2 id="5-1系统原型设计"><a href="#5-1系统原型设计" class="headerlink" title="5.1系统原型设计"></a>5.1系统原型设计</h2> <img src="/2024/03/06/Honor-of-Kings-%E6%95%B0-%E6%8D%AE-%E5%88%86-%E6%9E%90/clip_image006.jpg" class="">  <img src="/2024/03/06/Honor-of-Kings-%E6%95%B0-%E6%8D%AE-%E5%88%86-%E6%9E%90/clip_image008.jpg" class="">  <img src="/2024/03/06/Honor-of-Kings-%E6%95%B0-%E6%8D%AE-%E5%88%86-%E6%9E%90/clip_image010.jpg" class="">  <img src="/2024/03/06/Honor-of-Kings-%E6%95%B0-%E6%8D%AE-%E5%88%86-%E6%9E%90/clip_image012.jpg" class=""> <h2 id="5-2-数据库设计"><a href="#5-2-数据库设计" class="headerlink" title="5.2 数据库设计"></a>5.2 数据库设计</h2><p>当设计系统数据库时，有两个关键方面需要考虑：首先是将英雄数据存储在本地MySQL数据库，因为这些数据相对不大且相对稳定。其次，英雄战力数据在不同地区（IOS Q区、IOS 微信区、安卓 Q区、安卓 微信区）实时变化，因此需要使用大数据平台，将这些数据导入Hadoop的Hive数据库，并定期更新。最后，通过TOMCAT服务器将数据以JSON格式传输给前端。</p><h3 id="5-2-1-数据存储与更新流程"><a href="#5-2-1-数据存储与更新流程" class="headerlink" title="5.2.1 数据存储与更新流程"></a>5.2.1 数据存储与更新流程</h3><p>具体数据库内容在3.3已述，以下为数据库实现原有及数据传输方式说明：</p><p>1）存储英雄数据到本地MySQL数据库</p><p>英雄数据，如英雄的基本信息、技能描述和皮肤数量等，是相对静态的信息，因此适合存储在本地MySQL数据库中。这些数据的存储流程如下：</p><p>数据采集： 从游戏官方源或数据供应商获取英雄数据，包括英雄ID、名称、职业、技能描述等信息。</p><p>数据预处理： 在数据导入之前，进行数据清洗和格式化。这可能包括去除重复项、解析数据以适应数据库结构等。</p><p>数据存储： 使用数据库连接工具，将数据插入到本地MySQL数据库的英雄信息表（heroes）中。每个英雄的数据都与其唯一的英雄ID相关联。</p><p>2）存储英雄战力数据到Hadoop的Hive数据库</p><p>英雄战力数据是实时变化的，且跨多个地区，因此适合存储在Hadoop的Hive数据库中。这些数据的存储流程如下：</p><p>数据采集： 设计一个数据采集程序，定期（例如每隔12小时）从游戏服务器获取英雄在各个地区（如IOS Q区、IOS 微信区、安卓 Q区、安卓 微信区）的战力数据。这个程序会主动与游戏服务器通信，获取最新的数据。</p><p>数据分区： 获取的数据将被按地区和时间戳信息分区，以便更高效地查询和分析数据。每个分区将包含特定地区和时间段内的英雄战力数据。</p><p>数据存储： 将数据存储在Hive数据库的英雄战力数据表中。每次采集都会创建新的分区，确保历史数据得以保留。</p><h3 id="5-2-2-数据传输至前端通过TOMCAT服务器"><a href="#5-2-2-数据传输至前端通过TOMCAT服务器" class="headerlink" title="5.2.2 数据传输至前端通过TOMCAT服务器"></a>5.2.2 数据传输至前端通过TOMCAT服务器</h3><p>为了使前端应用能够获得最新的英雄和英雄战力数据，我们需要一个中介，即TOMCAT服务器，用于处理数据请求和响应。以下是数据传输至前端的流程：</p><p>前端请求： 前端应用通过HTTP请求向TOMCAT服务器发出请求，指定所需的数据类型和操作（例如获取英雄信息或战力数据）。</p><p>TOMCAT服务器处理： TOMCAT服务器接收到请求后，会根据请求的类型，查询相应的数据库。对于英雄信息，服务器将查询本地MySQL数据库的英雄信息表。对于英雄战力数据，服务器将查询Hive数据库的英雄战力数据表。</p><p>数据编码为JSON： 从数据库检索到的数据将被编码为JSON格式，以便于在前端应用中解析和显示。</p><p>HTTP响应，Ajax请求： TOMCAT服务器通过HTTP响应将JSON数据传递给前端应用，这将包含英雄信息或英雄战力数据，根据前端请求的内容而定。</p><p>前端解析与展示： 前端应用接收到JSON响应后，解析数据并将其呈现给用户。这可以是英雄列表、图表或其他可视化元素，根据前端应用的需求而定。</p><h3 id="5-2-3-核心代码"><a href="#5-2-3-核心代码" class="headerlink" title="5.2.3 核心代码"></a>5.2.3 核心代码</h3> <img src="/2024/03/06/Honor-of-Kings-%E6%95%B0-%E6%8D%AE-%E5%88%86-%E6%9E%90/clip_image014.jpg" class="">  <img src="/2024/03/06/Honor-of-Kings-%E6%95%B0-%E6%8D%AE-%E5%88%86-%E6%9E%90/clip_image016.jpg" class="">  <img src="/2024/03/06/Honor-of-Kings-%E6%95%B0-%E6%8D%AE-%E5%88%86-%E6%9E%90/clip_image018.jpg" class="">  <img src="/2024/03/06/Honor-of-Kings-%E6%95%B0-%E6%8D%AE-%E5%88%86-%E6%9E%90/clip_image020.jpg" class="">  <img src="/2024/03/06/Honor-of-Kings-%E6%95%B0-%E6%8D%AE-%E5%88%86-%E6%9E%90/clip_image022.jpg" class="">  <img src="/2024/03/06/Honor-of-Kings-%E6%95%B0-%E6%8D%AE-%E5%88%86-%E6%9E%90/clip_image024.jpg" class="">  <img src="/2024/03/06/Honor-of-Kings-%E6%95%B0-%E6%8D%AE-%E5%88%86-%E6%9E%90/clip_image026.jpg" class=""> <h1 id="6-系统测试"><a href="#6-系统测试" class="headerlink" title="6. 系统测试"></a>6. 系统测试</h1><h2 id="6-1测试用例"><a href="#6-1测试用例" class="headerlink" title="6.1测试用例"></a>6.1测试用例</h2><p><strong>HiveTest.java</strong></p> <img src="/2024/03/06/Honor-of-Kings-%E6%95%B0-%E6%8D%AE-%E5%88%86-%E6%9E%90/clip_image028.jpg" class=""> <p><strong>Local_WebTest.java</strong></p> <img src="/2024/03/06/Honor-of-Kings-%E6%95%B0-%E6%8D%AE-%E5%88%86-%E6%9E%90/clip_image030.jpg" class=""> <p> <strong>MySQLTest</strong></p>  <p><strong>yumin_WebTest</strong></p> <img src="/2024/03/06/Honor-of-Kings-%E6%95%B0-%E6%8D%AE-%E5%88%86-%E6%9E%90/clip_image034.jpg" class=""> <h2 id="6-2-测试结果"><a href="#6-2-测试结果" class="headerlink" title="6.2 测试结果"></a>6.2 测试结果</h2><p>测试用例皆成功通过：</p> <img src="/2024/03/06/Honor-of-Kings-%E6%95%B0-%E6%8D%AE-%E5%88%86-%E6%9E%90/clip_image036.jpg" class="">  <img src="/2024/03/06/Honor-of-Kings-%E6%95%B0-%E6%8D%AE-%E5%88%86-%E6%9E%90/clip_image038.jpg" class=""> <h1 id="7-实训心得"><a href="#7-实训心得" class="headerlink" title="7. 实训心得"></a>7. 实训心得</h1><h2 id="7-1设计体会"><a href="#7-1设计体会" class="headerlink" title="7.1设计体会"></a>7.1设计体会</h2><p>用户友好性至关重要： 王者荣耀战力系统应该始终以用户为中心。在界面设计方面，我们应该追求简单、直观的用户界面，以确保玩家能够轻松地查看战力数据。同时，为了提供更好的用户体验，系统应该提供数据可视化功能，例如图表和图形，以帮助玩家更清晰地理解数据。</p><p>数据安全和隐私保护是首要任务： 尽管玩家只能查看数据，但系统必须严格遵守数据隐私和安全性的最佳实践。确保数据的保密性和完整性对于用户信任和系统声誉至关重要。因此，必须采用强大的身份验证、访问控制和数据加密措施。</p><p>灵活性和扩展性： 我们应该设计系统以支持未来的扩展和功能增加。游戏环境和需求可能会不断变化，因此系统的架构应该能够容纳新的数据源和功能，而不需要进行大规模的修改。</p><h2 id="7-2程序创新"><a href="#7-2程序创新" class="headerlink" title="7.2程序创新"></a>7.2程序创新</h2><p>智能数据分析： 除了提供基本的数据查询功能，系统可以采用机器学习和数据挖掘技术，以识别潜在的游戏趋势和玩家建议。这种智能分析可以帮助游戏开发者更好地了解游戏平衡问题，并采取相应的措施进行优化。</p><p>自动化数据同步： 为了确保战力数据的实时性，可以实现自动化数据同步机制，以定期从游戏服务器获取最新的数据。这种自动化流程可以减轻管理员的工作负担，同时确保数据的及时性。</p><p>用户反馈集成： 创新的想法可以包括用户反馈集成，允许玩家提供反馈和建议。这些反馈可以用于改进系统，使其更符合玩家的期望和需求。</p><p>数据可视化： 使用创新的数据可视化技术，例如交互式图表和热力图，可以帮助玩家更好地理解战力数据。这种可视化可以让玩家更容易发现趋势和模式。</p><h2 id="7-3-收获总结及不足之处"><a href="#7-3-收获总结及不足之处" class="headerlink" title="7.3 收获总结及不足之处"></a>7.3 收获总结及不足之处</h2><p>​在这次的项目中，我主要负责后端开发的工作，项目的目标是构建一个基于大数据平台的数据存储和分析系统。具体来说，我的工作职责包括了选择和配置技术栈，管理数据存储，解决CORS跨域问题，进行后端测试，并确保数据以JSON格式传输到前端。工作职责在项目中，我广泛使用了以下技术和工具：技术栈选择和架构设计： 我负责选择和配置了Spring框架，采用了分层架构的思想，将项目划分为Dao层、Service层、Web层和实体类部分，以提高代码的可维护性和可扩展性。数据管理： 项目要求将数据分为本地MySQL和Hive两部分进行管理，我成功地实现了这一任务，确保数据的高效管理和存储。</p><p>​CORS问题解决： 为了解决前后端之间的CORS跨域问题，我深入研究了该问题，并使用Spring Boot的注解来配置CORS策略，确保前端能够安全地访问后端数据。后端测试： 我使用Postman进行后端测试，以验证代码的正确性，并确保数据以JSON格式传输给前端。</p><p>​这个项目为我提供了深入了解大数据平台和Hive的机会。之前，只是通过课堂的演示来学习这些技术，而在项目中，我能够亲自实践和应用它们，这对我的技能水平提升非常有帮助。此外，通过处理前后端数据传输，我也获得了更多的实操经验，提高了技能水平。</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>饮识分子--中药材前后端分离系统设计</title>
    <link href="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    <url>/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><h2 id="1-1功能"><a href="#1-1功能" class="headerlink" title="1.1功能"></a>1.1功能</h2><p>本系统前后端分离，可以实现的功能简述如下<br> <strong>登录：</strong>从数据库中查询是否存在该用户，只有后端返回存在时才能进入系统</p><p><strong>注册：</strong>首先验证是否已存在该用户，存在提示错误，当符合要求后将数据添加到数据库中</p><p><strong>主页：</strong>一个简单的显示界面，当用户正常登录时，将用户名显示在右上角，即传值的实现</p><p><strong>用户管理：</strong>分为管理员和普通用户，管理员划分权限，可以实现不同功能。因为逻辑一致，用户的数据比较多，登录验证时，以用户user数据库进行数据验证。可以进行用户的增删改查，批量删除，条件搜索，并且提供数据的上传下载，具体内容在第三部分详细介绍。</p><p><strong>中药管理：</strong>功能逻辑与用户管理有类似处，依据中药表项进行增加，实现中药材的增删改查，多条件模糊查询，批量的数据删除，也包括中药表格的EXCEL导入导出。</p><p><strong>附近药材：</strong>集成高德地图API，进行点标记和窗口数据显示，根据实际情况在定位的周围查看最近的地方有哪些中药。</p><h2 id="1-2作用"><a href="#1-2作用" class="headerlink" title="1.2作用"></a>1.2作用</h2><p>中药管理系统是为了加强中药管理，以便更好地对药品进行监督和管理，使售药机构人员更加高效、准确的完成工作。本系统主要包含系统用户管理模块、药品管理模块、个人信息管理模块、高德地图显示附近中药模块。中药管理系统是以合理、全面、准确的药品编码体系为基础，提供了对中药名称、功效作用、临床应用、化学成分、价格的全面管理，统一的药价管理机制规范了药品的价格。系统能随时提供药库的库存、药品的消耗，还能根据现有库存提供采购计划或应暂停采购的药品清单，以提高资金的利用率，避免不必要的损失，方便快捷的对药基本信息及用户管理员基本信息进行定期的更新和删除等管理。</p><h2 id="1-3开发背景"><a href="#1-3开发背景" class="headerlink" title="1.3开发背景"></a>1.3开发背景</h2><p>在全球数字化的大背景下，“互联网+中医药”发展势在必行。“互联网+中医药”成为传统中医药在新时期转型发展的共识，加之国家多项利好政策的推动，技术的深化发展，疫情影响等因素，都为传统中医药与数字融合发展提供了可能与先决条件。中药科普大众化及人才培养专业化，有助于改善、解决中医药当前面临的发展问题，全面提速向前。如何利用现代信息技术使企业拥有快速、高效的市场反映能力和高度的效率，已是医药经营企业特别关心的问题。由此建立了一个功能齐备的药库管理系统，实现规范化、自动化，从而达到提高管理的效率。</p><p>本系统开发设计思想是实现药品管理的数字化。采用现有软硬件环境，提高系统开发水平和应用效果。满足日常管理的需要，操作过程中能够直观、方便的满足管理的要求。系统采用模块化程序设计方法，既便于系统功能的各种组合，又便于技术维护人员的补充、维护。系统具备数据库维护功能，能够及时根据用户需求进行数据的添加、删除、修改等操作。</p><h1 id="2-开发工具介绍"><a href="#2-开发工具介绍" class="headerlink" title="2. 开发工具介绍"></a>2. 开发工具介绍</h1><p>代码编写使用的是IntelliJ IDEA 2021.3.2，常用的软件，这里就不过多介绍了，主要介绍前端后端及数据库用到的一些软件和工具。</p><h2 id="2-1前端"><a href="#2-1前端" class="headerlink" title="2.1前端"></a>2.1前端</h2><p><strong>Vue2.0：</strong>Vue.js是一款流行的JavaScript前端框架，旨在更好地组织与简化Web开发。Vue所关注的核心是MVC模式中的视图层，同时，它也能方便地获取数据更新，并通过组件内部特定的方法实现视图与模型的交互。</p><p><strong>Element：</strong>Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库。</p><p><strong>高德地图API：</strong>高德Web服务API向开发者提供HTTP接口，开发者可通过这些接口使用各类型的地理数据服务，返回结果支持JSON和XML格式。Web服务API对所有用户开放，不同类型用户可获取不同的数据访问能力。</p><h2 id="2-2-后端"><a href="#2-2-后端" class="headerlink" title="2.2 后端"></a>2.2 后端</h2><p><strong>Spring Boot：</strong>Spring Boot 是所有基于 Spring 开发的项目的起点。Spring Boot 的设计是为了更容易运行 Spring 应用程序并且减少配置文件。Spring Boot不是什么新的框架，它默认配置了很多框架的使用方式，整合了所有的框架。</p><p><strong>Hutool：</strong>Hutool中的工具方法来自每个用户的精雕细琢，它涵盖了Java开发底层代码中的方方面面，它既是大型项目开发中解决小问题的利器，也是小型项目中的效率担当；Hutool是项目中“util”包友好的替代，它节省了开发人员对项目中公用类和公用工具方法的封装时间，使开发专注于业务，同时可以最大限度的避免封装不完善带来的bug。本系统中主要是用来导入导出表格数据和前后端传数据时用到的。</p><h5 id="接口测试——Postman，Swagger"><a href="#接口测试——Postman，Swagger" class="headerlink" title="接口测试——Postman，Swagger"></a>接口测试——Postman，Swagger</h5><p><strong>Postman：</strong>Postman是一个可扩展的API开发和测试协同平台工具，可以快速集成到CI&#x2F;CD管道中。旨在简化测试和开发中的API工作流。Postman 有 workspace 的概念，workspace 分 personal 和 team 类型。Personal workspace 只能自己查看的 API，Team workspace 可添加成员和设置成员权限，成员之间可共同管理 API。</p><p><strong>Swagger：</strong>Swagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。Swagger 的目标是对 REST API 定义一个标准且和语言无关的接口，可以让人和计算机拥有无须访问源码、文档或网络流量监测就可以发现和理解服务的能力。当通过 Swagger 进行正确定义，用户可以理解远程服务并使用最少实现逻辑与远程服务进行交互。与为底层编程所实现的接口类似，Swagger 消除了调用服务时可能会有的猜测。</p><h3 id="2-3-数据库"><a href="#2-3-数据库" class="headerlink" title="**2.3 ** 数据库"></a>**2.3 ** 数据库</h3><p><strong>Navicat Premium：</strong>Navicat是一套数据库管理工具，专为简化数据库的管理及降低系统管理成本而设。Navicat 是以直觉化的图形用户界面而建的，可以安全和简单地创建、组织、访问并共用信息。Navicat Premium 是 Navicat 的产品成员之一，能简单并快速地在各种数据库系统间传输数据，或传输一份指定 SQL 格式及编码的纯文本文件。其他功能包括导入向导、导出向导、查询创建工具、报表创建工具、资料同步、备份、工作计划及更多。</p><p><strong>MySQL：</strong>常用的数据库管理系统，关系型数据库。</p><p><strong>Mybatis-Plus：</strong>MyBatis 是一流的持久化框架，支持自定义 SQL，存储过程和高级映射。MyBatis几乎消除了所有 JDBC 代码和手动设置参数和检索的结果。MyBatis 可以使用简单的 XML 或的注释配置和映射基元，映射接口到数据库记录。<a href="https://so.csdn.net/so/search?q=MyBatis-Plus&spm=1001.2101.3001.7020">MyBatis-Plus</a>是一个MyBatis的增强工具，在MyBatis的基础上只做增强不做改变。封装了对单表的CRUD操作，代码生成、自动分页、逻辑删除、自动填充等功能一应俱全。</p><h1 id="3-设计过程"><a href="#3-设计过程" class="headerlink" title="3. 设计过程"></a>3. 设计过程</h1><h2 id="3-1概要设计"><a href="#3-1概要设计" class="headerlink" title="3.1概要设计"></a>3.1概要设计</h2><p>为了保证系统能够长期、安全、稳定、可靠、高效的运行，中药管理系统应该满足以下的性能需求:</p><h4 id="1、系统处理的准确性和及时性"><a href="#1、系统处理的准确性和及时性" class="headerlink" title="1、系统处理的准确性和及时性"></a>1、系统处理的准确性和及时性</h4><p>系统处理的准确性和及时性是系统的必要性能。在系统设计和开发过程中，要充分考虑系统当前和将来可能承受的工作量，使系统的处理能力和响应时间能够满足对信息处理的需求。</p><h4 id="2、系统的开放性和系统的可扩充性"><a href="#2、系统的开放性和系统的可扩充性" class="headerlink" title="2、系统的开放性和系统的可扩充性"></a>2、系统的开放性和系统的可扩充性</h4><p>中药管理系统在开发过程中，应该充分考虑以后的可扩充性。例如用户查询的需求也会不断的更新和完善。所有这些，都要求系统提供足够的手段进行功能的调整和扩充。而要实现这一点，应通过系统的开放性来完成，既系统应是一个开放系统，只要符合一定的规范，可以简单的加入和减少系统的模块，配置系统的硬件。通过软件的修补、替换完成系统的升级和更新换代。</p><h4 id="3、系统的易用性和易维护性"><a href="#3、系统的易用性和易维护性" class="headerlink" title="3、系统的易用性和易维护性"></a>3、系统的易用性和易维护性</h4><p>中药管理系统是直接面对使用人员的，而使用人员往往对计算机并不非常熟悉。这就要求系统能够提供良好的用户接口，易用的人机交互界面。要实现这一点，就要求系统应该尽量使用用户熟悉的术语和中文信息的界面；针对用户可能出现的使用问题，要提供足够的在线帮助，缩短用户对系统熟悉的过程。</p><h4 id="4、系统的标准性"><a href="#4、系统的标准性" class="headerlink" title="4、系统的标准性"></a>4、系统的标准性</h4><p>系统在设计开发使用过程中都要涉及到很多计算机硬件、软件。所有这些都要符合主流国际、国家和行业标准。</p><h4 id="5、系统的先进性"><a href="#5、系统的先进性" class="headerlink" title="5、系统的先进性"></a>5、系统的先进性</h4><p>目前计算系统的技术发展相当快，做为中药管理系统工程，在系统的生命周期尽量做到系统的先进，充分完成企业信息处理的要求而不至于落后。这一方面通过系统的开放性和可扩充性，不断改善系统的功能完成。另一方面，在系统设计和开发的过程中，应在考虑成本的基础上尽量采用当前主流并先进且有良好发展前途的产品。</p><h4 id="数据库设计："><a href="#数据库设计：" class="headerlink" title="数据库设计："></a><strong>数据库设计：</strong></h4><p>数据库设计有几个范式，一般我们要做到的是第三范式，即数据表中没有冗余字段以及同一个表中的字段没有函数依赖关系。冗余字段即在一个表中已经保存过的信息，在另一个表中就不应该存在，如果需要的话，可以通过表间的关联来得到，函数依赖性就是一个表中的字段间不应该有计算关系，如一个表中有单价字段、数量字段，就不应该有一个总金额字段。如果程序运行过程中需要总金额，可以实时计算。不过在一些较常用的表中，我们可以适当地保留冗余字段，这样，在程序运行过程中可以减少由于表间互相关联而使用速度降低等问题。这就是所谓的第四范式。数据表设计时，最好不要使用用户输入的信息作为主键，每一个数据表自己定义一个主键，添加信息是由程序自动添加，这样就可以减少数据更新时产生的错误。表与表相关联的外键最好是由程序自动生成的主键，这样数据库就比较规范了。另外，数据表设计时一般都应该有一些标志字段，标志字段可以定义成CHAR型。在最初设计时，可能我们没有考虑到的一些情况，在程序后来的开发中，可以通过设计标志字段为不同的值来解决，这样就避免了修改数据库结构。</p><p>数据库初期设计时要谨慎，把所有可能的情况都考虑进去，即使当时没有用到，也要</p><p>将它留在数据库中作为备用字段以便将来扩充。程序一旦开始编码，就应该尽量避免再修改数据库。因为如果数据库结构一旦改变，所有与修改的数据表相关的业务都有可能受到影响，而某些影响还很难看到，这样就容易形成一个恶性循环。错误越改越多，越改越乱，最终导致程序的失败。PB 的数据窗口与其他语言的数据控件不一样，它的很多东西是预编译的。即使你一个模块已经调试无误，但只要数据库结构改动。相应的模块就要重新修改，否则一定会出问题。</p><p><strong>数据字典如下：</strong></p><p>1.用户信息</p><table><thead><tr><th>数据项</th><th>id</th></tr></thead><tbody><tr><td>含义说明</td><td>用户ID</td></tr><tr><td>类型</td><td>int</td></tr></tbody></table><table><thead><tr><th>数据项</th><th>name</th></tr></thead><tbody><tr><td>含义说明</td><td>用户姓名</td></tr><tr><td>类型</td><td>varchar</td></tr><tr><td>长度</td><td>30</td></tr></tbody></table><table><thead><tr><th>数据项</th><th>sex</th></tr></thead><tbody><tr><td>含义说明</td><td>用户性别</td></tr><tr><td>类型</td><td>varchar</td></tr><tr><td>长度</td><td>2</td></tr></tbody></table><table><thead><tr><th>数据项</th><th>age</th></tr></thead><tbody><tr><td>含义说明</td><td>用户年龄</td></tr><tr><td>类型</td><td>int</td></tr></tbody></table><table><thead><tr><th>数据项</th><th>password</th></tr></thead><tbody><tr><td>含义说明</td><td>用户密码</td></tr><tr><td>类型</td><td>varchar</td></tr><tr><td>长度</td><td>255</td></tr></tbody></table><table><thead><tr><th>数据项</th><th>connection</th></tr></thead><tbody><tr><td>含义说明</td><td>用户联系方式</td></tr><tr><td>类型</td><td>varchar</td></tr><tr><td>长度</td><td>255</td></tr></tbody></table><p>2.药品信息</p><table><thead><tr><th>数据项</th><th>id</th></tr></thead><tbody><tr><td>含义说明</td><td>中药编号</td></tr><tr><td>类型</td><td>int</td></tr></tbody></table><table><thead><tr><th>数据项</th><th>name</th></tr></thead><tbody><tr><td>含义说明</td><td>中药名</td></tr><tr><td>类型</td><td>varchar</td></tr><tr><td>长度</td><td>255</td></tr></tbody></table><table><thead><tr><th>数据项</th><th>application</th></tr></thead><tbody><tr><td>含义说明</td><td>功效作用</td></tr><tr><td>类型</td><td>varchar</td></tr><tr><td>长度</td><td>255</td></tr></tbody></table><table><thead><tr><th>数据项</th><th>clinical</th></tr></thead><tbody><tr><td>含义说明</td><td>临床应用</td></tr><tr><td>类型</td><td>varchar</td></tr><tr><td>长度</td><td>255</td></tr></tbody></table><table><thead><tr><th>数据项</th><th>composition</th></tr></thead><tbody><tr><td>含义说明</td><td>化学成分</td></tr><tr><td>类型</td><td>varchar</td></tr><tr><td>长度</td><td>255</td></tr></tbody></table><table><thead><tr><th>数据项</th><th>price</th></tr></thead><tbody><tr><td>含义说明</td><td>价格</td></tr><tr><td>类型</td><td>double</td></tr></tbody></table><p>3.管理员信息</p><table><thead><tr><th>数据项</th><th>id</th></tr></thead><tbody><tr><td>含义说明</td><td>管理员ID</td></tr><tr><td>类型</td><td>int</td></tr></tbody></table><table><thead><tr><th>数据项</th><th>name</th></tr></thead><tbody><tr><td>含义说明</td><td>管理员姓名</td></tr><tr><td>类型</td><td>varchar</td></tr><tr><td>长度</td><td>30</td></tr></tbody></table><table><thead><tr><th>数据项</th><th>password</th></tr></thead><tbody><tr><td>含义说明</td><td>管理员密码</td></tr><tr><td>类型</td><td>varchar</td></tr><tr><td>长度</td><td>30</td></tr></tbody></table><table><thead><tr><th>数据项</th><th>level</th></tr></thead><tbody><tr><td>含义说明</td><td>管理员权限</td></tr><tr><td>类型</td><td>varchar</td></tr><tr><td>长度</td><td>10</td></tr></tbody></table><h2 id="3-2详细设计分析"><a href="#3-2详细设计分析" class="headerlink" title="3.2详细设计分析"></a>3.2详细设计分析</h2><p>系统功能实现分为初始登录注册页面</p><p><strong>3.2.1登录：</strong>后端关联数据库，判断是否符合要求，符合才能正确进入页面，前端进行一个输入框内容的简单校验。同时将用户信息存储到浏览器，以在后面页面可以使用，类似<code>session</code>技术，但是在Vue中实现特别简单，<code>localStorage.setItem(&quot;user&quot;, JSON.stringify(res.data))</code></p><p>即可将数据上传</p><p><code>user:localStorage.getItem(&quot;user&quot;)?JSON.parse(localStorage.getItem(&quot;user&quot;)) : &#123;&#125;</code></p><p>即可获取上一页传来的数据</p><p>  <strong>后端接口控制代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserDTO userDTO)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> userDTO.getName();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> userDTO.getPassword();<br>    <span class="hljs-keyword">if</span> (StrUtil.isBlank(name) || StrUtil.isBlank(password)) &#123;<br>        <span class="hljs-keyword">return</span> Result.error(Constants.CODE_400,<span class="hljs-string">&quot;参数错误&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">UserDTO</span> <span class="hljs-variable">dto</span> <span class="hljs-operator">=</span> userService.login(userDTO);<br>    <span class="hljs-keyword">return</span> Result.success(dto);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>判断是否与数据库一致：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">LOG</span> <span class="hljs-operator">=</span> Log.get();<br><br><span class="hljs-keyword">public</span> UserDTO <span class="hljs-title function_">login</span><span class="hljs-params">(UserDTO userDTO)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">one</span> <span class="hljs-operator">=</span> getUserInfo(userDTO);<br>    <span class="hljs-keyword">if</span> (one != <span class="hljs-literal">null</span>) &#123;<br>        BeanUtil.copyProperties(one, userDTO, <span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> userDTO;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(Constants.CODE_600, <span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.2.2注册：</strong>注册页面只设置了三个参数，用户名，密码，确认密码。前端仅做输入框的值是否为空，内容格式是否符合要求的判断，而后端判断此次注册的用户名密码是否在数据库中已存在，不允许存在两个相同用户名的账号，否则登录时就有返回两个值，无法判断是否正确,后期信息在个人主页中完善即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/register&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">register</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserDTO userDTO)</span> &#123; <span class="hljs-keyword">return</span> userService.register(userDTO); &#125;<br></code></pre></td></tr></table></figure><p><strong>判断是否存在该用户：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> User <span class="hljs-title function_">register</span><span class="hljs-params">(UserDTO userDTO)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">one</span> <span class="hljs-operator">=</span> getUserInfo(userDTO);<br>    <span class="hljs-keyword">if</span> (one == <span class="hljs-literal">null</span>) &#123;<br>        one = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        BeanUtil.copyProperties(userDTO, one, <span class="hljs-literal">true</span>);<br>        save(one);  <span class="hljs-comment">// 把 copy完之后的用户对象存储到数据库</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(Constants.CODE_600, <span class="hljs-string">&quot;用户已存在&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> one;<br>&#125;<br></code></pre></td></tr></table></figure><p>主页包含个人信息，退出系统，用户管理，管理员管理，中药管理，附近药材功能模块。</p><p><strong>3.2.3个人信息：</strong>这里的信息对应登录者的信息，直接从数据库中导入，因为是登录成功后显示页，所以不做是否存在的判断，直接查询数据即可。</p><p><strong>后端接口代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/name/&#123;name&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">findOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String name)</span>&#123;<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    queryWrapper.eq(<span class="hljs-string">&quot;name&quot;</span>,name);<br>    <span class="hljs-keyword">return</span> Result.success(userService.getOne(queryWrapper));<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>数据库查询该账号数据：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> User <span class="hljs-title function_">getUserInfo</span><span class="hljs-params">(UserDTO userDTO)</span> &#123;<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    queryWrapper.eq(<span class="hljs-string">&quot;name&quot;</span>, userDTO.getName());<br>    queryWrapper.eq(<span class="hljs-string">&quot;password&quot;</span>, userDTO.getPassword());<br>    User one;<br>    <span class="hljs-keyword">try</span> &#123;<br>        one = getOne(queryWrapper); <span class="hljs-comment">// 从数据库查询用户信息</span><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        LOG.error(e);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(Constants.CODE_500, <span class="hljs-string">&quot;系统错误&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> one;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.2.4退出系统：简单的返回登录页即可，前端实现。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;el-dropdown-item&gt;<br>  &lt;router-link to=<span class="hljs-string">&quot;/login&quot;</span> style=<span class="hljs-string">&quot;text-decoration: none&quot;</span>&gt;退出系统&lt;/router-link&gt;<br>&lt;/el-dropdown-item&gt;<br></code></pre></td></tr></table></figure><p><strong>3.2.5用户管理：</strong>包含多条件查询，新增数据，批量删除，Excel导入导出功能，分页查询，并且数据实时更新在该页中。<br><strong>分页查询：</strong>基于MyBatis-plus实现，倒序查询方便测试新增是否正常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分页查询:mybatis-plus</span><br><span class="hljs-meta">@GetMapping(&quot;/page&quot;)</span><br><span class="hljs-keyword">public</span> IPage&lt;User&gt; <span class="hljs-title function_">findPage</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Integer pageNum,</span><br><span class="hljs-params">                            <span class="hljs-meta">@RequestParam</span> Integer pageSize,</span><br><span class="hljs-params">                            <span class="hljs-meta">@RequestParam(defaultValue = &quot;&quot;)</span> String name,</span><br><span class="hljs-params">                            <span class="hljs-meta">@RequestParam(defaultValue = &quot;-1&quot;)</span> Integer age,</span><br><span class="hljs-params">                            <span class="hljs-meta">@RequestParam(defaultValue = &quot;&quot;)</span> String password)</span> &#123;<br>    IPage&lt;User&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(pageNum, pageSize);<br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;&quot;</span>.equals(name)) &#123;<br>        queryWrapper.like(<span class="hljs-string">&quot;name&quot;</span>, name);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (age!=-<span class="hljs-number">1</span>) &#123;<br>        queryWrapper.like(<span class="hljs-string">&quot;age&quot;</span>, age);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;&quot;</span>.equals(password)) &#123;<br>        queryWrapper.like(<span class="hljs-string">&quot;password&quot;</span>, password);<br>    &#125;<br>    <span class="hljs-comment">//倒序</span><br>    queryWrapper.orderByDesc(<span class="hljs-string">&quot;id&quot;</span>);<br>    <span class="hljs-keyword">return</span> userService.page(page, queryWrapper);<br>&#125;<br></code></pre></td></tr></table></figure><p>数据更新时的接口实现：如果有id，就是对数据库内容的更新，如果没有id就是新增数据。原本使用Mybatis实现，较为复杂，后续删除批量删除查询也麻烦。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper,User&gt; &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">(User user)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(user.getId()==<span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">return</span> save(user);<span class="hljs-comment">// puls 提供的</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">return</span> updateById(user);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>调整成Mybatis-plus    这样查询，插入，更新，多条件查询只需要用自带的即可。 注释部分都不需要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.njucm.javaks.mapper;<br><br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> edu.njucm.javaks.entity.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.*;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br><span class="hljs-comment">//    @Select(&quot;SELECT * FROM user&quot;)</span><br><span class="hljs-comment">//    List&lt;User&gt; findAll();</span><br><span class="hljs-comment">//    @Insert(&quot;INSERT into user(name,sex,age,password) VALUES (#&#123;name&#125;, #&#123;sex&#125;, #&#123;age&#125;, #&#123;password&#125;)&quot;)</span><br><span class="hljs-comment">//    int insert(User user);</span><br><span class="hljs-comment">//    int update(User user);</span><br><span class="hljs-comment">//    @Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-comment">//    Integer deleteById(@Param(&quot;id&quot;) Integer id);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    @Select(&quot;SELECT * FROM user where name like #&#123;name&#125; limit #&#123;pageNum&#125;,#&#123;pageSize&#125;&quot;)</span><br><span class="hljs-comment">//    List&lt;User&gt; selectPage(Integer pageNum,Integer pageSize,String name);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    @Select(&quot;SELECT count(*) from user where name like concat(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)&quot;)</span><br><span class="hljs-comment">//    Integer selectTotal(String name);</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Control接口：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.list();<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.saveUser(user);<br>    &#125;<br><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.removeById(id);<br>    &#125;<br><br><span class="hljs-comment">//批量删除</span><br>    <span class="hljs-meta">@PostMapping(&quot;/del/batch&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deleteBatch</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;Integer&gt; ids)</span> &#123; <span class="hljs-comment">// [1,2,3]</span><br>        <span class="hljs-keyword">return</span> userService.removeByIds(ids);<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>3.2.6Excel导入导出：</strong>由Hutool工具实现</p><ol><li><p>从数据库查询出所有的数据</p></li><li><p>通过工具类创建writer 写出到磁盘路径</p></li><li><p>在内存操作，写出到浏览器</p></li><li><p>一次性写出list内的对象到excel，使用默认样式，强制输出标题</p></li><li><p>设置浏览器响应的格式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 导出接口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/export&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">export</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 从数据库查询出所有的数据</span><br>        List&lt;User&gt; list = userService.list();<br>        <span class="hljs-comment">// 通过工具类创建writer 写出到磁盘路径</span><br><span class="hljs-comment">//        ExcelWriter writer = ExcelUtil.getWriter(filesUploadPath + &quot;/用户信息.xlsx&quot;);</span><br>        <span class="hljs-comment">// 在内存操作，写出到浏览器</span><br>        <span class="hljs-type">ExcelWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> ExcelUtil.getWriter(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//自定义标题别名</span><br>        writer.addHeaderAlias(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;ID号&quot;</span>);<br>        writer.addHeaderAlias(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;姓名&quot;</span>);<br>        writer.addHeaderAlias(<span class="hljs-string">&quot;sex&quot;</span>, <span class="hljs-string">&quot;性别&quot;</span>);<br>        writer.addHeaderAlias(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;年龄&quot;</span>);<br>        writer.addHeaderAlias(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;密码&quot;</span>);<br>        writer.addHeaderAlias(<span class="hljs-string">&quot;connection&quot;</span>, <span class="hljs-string">&quot;联系方式&quot;</span>);<br><br>        <span class="hljs-comment">// 一次性写出list内的对象到excel，使用默认样式，强制输出标题</span><br>        writer.write(list, <span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">// 设置浏览器响应的格式</span><br>        response.setContentType(<span class="hljs-string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> URLEncoder.encode(<span class="hljs-string">&quot;用户信息&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + fileName + <span class="hljs-string">&quot;.xlsx&quot;</span>);<br><br>        <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>        writer.flush(out, <span class="hljs-literal">true</span>);<br>        out.close();<br>        writer.close();<br>    &#125;<br></code></pre></td></tr></table></figure><p>导入就是javabean的方式读取Excel内的对象,实现相对简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * excel 导入</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PostMapping(&quot;/import&quot;)</span><br><span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">imp</span><span class="hljs-params">(MultipartFile file)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> file.getInputStream();<br>    <span class="hljs-type">ExcelReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> ExcelUtil.getReader(inputStream);<br>    <span class="hljs-comment">//javabean的方式读取Excel内的对象，但是要求表头必须是英文，跟javabean的属性要对应起来</span><br>    List&lt;User&gt; list = reader.readAll(User.class);<br>    userService.saveBatch(list);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.2.7附近中药：</strong>可以查询附近的中药点及该处有哪些中药，使用高德Web服务API实现，查询到经纬度后进行点标记和单击窗口显示内容即可。</p><p><strong>文本定义：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">content1</span> <span class="hljs-operator">=</span> [<br>    <span class="hljs-string">&quot;&lt;div style=&#x27;font-size: 14px; color: red; width:120px; height: 25px&#x27;&gt;南京中医药大学&lt;/div&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;&lt;div style=&#x27;font-size: 12px; color: blue;&#x27;&gt;灵芝，当归，芦根&lt;/div&gt;&quot;</span><br>]<br></code></pre></td></tr></table></figure><p><strong>显示地图：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">mounted() &#123;<br>  <span class="hljs-type">var</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMap</span>.Map(<span class="hljs-string">&quot;container&quot;</span>, &#123;<br>    zoom: <span class="hljs-number">13</span>,<br>    center: [<span class="hljs-number">118.796624</span>,<span class="hljs-number">32.059344</span>]<br>  &#125;)<br></code></pre></td></tr></table></figure><p><strong>窗口初始化：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">infoWindow1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMap</span>.InfoWindow(&#123;<br>  anchor: <span class="hljs-string">&#x27;top-right&#x27;</span>,<br>  content: content1.join(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>点击事情设置：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">clickHandler1</span> <span class="hljs-operator">=</span> function (e) &#123;<br>  infoWindow1.open(map,[<span class="hljs-number">118.945804</span>,<span class="hljs-number">32.102836</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>初始化点标记，并加入地图</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">marker1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMap</span>.Marker(&#123;<br>  position: <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMap</span>.LngLat(<span class="hljs-number">118.945804</span>,<span class="hljs-number">32.102836</span>),<br>  title:<span class="hljs-string">&#x27;南京中医药大学&#x27;</span><br>&#125;)<br>marker1.on(<span class="hljs-string">&#x27;click&#x27;</span>,clickHandler1);<br>map.add(marker1);<br></code></pre></td></tr></table></figure><p><strong>3.2.8自定义全局异常处理：这样报错提示时可以看出来是哪步有问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义异常</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br>    <span class="hljs-keyword">private</span> String code;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServiceException</span><span class="hljs-params">(String code, String msg)</span> &#123;<br>        <span class="hljs-built_in">super</span>(msg);<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.njucm.javaks.common.Result;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 如果抛出的的是ServiceException，则调用该方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> se 业务异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Result</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(ServiceException.class)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">handle</span><span class="hljs-params">(ServiceException se)</span>&#123;<br>        <span class="hljs-keyword">return</span> Result.error(se.getCode(), se.getMessage());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.2.9接口测试：</strong>选用Swagger和Postman，前期Swagger用的比较多。</p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image043.jpg" class=""> <p>之后虽然配置的Swagger比较方便，但是Postman功能比较全面，所以用Postman来做后端接口测试。</p><img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image045.jpg" class=""> <p><strong>比如：</strong>上传文件测试，可以直接在Postman里实现，选择Post，file即可，能直接看到返回值，然后在数据库中验证即可，确保无误后再传入前端。</p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image047.jpg" class=""> <p><strong>3.2.10前端网页：</strong>配置路由，封装导航栏和顶部栏，包含的版块作为子路由，这样通过点击标签时只更换需要的那部分内容，不影响其他部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">const</span> <span class="hljs-variable">routes</span> <span class="hljs-operator">=</span> [<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;Manage&#x27;</span>,<br>    component: () =&gt; <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="hljs-string">&#x27;../views/Manage.vue&#x27;</span>),<br>    redirect: <span class="hljs-string">&quot;/home&quot;</span>,<br>    children : [<br>      &#123;path: <span class="hljs-string">&#x27;user&#x27;</span>,name: <span class="hljs-string">&#x27;User&#x27;</span>,component: ()=&gt;<span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/User.vue&#x27;</span>)&#125;,<br>      &#123;path: <span class="hljs-string">&#x27;home&#x27;</span>,name: <span class="hljs-string">&#x27;Home&#x27;</span>,component: ()=&gt;<span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/Home.vue&#x27;</span>)&#125;,<br>      &#123;path: <span class="hljs-string">&#x27;medicine&#x27;</span>,name: <span class="hljs-string">&#x27;Medicine&#x27;</span>,component: ()=&gt;<span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/Medicine.vue&#x27;</span>)&#125;,<br>      &#123;path: <span class="hljs-string">&#x27;admin&#x27;</span>,name: <span class="hljs-string">&#x27;admin&#x27;</span>,component: ()=&gt;<span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/Admin.vue&#x27;</span>)&#125;,<br>      &#123;path: <span class="hljs-string">&#x27;person&#x27;</span>,name: <span class="hljs-string">&#x27;person&#x27;</span>,component: ()=&gt;<span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/Person.vue&#x27;</span>)&#125;,<br>      &#123;path: <span class="hljs-string">&#x27;map&#x27;</span>,name: <span class="hljs-string">&#x27;map&#x27;</span>,component: ()=&gt;<span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/map.vue&#x27;</span>)&#125;,<br>    ]<br>  &#125;,<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;Login&#x27;</span>,<br>    component: () =&gt; <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/Login.vue&#x27;</span>),<br>  &#125;,<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/register&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;Register&#x27;</span>,<br>    component: () =&gt; <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/Register.vue&#x27;</span>),<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p><strong>3.2.11数据库：</strong></p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image051.jpg" class="">  <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image053.jpg" class="">  <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image055.jpg" class="">  <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image057.jpg" class="">  <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image059.jpg" class="">  <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image061.jpg" class=""> <h1 id="4-调试"><a href="#4-调试" class="headerlink" title="4. 调试"></a>4. 调试</h1><h2 id="4-1运行环境配置"><a href="#4-1运行环境配置" class="headerlink" title="4.1运行环境配置"></a>4.1运行环境配置</h2><p><strong>4.1.1系统配置</strong>    配置跨域资源共享（CORS）支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.CorsFilter;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CorsConfig</span> &#123;<br><br>    <span class="hljs-comment">// 当前跨域请求最大有效时长。这里默认1天</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">MAX_AGE</span> <span class="hljs-operator">=</span> <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CorsFilter <span class="hljs-title function_">corsFilter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">UrlBasedCorsConfigurationSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlBasedCorsConfigurationSource</span>();<br>        <span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">corsConfiguration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();<br>        corsConfiguration.addAllowedOrigin(<span class="hljs-string">&quot;http://localhost:8080&quot;</span>); <span class="hljs-comment">// 1 设置访问源地址</span><br>        corsConfiguration.addAllowedHeader(<span class="hljs-string">&quot;*&quot;</span>); <span class="hljs-comment">// 2 设置访问源请求头</span><br>        corsConfiguration.addAllowedMethod(<span class="hljs-string">&quot;*&quot;</span>); <span class="hljs-comment">// 3 设置访问源请求方法</span><br>        corsConfiguration.setMaxAge(MAX_AGE);<br>        source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, corsConfiguration); <span class="hljs-comment">// 4 对接口配置跨域设置</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsFilter</span>(source);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4.1.2 Mybatis配置</strong>    配置MyBatis-Plus插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;<br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(&quot;edu.njucm.javaks.mapper&quot;)</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>**4.1.3 Swagger配置 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.oas.annotations.EnableOpenApi;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.service.Contact;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableOpenApi</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建API应用</span><br><span class="hljs-comment">     * apiInfo() 增加API相关信息</span><br><span class="hljs-comment">     * 通过select()函数返回一个ApiSelectorBuilder实例,用来控制哪些接口暴露给Swagger来展现，</span><br><span class="hljs-comment">     * 本例采用指定扫描的包路径来定义指定要建立API的目录。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">restApi</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .groupName(<span class="hljs-string">&quot;标准接口&quot;</span>)<br>                .apiInfo(apiInfo(<span class="hljs-string">&quot;Spring Boot中使用Swagger2构建RESTful APIs&quot;</span>, <span class="hljs-string">&quot;1.0&quot;</span>))<br>                .useDefaultResponseMessages(<span class="hljs-literal">true</span>)<br>                .forCodeGeneration(<span class="hljs-literal">false</span>)<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;edu.njucm.javaks.controller&quot;</span>))<br>                .paths(PathSelectors.any())<br>                .build();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建该API的基本信息</span><br><span class="hljs-comment">     * 访问地址：http://ip:port/swagger-ui.html</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">(String title, String version)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(title)<br>                .description(<span class="hljs-string">&quot;饮识分子: localhost:8080&quot;</span>)<br>                .termsOfServiceUrl(<span class="hljs-string">&quot;localhost:8080&quot;</span>)<br>                .version(version)<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4.1.4</strong> <strong>异常处理参数：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Constants</span> &#123;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">CODE_200</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;200&quot;</span>; <span class="hljs-comment">//成功</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">CODE_401</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;401&quot;</span>;  <span class="hljs-comment">// 权限不足</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">CODE_400</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;400&quot;</span>;  <span class="hljs-comment">// 参数错误</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">CODE_500</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;500&quot;</span>; <span class="hljs-comment">// 系统错误</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">CODE_600</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;600&quot;</span>; <span class="hljs-comment">// 其他业务异常</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4.1.5</strong> <strong>结果集：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 接口统一返回包装类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String code;<br>    <span class="hljs-keyword">private</span> String msg;<br>    <span class="hljs-keyword">private</span> Object data;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(Constants.CODE_200, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">(Object data)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(Constants.CODE_200, <span class="hljs-string">&quot;&quot;</span>, data);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">error</span><span class="hljs-params">(String code, String msg)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(code, msg, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">error</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(Constants.CODE_500, <span class="hljs-string">&quot;系统错误&quot;</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4.1.6 pom.xml</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br>    &lt;parent&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>        &lt;version&gt;<span class="hljs-number">2.6</span><span class="hljs-number">.7</span>&lt;/version&gt;<br>        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;<br>    &lt;/parent&gt;<br>    &lt;groupId&gt;edu.njucm&lt;/groupId&gt;<br>    &lt;artifactId&gt;javaks&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">0.0</span><span class="hljs-number">.1</span>-SNAPSHOT&lt;/version&gt;<br>    &lt;name&gt;javaks&lt;/name&gt;<br>    &lt;description&gt;javaks&lt;/description&gt;<br>    &lt;properties&gt;<br>        &lt;java.version&gt;<span class="hljs-number">17</span>&lt;/java.version&gt;<br>    &lt;/properties&gt;<br>    &lt;dependencies&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">2.2</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;mysql&lt;/groupId&gt;<br>            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>            &lt;scope&gt;runtime&lt;/scope&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- https:<span class="hljs-comment">//mvnrepository.com/artifact/cn.hutool/hutool-all --&gt;</span><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;cn.hutool&lt;/groupId&gt;<br>            &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">5.8</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;<br>            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">3.5</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br>&lt;!--        &lt;dependency&gt;--&gt;<br>&lt;!--            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;--&gt;<br>&lt;!--            &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;--&gt;<br>&lt;!--            &lt;version&gt;<span class="hljs-number">3.5</span><span class="hljs-number">.1</span>&lt;/version&gt;--&gt;<br>&lt;!--        &lt;/dependency&gt;--&gt;<br>&lt;!--        &lt;dependency&gt;--&gt;<br>&lt;!--            &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;--&gt;<br>&lt;!--            &lt;artifactId&gt;velocity&lt;/artifactId&gt;--&gt;<br>&lt;!--            &lt;version&gt;<span class="hljs-number">1.7</span>&lt;/version&gt;--&gt;<br>&lt;!--        &lt;/dependency&gt;--&gt;<br>        &lt;!-- https:<span class="hljs-comment">//mvnrepository.com/artifact/io.springfox/springfox-boot-starter --&gt;</span><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;io.springfox&lt;/groupId&gt;<br>            &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">3.0</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>&lt;!--        数据库--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;cn.hutool&lt;/groupId&gt;<br>            &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">5.7</span><span class="hljs-number">.20</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>            &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">4.1</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>    &lt;/dependencies&gt;<br><br>    &lt;build&gt;<br>        &lt;plugins&gt;<br>            &lt;plugin&gt;<br>                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;<br>                &lt;configuration&gt;<br>                    &lt;excludes&gt;<br>                        &lt;exclude&gt;<br>                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>                        &lt;/exclude&gt;<br>                    &lt;/excludes&gt;<br>                &lt;/configuration&gt;<br>            &lt;/plugin&gt;<br>        &lt;/plugins&gt;<br>    &lt;/build&gt;<br><br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><p><strong>4.1.7</strong> <strong>路由配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> Vue from <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> VueRouter from <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> HomeView from <span class="hljs-string">&#x27;../views/Manage.vue&#x27;</span><br><br>Vue.use(VueRouter)<br><br><span class="hljs-type">const</span> <span class="hljs-variable">routes</span> <span class="hljs-operator">=</span> [<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;Manage&#x27;</span>,<br>    component: () =&gt; <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="hljs-string">&#x27;../views/Manage.vue&#x27;</span>),<br>    redirect: <span class="hljs-string">&quot;/home&quot;</span>,<br>    children : [<br>      &#123;path: <span class="hljs-string">&#x27;user&#x27;</span>,name: <span class="hljs-string">&#x27;User&#x27;</span>,component: ()=&gt;<span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/User.vue&#x27;</span>)&#125;,<br>      &#123;path: <span class="hljs-string">&#x27;home&#x27;</span>,name: <span class="hljs-string">&#x27;Home&#x27;</span>,component: ()=&gt;<span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/Home.vue&#x27;</span>)&#125;,<br>      &#123;path: <span class="hljs-string">&#x27;medicine&#x27;</span>,name: <span class="hljs-string">&#x27;Medicine&#x27;</span>,component: ()=&gt;<span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/Medicine.vue&#x27;</span>)&#125;,<br>      &#123;path: <span class="hljs-string">&#x27;admin&#x27;</span>,name: <span class="hljs-string">&#x27;admin&#x27;</span>,component: ()=&gt;<span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/Admin.vue&#x27;</span>)&#125;,<br>      &#123;path: <span class="hljs-string">&#x27;person&#x27;</span>,name: <span class="hljs-string">&#x27;person&#x27;</span>,component: ()=&gt;<span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/Person.vue&#x27;</span>)&#125;,<br>      &#123;path: <span class="hljs-string">&#x27;map&#x27;</span>,name: <span class="hljs-string">&#x27;map&#x27;</span>,component: ()=&gt;<span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/map.vue&#x27;</span>)&#125;,<br>    ]<br>  &#125;,<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;Login&#x27;</span>,<br>    component: () =&gt; <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/Login.vue&#x27;</span>),<br>  &#125;,<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/register&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;Register&#x27;</span>,<br>    component: () =&gt; <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/Register.vue&#x27;</span>),<br>  &#125;<br>]<br><br><span class="hljs-type">const</span> <span class="hljs-variable">router</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  mode: <span class="hljs-string">&#x27;history&#x27;</span>,<br>  base: process.env.BASE_URL,<br>  routes<br>&#125;)<br><br>export <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p><strong>4.1.8 Request和reponse拦截器配置（后端接口8082）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> axios from <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-type">const</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> axios.create(&#123;<br>    baseURL: <span class="hljs-string">&#x27;http://localhost:8082&#x27;</span>,<br>    timeout: <span class="hljs-number">5000</span><br>&#125;)<br><br><span class="hljs-comment">// request 拦截器</span><br><span class="hljs-comment">// 可以自请求发送前对请求做一些处理</span><br><span class="hljs-comment">// 比如统一加token，对请求参数统一加密</span><br>request.interceptors.request.use(config =&gt; &#123;<br>    config.headers[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;application/json;charset=utf-8&#x27;</span>;<br><br>    <span class="hljs-comment">// config.headers[&#x27;token&#x27;] = user.token;  // 设置请求头</span><br>    <span class="hljs-keyword">return</span> config<br>&#125;, error =&gt; &#123;<br>    <span class="hljs-keyword">return</span> Promise.reject(error)<br>&#125;);<br><br><span class="hljs-comment">// response 拦截器</span><br><span class="hljs-comment">// 可以在接口响应后统一处理结果</span><br>request.interceptors.response.use(<br>    response =&gt; &#123;<br>        <span class="hljs-type">let</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> response.data;<br>        <span class="hljs-comment">// 如果是返回的文件</span><br>        <span class="hljs-keyword">if</span> (response.config.responseType === <span class="hljs-string">&#x27;blob&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> res<br>        &#125;<br>        <span class="hljs-comment">// 兼容服务端返回的字符串数据</span><br>        <span class="hljs-keyword">if</span> (typeof res === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>            res = res ? JSON.parse(res) : res<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;,<br>    error =&gt; &#123;<br>        console.log(<span class="hljs-string">&#x27;err&#x27;</span> + error) <span class="hljs-comment">// for debug</span><br>        <span class="hljs-keyword">return</span> Promise.reject(error)<br>    &#125;<br>)<br><br>export <span class="hljs-keyword">default</span> request<br></code></pre></td></tr></table></figure><p><strong>4.1.9 gloable.css(格式配置文件)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">html.body.div&#123;<span class="hljs-comment">/*边框设为0*/</span><br>    margin: <span class="hljs-number">0</span>;<br>    padding: <span class="hljs-number">0</span>;<br>&#125;<br>html.body&#123;<br>    height: <span class="hljs-number">100</span>%;<br>&#125;<br><br>.ml-<span class="hljs-number">5</span> &#123;<br>    margin-left: 5px;<br>&#125;<br>.mr-<span class="hljs-number">5</span> &#123;<br>    margin-right: 5px;<br>&#125;<br>.pd-<span class="hljs-number">10</span> &#123;<br>    padding: 10px <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4.1.10 Index.html引入高德地图</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">  &lt;/body&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;https://webapi.amap.com/maps?v=2.0&amp;key=、、、、、、、、、、&quot;</span>&gt;&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="4-2调试"><a href="#4-2调试" class="headerlink" title="4.2调试"></a>4.2调试</h2><p><strong>4.2.1登录</strong></p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image085.jpg" class=""> <p><strong>实现：</strong>登录验证逻辑连接数据库，用户名对应name，密码对应password</p><p>只有当用户名密码输入正确时才能正确进入，同时将数据传到主页里使用。</p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image087.jpg" class=""> <p><strong>异常处理：</strong></p><ol><li><p>为空时提示(前端验证)</p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image089.jpg" class=""> </li><li><p>账号密码不正确时，提示用户名密码错误</p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20240306131414739.png" class=""> </li><li><p>简单的字符长度要求(前端验证)</p>   <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20240306131420825.png" class=""></li></ol><p><strong>4.2.2注册</strong></p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image095.jpg" class=""> <p>异常处理：</p><p>   1.密码输入不正确</p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20240306131504552.png" class=""> <ol start="2"><li>数据库中已存在该账号的用户</li></ol> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20240306131508361.png" class="">  <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20240306131512753.png" class=""> <p>成功注册</p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20240306131559944.png" class=""> <p>数据库中更新</p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20240306131607754.png" class=""> <p><strong>4.2.3主页</strong></p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20240306131640037.png" class=""> <p>用王羲之的账号登录，系统会将用户名的值传递到主页右上角。</p><p>这里的实现相比课本中学到的简单一些。只需要将数据封装一下两个页面post，request接口很简单就能使用。<code>&#123;&#123;user.name&#125;&#125;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">user</span>: <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;user&quot;</span>) ? <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;user&quot;</span>)) : &#123;&#125;<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>进入主页后，右上角由登录传值获取，头像是从网页上直接获取的，原本设想是同步不同头像，但是逻辑和名字是一样的，这是的图片采用src：地址下载，就没有单独设置，实际系统完善中可以在数据库再加入一个头像属性。 </p><p><strong>4.2.4个人信息</strong></p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image110.jpg" class=""> <p>调出数据库的内容显示，并可以进行内容的更新。</p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image112.jpg" class=""> <p><strong>4.2.5用户管理</strong><br>新增数据</p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image118.gif" class=""> <p>修改数据</p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image120.jpg" class=""> <p>删除数据</p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image124.gif" class=""> <p>多条件模糊查询</p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image126.jpg" class=""> <p>批量删除[新增了五个脏数据]</p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image128.jpg" class="">  <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image130.jpg" class=""> <p>导出数据</p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image132.jpg" class=""> <p>导入数据</p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image136.jpg" class="">  <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image138.jpg" class="">  <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image140.jpg" class=""> <p>分页查询功能：显示10&#x2F;20条数据</p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image142.jpg" class="">  <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image144.jpg" class=""> <p><strong>4.2.6附近药材：</strong></p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image146.jpg" class=""> <p>南京中医药大学点：</p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image148.jpg" class=""> <p>泰康鼓楼医院点：</p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image150.jpg" class=""> <p>南京中医药大学汉中门校区点：</p> <img src="/2024/03/06/%E9%A5%AE%E8%AF%86%E5%88%86%E5%AD%90-%E4%B8%AD%E8%8D%AF%E6%9D%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/clip_image152.jpg" class=""> <h1 id="5-设计总结"><a href="#5-设计总结" class="headerlink" title="5. 设计总结"></a>5. 设计总结</h1><h2 id="5-1体会"><a href="#5-1体会" class="headerlink" title="5.1体会"></a>5.1体会</h2><p>这次系统的完成中，使用SpringBoot后端+Vue前端完成。在完成过程中学习到的东西非常多，新技术带来的是更方便更美观的界面设计，但是同样带来的是要涉及的东西多。下面我对完成的过程做一个总结：从最开始前端界面完善用到了Element，这个网站是我完成整个设计的基础，它提供了各种模块的示例代码，如何实现，实现后的功能如何，这从另一方面也体现到了框架的好处，搭建好整个网页框架后，就开始了SpringBoot对接数据库，相比于传统的，简便了很多，比如所有参数的getter，setter函数，只要一个@Data就能实现，十分方便。之后学习到了集成Mybatis实现数据查询，但是很快就用Mybatis-plus，升级版重新写了之前的代码，升级版本身内置就包含了之前完善的许多代码，在实际使用测试代码时非常重要，它可以将页面请求的数据直接打印在IDEA控制台中，方便寻找问题。另外，在实现后端时，运用到了软件Postman以及Swagger框架，前者是最开始涉及的，特点是软件界面简洁实用方便，而Swagger框架是配置在代码里的，优点是直观，可以将接口直接显示出来，Postman需要手动输入。还有一点收获是很重要的：在实际操作中，有很多不确定的bug，调试就显得特别重要，网页中用f12来找后端送过来的数据哪里出错，也可以发现页面实现的bug。总的来讲，此次大项目的整体完成，让我对前后端分离实现有了一个较大的认识，实现中碰到的问题很多，有的时候一改就是几个小时，但是完整的解决整个程序后，掌握的知识及技术非常多。</p><p>相比于课堂上常用一些工具，使用SpringBoot+Vue和集成的一些软件工具，可以更快更高效的制作一个前后端分离的页面，并且使用自带的Element包，图标格式等一切都很美观，并且需要什么就可以去学哪些，上手很快。很多东西都是看起来复杂，但是实际写起来会发现特别简单。</p><p>对前后端分离有了深刻体会，在后端的数据处理时，首先要保证代码运行的正确，然后再到前端去使用，这也是前后端分离的一个优点，在确保后端可以使用的时候再用。</p><p>对比书本中的表格下载来看，Hutool工具进行Excel处理，element里上传文件，可以很快就实现Excel表格的上传和导入数据到数据库。本次系统的设计中，最大的感悟就是官方文档太好用了，不管是Spring,Vue,MyBatis,Element,Hutool,高德API使用教程，都是非常详细的告诉使用者这里如何使用，包括例子，还有版本更新中的改进，哪里变了使用时有没有改变，有很多版本问题就是在这里解决的。</p><h2 id="5-2改进"><a href="#5-2改进" class="headerlink" title="5.2改进"></a>5.2改进</h2><p>因为之前对Spring基本是没有涉及过，所以使用SpringBoot实现系统中，在遇到像<code>@PathVariable``@RequestPara``@Autowired</code>这些注解时，只是知道了这里要这样用，具体这些注解是什么意思，如何使用，内置了哪些代码，都没有进行深入了解，这点我觉得是欠缺的，但是工程比较庞大，整个Spring的学习也是一个大工程，需要在后续做一个完整的学习，在这次实现中，发现Spring的使用十分有效，很有必要深入研究。</p><p>系统完成过程中有两处大修改：<br> 1.结果集的设定，因为前端发送过来的数据很多很杂，数据格式也不一样，所以在完善时，单独写了一个封装结果集的Result。</p><p>2.异常报错自定义：使用时会出现系统错误，用户名账号错误，参数错误等等，此时自定以一个异常处理，不同情况返回不同code值，这在前面截图中有，十分方便，很容易知道哪里出错。</p><p>3.Mybaits升级成Mybaits-plus</p><p>简化了很多代码：</p><p>4.注解十分方便 <code>@Data</code>，<code>@TOString</code>可以替代很多代码。<code>@Data</code>注解是Lombok库提供的一个注解，自动为类生成getter、setter、equals、hashCode和toString等方法，减少了重复的样板代码。</p><h1 id="6-系统分工"><a href="#6-系统分工" class="headerlink" title="6. 系统分工"></a>6. 系统分工</h1><p>系统由本人独自完成，基础功能是之前实现的一个简易系统，只有数据库的增删改查。在本系统中：完善了个人信息绑定功能，登录注册页面，对表单的导入导出Excel的实现，集成高德地图显示附近中药，网页之间传值显示昵称，并且对之前用Mybaits增删改查的实现改进成Mybatis Plus实现，将主页拆分用子路由显示，统一返回的结果集，以及全局异常处理设置。</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>更新github token</title>
    <link href="/2024/03/04/%E6%9B%B4%E6%96%B0github-token/"/>
    <url>/2024/03/04/%E6%9B%B4%E6%96%B0github-token/</url>
    
    <content type="html"><![CDATA[<p>间隔半年多来整理文档，hexo使用已经有点陌生了，记录一下token的更新。</p> <img src="/2024/03/04/%E6%9B%B4%E6%96%B0github-token/image-20240304133624513.png" class=""> <p>error：用户名密码不匹配—-token过期了</p><h2 id="1-生成GitHub-personal-token"><a href="#1-生成GitHub-personal-token" class="headerlink" title="1.生成GitHub personal token"></a>1.生成GitHub personal token</h2><p>GitHub进入settings界面–Developer settings–personal access token–generate new token</p> <img src="/2024/03/04/%E6%9B%B4%E6%96%B0github-token/image-20240304133854248.png" class="">   <h2 id="2-hexo-deploy设置"><a href="#2-hexo-deploy设置" class="headerlink" title="2.hexo deploy设置"></a>2.hexo deploy设置</h2><p>hexo文件夹，<code>_config.yml</code>文件    填写deploy模块</p> <img src="/2024/03/04/%E6%9B%B4%E6%96%B0github-token/image-20240304134057407.png" class=""> <h3 id="修改完成"><a href="#修改完成" class="headerlink" title="修改完成"></a>修改完成</h3> <img src="/2024/03/04/%E6%9B%B4%E6%96%B0github-token/image-20240304133550480.png" class=""> ]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HOK后端项目记录</title>
    <link href="/2024/03/04/HOK%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/03/04/HOK%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="后端实现记录-总结"><a href="#后端实现记录-总结" class="headerlink" title="后端实现记录+总结"></a>后端实现记录+总结</h1><p><strong>任务：</strong></p><ul><li>架构图</li><li>数据处理</li><li>数据库交互</li><li>大数据平台交互(后端与HDFS和Hive进行交互)</li><li>接口设计与实现</li><li>Ajax请求处理</li><li>安全性-身份验证</li><li>用例测试</li></ul><h2 id="1-创建项目，配置文件"><a href="#1-创建项目，配置文件" class="headerlink" title="1.创建项目，配置文件"></a>1.创建项目，配置文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"># port<br>server.port=<span class="hljs-number">8080</span><br>server.servlet.context-path=/hok<br></code></pre></td></tr></table></figure><p>Spring启动文件—Main.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.ServletComponentScan;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@ServletComponentScan</span>  <span class="hljs-comment">// 开启Servlet组件扫描</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Main.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-创建数据库，配置MySQL连接"><a href="#2-创建数据库，配置MySQL连接" class="headerlink" title="2.创建数据库，配置MySQL连接"></a>2.创建数据库，配置MySQL连接</h2><h4 id="建立数据库"><a href="#建立数据库" class="headerlink" title="建立数据库"></a>建立数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE hok;<br>USE hok;<br><br>CREATE TABLE heros (<br>                        id INT PRIMARY KEY,<br>                        name VARCHAR(50) NOT NULL,<br>                        role VARCHAR(50) NOT NULL,<br>                        type VARCHAR(50) NOT NULL,<br>                        difficulty INT NOT NULL DEFAULT 0<br>);<br></code></pre></td></tr></table></figure><h4 id="创建相应的实体类-Heros"><a href="#创建相应的实体类-Heros" class="headerlink" title="创建相应的实体类 Heros"></a>创建相应的实体类 Heros</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Heros</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String role;<br>    <span class="hljs-keyword">private</span> String type;<br>    <span class="hljs-keyword">private</span> Integer difficulty;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="添加测试数据"><a href="#添加测试数据" class="headerlink" title="添加测试数据"></a>添加测试数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">USE hok;<br><br>INSERT INTO heros (id, name, role, type, difficulty)<br>VALUES<br>    (1, &#x27;孙悟空&#x27;, &#x27;战士&#x27;, &#x27;近战&#x27;, 3),<br>    (2, &#x27;貂蝉&#x27;, &#x27;法师&#x27;, &#x27;远程&#x27;, 2),<br>    (3, &#x27;刘备&#x27;, &#x27;辅助&#x27;, &#x27;远程&#x27;, 1),<br>    (4, &#x27;鲁班七号&#x27;, &#x27;射手&#x27;, &#x27;远程&#x27;, 2),<br>    (5, &#x27;项羽&#x27;, &#x27;坦克&#x27;, &#x27;近战&#x27;, 3),<br>    (6, &#x27;嬴政&#x27;, &#x27;法师&#x27;, &#x27;远程&#x27;, 3),<br>    (7, &#x27;花木兰&#x27;, &#x27;战士&#x27;, &#x27;近战&#x27;, 2),<br>    (8, &#x27;程咬金&#x27;, &#x27;坦克&#x27;, &#x27;近战&#x27;, 1),<br>    (9, &#x27;李白&#x27;, &#x27;刺客&#x27;, &#x27;近战&#x27;, 3),<br>    (10, &#x27;百里守约&#x27;, &#x27;射手&#x27;, &#x27;远程&#x27;, 2);<br></code></pre></td></tr></table></figure><h3 id="MySQL的配置"><a href="#MySQL的配置" class="headerlink" title="MySQL的配置"></a>MySQL的配置</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># MYSQL</span><br><span class="hljs-attr">datasource.dbs.mysql.type</span>=<span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><span class="hljs-attr">datasource.dbs.mysql.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">datasource.dbs.mysql.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/hok?useUnicode=true&amp;characterEncoding=utf8</span><br><span class="hljs-attr">datasource.dbs.mysql.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">datasource.dbs.mysql.password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><h5 id="数据源的配置"><a href="#数据源的配置" class="headerlink" title="数据源的配置"></a>数据源的配置</h5><h6 id="配置文件-MySQLConf"><a href="#配置文件-MySQLConf" class="headerlink" title="配置文件 MySQLConf"></a>配置文件 MySQLConf</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata.conf;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;<br><span class="hljs-keyword">import</span> org.mybatis.spring.SqlSessionTemplate;<br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">// MySQL 数据源的配置</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(basePackages = &quot;hokdata.dao.mysql&quot;, sqlSessionFactoryRef = &quot;mysqlSqlSessionFactory&quot;)</span><br><span class="hljs-meta">@EnableConfigurationProperties(DataSourceProperties.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySQLConf</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DataSourceProperties dataSourceProperties;<br><br>    <span class="hljs-comment">// 创建DataSource对象</span><br>    <span class="hljs-meta">@Bean(&quot;mysqlDataSource&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">getMySQLDataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 创建数据源对象</span><br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br><br>        dataSource.setDriverClassName(dataSourceProperties.getMysql().get(<span class="hljs-string">&quot;driver-class-name&quot;</span>));<br>        dataSource.setUrl(dataSourceProperties.getMysql().get(<span class="hljs-string">&quot;url&quot;</span>));<br>        dataSource.setUsername(dataSourceProperties.getMysql().get(<span class="hljs-string">&quot;username&quot;</span>));<br>        dataSource.setPassword(dataSourceProperties.getMysql().get(<span class="hljs-string">&quot;password&quot;</span>));<br><br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(&quot;mysqlSqlSessionFactory&quot;)</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">getMySQLFactory</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;mysqlDataSource&quot;)</span> DataSource dataSource)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建SqlSessionFactory对象</span><br>        <span class="hljs-type">SqlSessionFactoryBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>        <span class="hljs-comment">// SqlSessionFactoryBean对象指定数据源</span><br>        bean.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> bean.getObject();<br>    &#125;<br><br>    <span class="hljs-comment">// 每次执行SQL操作时，都会创建一个SqlSessionTemplate对象</span><br>    <span class="hljs-meta">@Bean(&quot;mysqlSqlSession&quot;)</span><br>    <span class="hljs-keyword">public</span> SqlSessionTemplate <span class="hljs-title function_">mysqlSession</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;mysqlSqlSessionFactory&quot;)</span> SqlSessionFactory factory)</span>&#123;<br>        <span class="hljs-type">SqlSessionTemplate</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionTemplate</span>(factory);<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="配置文件-DataSourceProperties"><a href="#配置文件-DataSourceProperties" class="headerlink" title="配置文件 DataSourceProperties"></a>配置文件 DataSourceProperties</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata.conf;<br><br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = DataSourceProperties.DS,ignoreUnknownFields = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceProperties</span> &#123;<br>    <span class="hljs-comment">// 关于数据源配置的前缀</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;datasource.dbs&quot;</span>;<br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; mysql;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-分层架构-实现一个简单的数据查询，测试连接"><a href="#3-分层架构-实现一个简单的数据查询，测试连接" class="headerlink" title="3.分层架构  | 实现一个简单的数据查询，测试连接"></a>3.分层架构  | 实现一个简单的数据查询，测试连接</h2><h4 id="Dao层（数据访问层）"><a href="#Dao层（数据访问层）" class="headerlink" title="Dao层（数据访问层）"></a>Dao层（数据访问层）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata.dao.mysql;<br><br><span class="hljs-keyword">import</span> hokdata.pojo.Heros;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HerosDao</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;SELECT * from heros&quot;)</span><br>    List&lt;Heros&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Service层（业务逻辑层）"><a href="#Service层（业务逻辑层）" class="headerlink" title="Service层（业务逻辑层）"></a>Service层（业务逻辑层）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata.service;<br><br><span class="hljs-keyword">import</span> hokdata.dao.mysql.HerosDao;<br><span class="hljs-keyword">import</span> hokdata.pojo.Heros;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HerosService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HerosDao herosDao;<br>    <span class="hljs-keyword">public</span> List&lt;Heros&gt; <span class="hljs-title function_">getHeros</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> herosDao.listHeros();<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Web层-表示层"><a href="#Web层-表示层" class="headerlink" title="Web层  (表示层)"></a>Web层  (表示层)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata.web;<br><br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> hokdata.pojo.Heros;<br><span class="hljs-keyword">import</span> hokdata.service.HerosService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/heros&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HerosWeb</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HerosService herosService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/form1&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">listHeros</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Heros&gt; herosList = herosService.getHeros();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">heroStr</span> <span class="hljs-operator">=</span> JSON.toJSONString(herosList);<br>        <span class="hljs-keyword">return</span> heroStr;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(&quot;/form2&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">listHeros1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="结果测试"><a href="#结果测试" class="headerlink" title="结果测试"></a>结果测试</h4> <img src="/2024/03/04/HOK%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20230610110253799.png" class=""> <h2 id="4-Hive配置和测试"><a href="#4-Hive配置和测试" class="headerlink" title="4.Hive配置和测试"></a>4.Hive配置和测试</h2><h4 id="1-IDEA和数据库的连接"><a href="#1-IDEA和数据库的连接" class="headerlink" title="1. IDEA和数据库的连接"></a>1. IDEA和数据库的连接</h4> <img src="/2024/03/04/HOK%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20230610112152957.png" class=""> <h4 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h4><h6 id="DataSourceProperties"><a href="#DataSourceProperties" class="headerlink" title="DataSourceProperties"></a>DataSourceProperties</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata.conf;<br><br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = DataSourceProperties.DS,ignoreUnknownFields = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceProperties</span> &#123;<br>    <span class="hljs-comment">// 关于数据源配置的前缀</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;datasource.dbs&quot;</span>;<br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; mysql;<br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; hive;    <span class="hljs-comment">//  加入这行</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="HDFSConf"><a href="#HDFSConf" class="headerlink" title="HDFSConf"></a>HDFSConf</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata.conf;<br><br><br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FileSystem;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URI;<br><span class="hljs-keyword">import</span> java.net.URISyntaxException;<br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HDFSconf</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;hdfs.replication&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String replication;<br>    <span class="hljs-meta">@Value(&quot;$&#123;hdfs.user&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String user;<br>    <span class="hljs-meta">@Value(&quot;$&#123;hdfs.uri&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String uri;<br><br>    <span class="hljs-keyword">public</span> org.apache.hadoop.conf.Configuration <span class="hljs-title function_">getConf</span><span class="hljs-params">()</span>&#123;<br>        org.apache.hadoop.conf.<span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">org</span>.apache.hadoop.conf.Configuration();<br>        conf.set(<span class="hljs-string">&quot;dfs.replication&quot;</span>,replication);<br>        <span class="hljs-keyword">return</span> conf;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FileSystem <span class="hljs-title function_">getFS</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">FileSystem</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fs = FileSystem.get(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(uri),getConf(),user);<br>        &#125; <span class="hljs-keyword">catch</span> (URISyntaxException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> fs;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="HiveConf"><a href="#HiveConf" class="headerlink" title="HiveConf"></a>HiveConf</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata.conf;<br><br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;<br><span class="hljs-keyword">import</span> org.mybatis.spring.SqlSessionTemplate;<br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">// Hive 数据源的配置</span><br><span class="hljs-meta">@Configuration</span><br><br><span class="hljs-meta">@MapperScan(basePackages = &quot;hokdata.dao.hive&quot;, sqlSessionFactoryRef = &quot;hiveSqlSessionFactory&quot;)</span><br><span class="hljs-meta">@EnableConfigurationProperties(DataSourceProperties.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HiveConf</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DataSourceProperties dataSourceProperties;<br><br>    <span class="hljs-comment">// 创建DataSources对象</span><br>    <span class="hljs-meta">@Bean(&quot;hiveDataSource&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">getHiveDataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//  创建数据源对象</span><br>        DruidDataSource dataSource=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br><br>        dataSource.setDriverClassName(dataSourceProperties.getHive().get(<span class="hljs-string">&quot;driver-class-name&quot;</span>));<br>        dataSource.setUrl(dataSourceProperties.getHive().get(<span class="hljs-string">&quot;url&quot;</span>));<br>        dataSource.setUsername(dataSourceProperties.getHive().get(<span class="hljs-string">&quot;username&quot;</span>));<br>        dataSource.setPassword(dataSourceProperties.getHive().get(<span class="hljs-string">&quot;password&quot;</span>));<br><br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(&quot;hiveSqlSessionFactory&quot;)</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">getHiveFactory</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;hiveDataSource&quot;)</span> DataSource dataSource)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">SqlSessionFactoryBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>        bean.setDataSource(dataSource);<br><br>        <span class="hljs-keyword">return</span> bean.getObject();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(&quot;hiveSqlSession&quot;)</span><br>    <span class="hljs-keyword">public</span> SqlSessionTemplate <span class="hljs-title function_">hiveSession</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;hiveSqlSessionFactory&quot;)</span> SqlSessionFactory factory)</span>&#123;<br>        <span class="hljs-type">SqlSessionTemplate</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionTemplate</span>(factory);<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-实体类HeroScore"><a href="#3-实体类HeroScore" class="headerlink" title="3.  实体类HeroScore"></a>3.  实体类HeroScore</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroScore</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String areaS;<br>    <span class="hljs-keyword">private</span> String scoreS;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-Dao层"><a href="#4-Dao层" class="headerlink" title="4. Dao层"></a>4. Dao层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata.dao.hive;<br><br><span class="hljs-keyword">import</span> hokdata.pojo.HeroScore;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HeroScoreDao</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;SELECT * from heroScore&quot;)</span><br>    List&lt;HeroScore&gt; <span class="hljs-title function_">listHeroScore</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="5-Web层"><a href="#5-Web层" class="headerlink" title="5. Web层"></a>5. Web层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata.web;<br><br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> hokdata.dao.hive.HeroScoreDao;<br><span class="hljs-keyword">import</span> hokdata.pojo.HeroScore;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/heros&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">heroScoreWeb</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HeroScoreDao dao;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;score&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getHeroScore</span><span class="hljs-params">()</span>&#123;<br>        List&lt;HeroScore&gt; scoreList = dao.listHeroScore();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strScore</span> <span class="hljs-operator">=</span> JSON.toJSONString(scoreList);<br>        <span class="hljs-keyword">return</span> strScore;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-结果测试"><a href="#6-结果测试" class="headerlink" title="6.结果测试"></a>6.结果测试</h4> <img src="/2024/03/04/HOK%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20230610152645255.png" class="">  <img src="/2024/03/04/HOK%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20230610152623786.png" class=""> <h4 id="7-问题1：Hive上传JSON数据报错"><a href="#7-问题1：Hive上传JSON数据报错" class="headerlink" title="7.问题1：Hive上传JSON数据报错"></a>7.问题1：Hive上传JSON数据报错</h4><h5 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE hok;<br><br>USE hok;<br><span class="hljs-comment">-- 创建数据库</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> heroScore;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> heroScore (<br>    id <span class="hljs-type">INT</span>,<br>    name STRING,<br>    area STRING,<br>    score <span class="hljs-type">INT</span><br>)<span class="hljs-type">ROW</span> FORMAT SERDE <span class="hljs-string">&#x27;org.apache.hadoop.hive.serde2.JsonSerDe&#x27;</span><br>    STORED <span class="hljs-keyword">AS</span> TEXTFILE;<br></code></pre></td></tr></table></figure><p>官方文档说明：</p><p><code>Starting in Hive 3.0.0, JsonSerDe is added to Hive Serde as “org.apache.hadoop.hive.serde2.JsonSerDe” (HIVE-19211).</code>  <strong>———-通过此可以对建表语句进行设置，自动解析json数据</strong></p><p>&#x3D;&#x3D;没找到相应的应用实例，误以为要传.json文件格式；测试了很久发现都报错：JSON数据类型错误&#x3D;&#x3D;</p><h6 id="IDEA里报错"><a href="#IDEA里报错" class="headerlink" title="IDEA里报错"></a>IDEA里报错</h6><p><code>java.io.IOException: org.apache.hadoop.hive.serde2.SerDeException: java.io.IOException: Start token not found where expected</code></p><h6 id="beeline里显示的错误"><a href="#beeline里显示的错误" class="headerlink" title="beeline里显示的错误"></a>beeline里显示的错误</h6> <img src="/2024/03/04/HOK%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20230610143120591.png" class=""> <h6 id="解决—–传txt文件"><a href="#解决—–传txt文件" class="headerlink" title="解决—–传txt文件"></a>解决—–传txt文件</h6><p>&#x3D;&#x3D;<strong>多次测试还是失败</strong>&#x3D;&#x3D;</p><h5 id="原因：json数据格式的问题"><a href="#原因：json数据格式的问题" class="headerlink" title="原因：json数据格式的问题"></a>原因：json数据格式的问题</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs json"># 错误案例：<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;hero&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;李白&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;area&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;江苏&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10000</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;程咬金&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;area&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;湖南&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9000</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;貂蝉&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;area&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;广东&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9500</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;鲁班七号&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;area&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;浙江&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9200</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;王昭君&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;area&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;江苏&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9800</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"># 可以识别的形式：<br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;李白&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;area&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;江苏&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10000</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;程咬金&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;area&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;湖南&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9000</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;hive解析数据时，是一行一行解析，所以一组JSON数据应该在一行里，不能分段&#x3D;&#x3D;</p><h4 id="8-问题2：Hive解析数据的原理"><a href="#8-问题2：Hive解析数据的原理" class="headerlink" title="8.问题2：Hive解析数据的原理"></a>8.问题2：Hive解析数据的原理</h4><h6 id="发现："><a href="#发现：" class="headerlink" title="发现："></a>发现：</h6><p>文件上传到HDFS后，再通过LOAD DATA传到hive解析，原文件就没了，应该是移动操作，但是这样把文件移到hive中，此时<strong>受影响行</strong>为0，是在输出的时候才能显示数据，并且再次传入文件，数据是可以正常增加内容显示的。那么—<strong>底层是文件数据拼接处理，每次用的时候加载进去；还是解析完文件就自动删除了，再传文件时再传输数据。</strong></p><h6 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h6><p>当使用LOAD DATA命令将文件加载到Hive表时，Hive会在内部将文件从HDFS<strong>移动</strong>到表所在的存储位置。这意味着原始文件会被移动并在HDFS中的源位置被删除。</p><p>Hive并不会直接在加载数据时对原始文件进行拼接操作。当再次传入新的文件时，Hive会<strong>将新文件移动到表的存储位置</strong>，并将新数据与现有数据合并。在查询表时，会看到合并后的数据。</p><p>同时，Hive<strong>不会</strong>在加载数据后<strong>自动删除</strong>原始文件。删除原始文件可以手动在HDFS上操作。</p><h4 id="9-问题3：Druid数据源配置中启用了testWhileIdle选项，但没有设置validationQuery属性"><a href="#9-问题3：Druid数据源配置中启用了testWhileIdle选项，但没有设置validationQuery属性" class="headerlink" title="9.问题3：Druid数据源配置中启用了testWhileIdle选项，但没有设置validationQuery属性"></a>9.问题3：Druid数据源配置中启用了<code>testWhileIdle</code>选项，但没有设置<code>validationQuery</code>属性</h4> <img src="/2024/03/04/HOK%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20230610151313174.png" class=""> <p><code>ERROR 32060 --- [nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : testWhileIdle is true, validationQuery not set</code></p><p><strong>原因：</strong>在Druid数据源配置中启用了<code>testWhileIdle</code>选项，但没有设置<code>validationQuery</code>属性。</p><p><code>testWhileIdle</code>选项用于指定在连接空闲时是否进行连接有效性的测试。如果启用了此选项，连接池将定期检查空闲连接的有效性。</p><p>为了进行有效性测试，需要提供一个<code>validationQuery</code>，该查询语句将在连接上执行以验证连接是否有效。</p><p><strong>解决：</strong>在Druid数据源配置中设置<code>validationQuery</code>属性，以提供用于连接有效性测试的SQL查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">sqlCopy codespring.datasource.druid.testWhileIdle<span class="hljs-operator">=</span><span class="hljs-literal">true</span><br>spring.datasource.druid.validationQuery<span class="hljs-operator">=</span><span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><code>validationQuery</code>设置为<code>SELECT 1</code>，表示使用简单的SQL查询来测试连接的有效性。</p><p>下面是查询到的一个解决方法<del>，但是实际使用失败</del></p> <img src="/2024/03/04/HOK%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20230610151741119.png" class=""> <p><del><strong>不影响结果，暂时没有解决。</strong></del></p><p><strong>已解决：</strong></p><h6 id="项目配置文件-application-properties"><a href="#项目配置文件-application-properties" class="headerlink" title="项目配置文件 application.properties"></a>项目配置文件 application.properties</h6><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># MYSQL</span><br><span class="hljs-attr">datasource.dbs.mysql.validationQuery</span>=<span class="hljs-string">SELECT 1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># HIVE</span><br><span class="hljs-attr">datasource.dbs.hive.validationQuery</span>=<span class="hljs-string">SELECT 1</span><br></code></pre></td></tr></table></figure><h6 id="Hive-数据源的配置添加该数据"><a href="#Hive-数据源的配置添加该数据" class="headerlink" title="Hive 数据源的配置添加该数据"></a>Hive 数据源的配置添加该数据</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建DataSources对象</span><br><span class="hljs-meta">@Bean(&quot;hiveDataSource&quot;)</span><br><span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">getHiveDataSource</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//  创建数据源对象</span><br>    DruidDataSource dataSource=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br><br>    dataSource.setDriverClassName(dataSourceProperties.getHive().get(<span class="hljs-string">&quot;driver-class-name&quot;</span>));<br>    dataSource.setUrl(dataSourceProperties.getHive().get(<span class="hljs-string">&quot;url&quot;</span>));<br>    dataSource.setUsername(dataSourceProperties.getHive().get(<span class="hljs-string">&quot;username&quot;</span>));<br>    dataSource.setPassword(dataSourceProperties.getHive().get(<span class="hljs-string">&quot;password&quot;</span>));<br>    dataSource.setValidationQuery(dataSourceProperties.getHive().get(<span class="hljs-string">&quot;validationQuery&quot;</span>));  <span class="hljs-comment">// 该行</span><br><br>    <span class="hljs-keyword">return</span> dataSource;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="10-问题4：JSON数据传输类型不匹配"><a href="#10-问题4：JSON数据传输类型不匹配" class="headerlink" title="10.问题4：JSON数据传输类型不匹配"></a>10.问题4：JSON数据传输类型不匹配</h4><p>JSON数据传输，每个字段都必须有，并且数据类型一一对应 [ <strong>爬取的数据，值都为” “包含，所以都改为String类型</strong> ]</p><p><strong>类型不匹配&#x2F;字段不匹配</strong> 都会报错：</p><p><code>Error: java.io.IOException: org.apache.hadoop.hive.serde2.SerDeException: org.codehaus.jackson.JsonParseException: Current token (VALUE_STRING) not numeric, can not use numeric value accessors at [Source: java.io.ByteArrayInputStream@759f0d70; line: 1, column: 74] (state=,code=0)</code></p><p>&#x3D;&#x3D;<em>Tip:加载数据之前，可以使用 <code>CAST</code> 函数将相应字符串类型的字段转换为 INT 类型；但是用的是hive数据文件导入形式，不能用函数；</em>&#x3D;&#x3D;</p><p><strong>解决：</strong></p><ol><li><h6 id="修改数据库内容，使类型都为String，字段和JSON相匹配；同时进行数据清理，脏数据重复并且数据量不多，把出现错误的数据使用txt查找-修改功能整理后，导入成功。"><a href="#修改数据库内容，使类型都为String，字段和JSON相匹配；同时进行数据清理，脏数据重复并且数据量不多，把出现错误的数据使用txt查找-修改功能整理后，导入成功。" class="headerlink" title="修改数据库内容，使类型都为String，字段和JSON相匹配；同时进行数据清理，脏数据重复并且数据量不多，把出现错误的数据使用txt查找-修改功能整理后，导入成功。"></a>修改数据库内容，使类型都为String，字段和JSON相匹配；同时进行数据清理，脏数据重复并且数据量不多，把出现错误的数据使用txt查找-修改功能整理后，导入成功。</h6></li></ol> <img src="/2024/03/04/HOK%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20230610190559734.png" class=""> <h6 id="2-最后实体类的时候类型改回相应的数据类型即可，如Integer"><a href="#2-最后实体类的时候类型改回相应的数据类型即可，如Integer" class="headerlink" title="2.最后实体类的时候类型改回相应的数据类型即可，如Integer"></a>2.最后实体类的时候类型改回相应的数据类型即可，如Integer</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HerosScore</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String alias;<br>    <span class="hljs-keyword">private</span> String area;<br>    <span class="hljs-keyword">private</span> Integer areaPower;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> Integer cityPower;<br>    <span class="hljs-keyword">private</span> String province;<br>    <span class="hljs-keyword">private</span> Integer provincePower;<br>    <span class="hljs-keyword">private</span> String platform;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> stamp;<br>    <span class="hljs-keyword">private</span> String updatetime;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-结果验证"><a href="#3-结果验证" class="headerlink" title="3.结果验证"></a>3.结果验证</h6> <img src="/2024/03/04/HOK%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20230610192314486.png" class=""> <h4 id="11-补：hive无字段自增"><a href="#11-补：hive无字段自增" class="headerlink" title="11.补：hive无字段自增"></a>11.补：hive无字段自增</h4><p>默认情况下，表的字段不支持自增功能。Hive 是建立在 Hadoop 之上的数据仓库解决方案，主要用于大规模数据的存储和分析，而不是作为一个传统的关系型数据库。</p><p>在 Hive 中实现自增功能，可行的有两种方法：</p><ol><li>使用外部工具或编程语言：在数据加载到 Hive 表之前，使用外部工具或编程语言生成自增的值，并将其插入到 Hive 表中。</li><li>使用序列生成器：Hive 提供了序列生成器的功能，可以用于生成递增的序列值创建一个序列生成器，并在插入数据时使用该序列生成器生成自增的值。<strong>但是，序列生成器是全局的，而不是针对每个表的独立自增。因此，如果多个表需要使用自增功能，它们将共享同一个序列生成器。</strong></li></ol><p>&#x3D;&#x3D;以上两种方法都是通过外部手段实现自增功能，而不是 Hive 自身的内置功能。&#x3D;&#x3D;</p><h2 id="补充：传JSON数据给Hive的流程总结"><a href="#补充：传JSON数据给Hive的流程总结" class="headerlink" title="补充：传JSON数据给Hive的流程总结"></a>补充：传JSON数据给Hive的流程总结</h2><p>1.编写txt文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;李白&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;area&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;江苏&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10000</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;程咬金&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;area&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;湖南&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9000</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>2.xftp传到虚拟机</p><p>3.上传到HDFS</p><p><code>hdfs dfs -put /data/data.txt /user/root/</code></p><p>4.LOAD DATA给hive表格(需要设置自动解析)</p><p> <code>LOAD DATA INPATH &#39;/user/root/data4.txt&#39; INTO TABLE heroScore;</code></p><h2 id="5-前端测试用例"><a href="#5-前端测试用例" class="headerlink" title="5. 前端测试用例"></a>5. 前端测试用例</h2><h4 id="1-Ajax请求"><a href="#1-Ajax请求" class="headerlink" title="1.Ajax请求"></a>1.Ajax请求</h4><h5 id="导入js文件"><a href="#导入js文件" class="headerlink" title="导入js文件"></a>导入js文件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="发送GET请求测试"><a href="#发送GET请求测试" class="headerlink" title="发送GET请求测试"></a>发送GET请求测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">$.ajax(&#123;<br>    url: <span class="hljs-string">&#x27;http://192.168.61.21:8080/hok/heros/score2&#x27;</span>,<br>    type: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    dataType: <span class="hljs-string">&#x27;json&#x27;</span>,<br>    success: function(response) &#123;<br>        <span class="hljs-comment">// 处理返回的数据</span><br>        <span class="hljs-keyword">if</span> (Array.isArray(response)) &#123;<br>            <span class="hljs-comment">// 如果返回的是数组</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">var</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; response.length; i++) &#123;<br>                <span class="hljs-type">var</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> response[i];<br>                console.log(<span class="hljs-string">&quot;Name: &quot;</span> + item.name);<br>                console.log(<span class="hljs-string">&quot;Area: &quot;</span> + item.area);<br>                console.log(<span class="hljs-string">&quot;Area Power: &quot;</span> + item.areaPower);<br>                console.log(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果返回的是单个对象</span><br>            console.log(<span class="hljs-string">&quot;Name: &quot;</span> + response.name);<br>            console.log(<span class="hljs-string">&quot;Area: &quot;</span> + response.area);<br>            console.log(<span class="hljs-string">&quot;Area Power: &quot;</span> + response.areaPower);<br>        &#125;<br>    &#125;,<br>    error: function() &#123;<br>        <span class="hljs-comment">// 处理错误情况</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="2-控制台打印"><a href="#2-控制台打印" class="headerlink" title="2.控制台打印"></a>2.控制台打印</h4> <img src="/2024/03/04/HOK%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20230610200308982.png" class=""> <h2 id="6-给前端传数据的跨域问题"><a href="#6-给前端传数据的跨域问题" class="headerlink" title="6.给前端传数据的跨域问题"></a>6.给前端传数据的跨域问题</h2><p>&#x3D;&#x3D;封装后端的数据，直接把结果返回即可，使前端通过Ajax请求直接访问url获取数据&#x3D;&#x3D;</p><h4 id="1-思路一，之前配置过Apache服务器，局域网内可以直接访问"><a href="#1-思路一，之前配置过Apache服务器，局域网内可以直接访问" class="headerlink" title="1.思路一，之前配置过Apache服务器，局域网内可以直接访问"></a>1.思路一，之前配置过Apache服务器，局域网内可以直接访问</h4> <img src="/2024/03/04/HOK%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20230610231215359.png" class=""> <p>将文件存储在这边，然后通过访问服务器网址来获得JSON数据；</p><h3 id="2-改进—-gt-使用反向代理，将80端口映射到8080端口，直接访问Tomcat服务器"><a href="#2-改进—-gt-使用反向代理，将80端口映射到8080端口，直接访问Tomcat服务器" class="headerlink" title="2.改进—&gt;使用反向代理，将80端口映射到8080端口，直接访问Tomcat服务器"></a>2.改进—&gt;使用反向代理，将80端口映射到8080端口，直接访问Tomcat服务器</h3><h5 id="1-httpd-conf配置文件中加载模块"><a href="#1-httpd-conf配置文件中加载模块" class="headerlink" title="1.httpd.conf配置文件中加载模块"></a>1.httpd.conf配置文件中加载模块</h5><p><code>LoadModule proxy_module modules/mod_proxy.so</code></p><p><code>LoadModule proxy_http_module modules/mod_proxy_http.so</code></p><h5 id="2-开放配置文件"><a href="#2-开放配置文件" class="headerlink" title="2.开放配置文件"></a>2.开放配置文件</h5><p><code>Include conf/extra/httpd-vhosts.conf</code></p><h5 id="3-httpd-vhosts-conf中添加具体配置"><a href="#3-httpd-vhosts-conf中添加具体配置" class="headerlink" title="3.httpd-vhosts.conf中添加具体配置"></a>3.httpd-vhosts.conf中添加具体配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;VirtualHost _default_:<span class="hljs-number">80</span>&gt;`<br>`#ServerName www.example.com:<span class="hljs-number">80</span>`<br>`DocumentRoot <span class="hljs-string">&quot;$&#123;SRVROOT&#125;/htdocs&quot;</span>`<br>`&lt;/VirtualHost&gt;<br><br>    <br>#  增加后的配置<br><br>&lt;VirtualHost _default_:<span class="hljs-number">80</span>&gt;<br>DocumentRoot <span class="hljs-string">&quot;$&#123;SRVROOT&#125;/htdocs&quot;</span><br>#ServerName www.example.com:<span class="hljs-number">80</span><br>ServerName www.example.com<br><br>ProxyRequests Off<br>ProxyPass /api http:<span class="hljs-comment">//localhost:8080</span><br>ProxyPassReverse /api http:<span class="hljs-comment">//localhost:8080</span><br>&lt;/VirtualHost&gt;<br></code></pre></td></tr></table></figure><h3 id="3-Tomcat也是服务器—-gt-直接开放8080端口供外网访问"><a href="#3-Tomcat也是服务器—-gt-直接开放8080端口供外网访问" class="headerlink" title="3.Tomcat也是服务器—&gt;直接开放8080端口供外网访问"></a>3.Tomcat也是服务器—&gt;直接开放8080端口供外网访问</h3><p><strong>配置进站规则即可</strong></p><p>&#x3D;&#x3D;即：设置Win10防火墙规则，使得局域网能访问此电脑的Tomcat服务&#x3D;&#x3D;</p><hr><p><strong>至此，可以通过局域网直接访问JSON数据</strong></p> <img src="/2024/03/04/HOK%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20230610231844983.png" class=""> <h5 id="发送AJAS请求时会出现错误"><a href="#发送AJAS请求时会出现错误" class="headerlink" title="发送AJAS请求时会出现错误"></a>发送AJAS请求时会出现错误</h5><p><code>Access to XMLHttpRequest at &#39;http://172.19.41.181:8080/hok/heros/score2&#39; from origin &#39;http://localhost:63342&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</code></p><p>&#x3D;&#x3D;即CORS（跨域资源共享）错误。&#x3D;&#x3D;</p> <img src="/2024/03/04/HOK%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20230611011137676.png" class=""> <h3 id="4-CORS（跨域资源共享）"><a href="#4-CORS（跨域资源共享）" class="headerlink" title="4.CORS（跨域资源共享）"></a>4.CORS（跨域资源共享）</h3><p><strong>这是浏览器的安全策略，用于阻止跨域请求，从一个源发出的请求访问另一个源的资源。</strong></p><p>如果是本机，是同一个源下，可以正常访问，如下</p> <img src="/2024/03/04/HOK%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20230610232259858.png" class=""> <p><strong>TIP:[即如果直接打开HTML，不走服务器，就不属于同一个源，直接打开是通过<code>http://localhost:63342</code>进行跨域请求访问，所以不能获得数据]</strong></p><h5 id="非服务器端要想获得数据，有两种解决"><a href="#非服务器端要想获得数据，有两种解决" class="headerlink" title="非服务器端要想获得数据，有两种解决"></a>非服务器端要想获得数据，有两种解决</h5><ol><li><h6 id="代理服务器：在本地开发环境中，设置一个代理服务器来解决跨域问题。代理服务器接收请求，然后转发到目标服务器上，以此绕过浏览器的跨域限制。"><a href="#代理服务器：在本地开发环境中，设置一个代理服务器来解决跨域问题。代理服务器接收请求，然后转发到目标服务器上，以此绕过浏览器的跨域限制。" class="headerlink" title="代理服务器：在本地开发环境中，设置一个代理服务器来解决跨域问题。代理服务器接收请求，然后转发到目标服务器上，以此绕过浏览器的跨域限制。"></a>代理服务器：在本地开发环境中，设置一个代理服务器来解决跨域问题。代理服务器接收请求，然后转发到目标服务器上，以此绕过浏览器的跨域限制。</h6><ul><li>将AJAX请求发送到代理服务器的地址，然后代理服务器会将请求转发到<code>http://172.19.12.1:8080/hok/heros/score2</code>上，将响应返回给前端。</li></ul></li><li><h6 id="启用CORS：如果你访问目标服务器（http-172-19-12-1-8080），就可以在服务器端启用CORS，允许来自不同域的请求访问资源。"><a href="#启用CORS：如果你访问目标服务器（http-172-19-12-1-8080），就可以在服务器端启用CORS，允许来自不同域的请求访问资源。" class="headerlink" title="启用CORS：如果你访问目标服务器（http://172.19.12.1:8080），就可以在服务器端启用CORS，允许来自不同域的请求访问资源。"></a>启用CORS：如果你访问目标服务器（<code>http://172.19.12.1:8080</code>），就可以在服务器端启用CORS，允许来自不同域的请求访问资源。</h6><ul><li><p>Spring Boot中，使用<code>@CrossOrigin</code>注解或配置<code>CorsFilter</code>来启用CORS。</p></li><li><p>@CrossOrigin()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CrossOrigin(value = &quot;http://localhost:****&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;index&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">gindex</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;get;&quot;</span>;<br>&#125;<br>    <br><span class="hljs-meta">@CrossOrigin(value = &quot;http://localhost:****&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;index&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">pindex</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;post;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>表示该接口开启了跨域，允许<code>http://localhost:****</code>进行访问</p></li></ul></li></ol><h4 id="5-最终使用—Tomcat开放端口-Config配置文件-解决跨域问题"><a href="#5-最终使用—Tomcat开放端口-Config配置文件-解决跨域问题" class="headerlink" title="5.最终使用—Tomcat开放端口+Config配置文件 解决跨域问题"></a>5.最终使用—Tomcat开放端口+<strong>Config配置文件 解决跨域问题</strong></h4><p><strong>将整个项目配置为开启跨域</strong></p><p>在config包下面新建一个CorsConfig文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata.conf;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span>  <span class="hljs-title class_">CrosConf</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>        <span class="hljs-comment">// 所有请求都会处理跨域</span><br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                <span class="hljs-comment">// 允许谁访问</span><br>                .allowedOrigins(<span class="hljs-string">&quot;*&quot;</span>)<br>                <span class="hljs-comment">// 允许通过的请求数</span><br>                .allowedMethods(<span class="hljs-string">&quot;*&quot;</span>)<br>                <span class="hljs-comment">// 允许的请求头</span><br>                .allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就可以通过<a href="http://localhost:63342或者其他http://****直接访问了">http://localhost:63342或者其他http://****直接访问了</a></p><p>&#x3D;&#x3D;即：允许前端应用程序从不同的域名或端口发起请求而不受浏览器的限制&#x3D;&#x3D;</p><h2 id="7-代码简单优化"><a href="#7-代码简单优化" class="headerlink" title="7.代码简单优化"></a>7.代码简单优化</h2><p>1.*<em>数据传输时，要什么给什么，而不是SELECT <em>; 保证数据安全性；</em></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;SELECT DISTINCT banRate value, heroName name FROM heroInfos ORDER BY banRate DESC LIMIT 10&quot;)</span><br></code></pre></td></tr></table></figure><p><strong>2.跨域请求地址需要设定具体的，不能任何请求都通过</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">.allowedOrigins(<span class="hljs-string">&quot;http://86645****&quot;</span>, <span class="hljs-string">&quot;http://172.13.12.12*&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>3.返回JSON数据字段过多问题，实体类必须和数据库字段一样，所以从存入数据库进行控制</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Heros</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> heroId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> banRate;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> showRate;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> winRate;<br>    <span class="hljs-keyword">private</span> String tRank;<br>    <span class="hljs-keyword">private</span> String heroName;<br>    <span class="hljs-keyword">private</span> String heroCareer;<br>    <span class="hljs-keyword">private</span> String pick;<br>    <span class="hljs-keyword">private</span> String ban;<br>&#125;<br></code></pre></td></tr></table></figure><p>存入数据库时进行控制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">insertQuery</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;INSERT INTO heroInfos (heroId, banRate, showRate, winRate, tRank, heroName, heroCareer, pick, ban) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;</span>;<br><span class="hljs-keyword">try</span> (<span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.prepareStatement(insertQuery)) &#123;<br>    <span class="hljs-keyword">for</span> (Map&lt;String, Object&gt; data : dataList) &#123;<br>        statement.setInt(<span class="hljs-number">1</span>, (<span class="hljs-type">int</span>) data.get(<span class="hljs-string">&quot;heroId&quot;</span>));<br>        statement.setDouble(<span class="hljs-number">2</span>, (<span class="hljs-type">double</span>) data.get(<span class="hljs-string">&quot;banRate&quot;</span>));<br>        statement.setDouble(<span class="hljs-number">3</span>, (<span class="hljs-type">double</span>) data.get(<span class="hljs-string">&quot;showRate&quot;</span>));<br>        statement.setDouble(<span class="hljs-number">4</span>, (<span class="hljs-type">double</span>) data.get(<span class="hljs-string">&quot;winRate&quot;</span>));<br>        statement.setString(<span class="hljs-number">5</span>, (String) data.get(<span class="hljs-string">&quot;tRank&quot;</span>));<br>        <span class="hljs-comment">// 获取嵌套在heroInfo中的字段</span><br>        Map&lt;String, Object&gt; heroInfo = (Map&lt;String, Object&gt;) data.get(<span class="hljs-string">&quot;heroInfo&quot;</span>);<br>        statement.setString(<span class="hljs-number">6</span>, (String) heroInfo.get(<span class="hljs-string">&quot;heroName&quot;</span>));<br>        statement.setString(<span class="hljs-number">7</span>, (String) heroInfo.get(<span class="hljs-string">&quot;heroCareer&quot;</span>));<br>        statement.setString(<span class="hljs-number">8</span>, (String) data.get(<span class="hljs-string">&quot;pick&quot;</span>));<br>        statement.setString(<span class="hljs-number">9</span>, (String) data.get(<span class="hljs-string">&quot;ban&quot;</span>));<br><br>        statement.executeUpdate();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4.HeroInfo数据表格中数据重复，因为不同id对应不同版本的英雄，所以一个英雄有两条数据，但是搜索到的内容只需要一个 —-&gt; sql语句去重</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> banRate <span class="hljs-keyword">value</span>, heroName name <span class="hljs-keyword">FROM</span> heroInfos <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> banRate <span class="hljs-keyword">DESC</span> LIMIT <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h2 id="8-导入JSON数据进Mysql"><a href="#8-导入JSON数据进Mysql" class="headerlink" title="8.导入JSON数据进Mysql"></a>8.导入JSON数据进Mysql</h2><p>因为是导入json文件，同时需要单独处理里面的一个数组元素，只需要JSON里的部分数，所以直接写一个JSONImporter类来操作数据库</p><p>heroInfo数组中的字段单独处理<code>Map&lt;String, Object&gt; heroInfo = (Map&lt;String, Object&gt;) data.get(&quot;heroInfo&quot;);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.type.TypeReference;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JSONImporter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;src/main/java/hokdata/heroInfo.json&quot;</span>;<br><br>        <span class="hljs-comment">// 数据库连接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/hok&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password)) &#123;<br>            <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>            <span class="hljs-comment">// 从 JSON 文件中读取数据</span><br>            List&lt;Map&lt;String, Object&gt;&gt; dataList = objectMapper.readValue(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName), <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;() &#123;&#125;);<br><br>            <span class="hljs-comment">// 插入数据到数据库</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">insertQuery</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;INSERT INTO heroInfos (heroId, banRate, showRate, winRate, tRank, heroName, heroCareer, pick, ban) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;</span>;<br>            <span class="hljs-keyword">try</span> (<span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.prepareStatement(insertQuery)) &#123;<br>                <span class="hljs-keyword">for</span> (Map&lt;String, Object&gt; data : dataList) &#123;<br>                    statement.setInt(<span class="hljs-number">1</span>, (<span class="hljs-type">int</span>) data.get(<span class="hljs-string">&quot;heroId&quot;</span>));<br>                    statement.setDouble(<span class="hljs-number">2</span>, (<span class="hljs-type">double</span>) data.get(<span class="hljs-string">&quot;banRate&quot;</span>));<br>                    statement.setDouble(<span class="hljs-number">3</span>, (<span class="hljs-type">double</span>) data.get(<span class="hljs-string">&quot;showRate&quot;</span>));<br>                    statement.setDouble(<span class="hljs-number">4</span>, (<span class="hljs-type">double</span>) data.get(<span class="hljs-string">&quot;winRate&quot;</span>));<br>                    statement.setString(<span class="hljs-number">5</span>, (String) data.get(<span class="hljs-string">&quot;tRank&quot;</span>));<br>                    <span class="hljs-comment">// 获取嵌套在heroInfo中的字段</span><br>                    Map&lt;String, Object&gt; heroInfo = (Map&lt;String, Object&gt;) data.get(<span class="hljs-string">&quot;heroInfo&quot;</span>);<br>                    statement.setString(<span class="hljs-number">6</span>, (String) heroInfo.get(<span class="hljs-string">&quot;heroName&quot;</span>));<br>                    statement.setString(<span class="hljs-number">7</span>, (String) heroInfo.get(<span class="hljs-string">&quot;heroCareer&quot;</span>));<br>                    statement.setString(<span class="hljs-number">8</span>, (String) data.get(<span class="hljs-string">&quot;pick&quot;</span>));<br>                    statement.setString(<span class="hljs-number">9</span>, (String) data.get(<span class="hljs-string">&quot;ban&quot;</span>));<br><br>                    statement.executeUpdate();<br>                &#125;<br>            &#125;<br><br>            System.out.println(<span class="hljs-string">&quot;导入完成.&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-测试用例汇总"><a href="#9-测试用例汇总" class="headerlink" title="9.测试用例汇总"></a>9.测试用例汇总</h2><h5 id="HiveTest-java"><a href="#HiveTest-java" class="headerlink" title="HiveTest.java"></a>HiveTest.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata;<br><br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> hokdata.dao.hive.HeroScoreDao;<br><span class="hljs-keyword">import</span> hokdata.pojo.HeroScore;<br><span class="hljs-keyword">import</span> hokdata.pojo.HerosScore;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//  两个测试</span><br><span class="hljs-comment">// 1.从Hive中查询英雄战力的数据</span><br><span class="hljs-comment">// 2.从Hive中查询的英雄基础数据--测试连接</span><br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HiveTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HeroScoreDao heroScoreDao;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        List&lt;HerosScore&gt; scoreList2 = heroScoreDao.listHeroScore2();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strScore2</span> <span class="hljs-operator">=</span> JSON.toJSONString(scoreList2);<br>        System.out.println(<span class="hljs-string">&quot;从Hive中查询英雄战力的数据&quot;</span>+strScore2);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        List&lt;HeroScore&gt; scoreList1 = heroScoreDao.listHeroScore();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strScore</span> <span class="hljs-operator">=</span> JSON.toJSONString(scoreList1);<br>        System.out.println(<span class="hljs-string">&quot;从Hive中查询的英雄基础数据--测试连接&quot;</span>+strScore);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Local-WebTest-java"><a href="#Local-WebTest-java" class="headerlink" title="Local_WebTest.java"></a>Local_WebTest.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpHeaders;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpMethod;<br><span class="hljs-keyword">import</span> org.springframework.http.MediaType;<br><span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> java.util.Collections;<br><br><span class="hljs-comment">// 发送GET请求,测试能不能从url获得相应数 ---- 这里是localhost测试</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Local_WebTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建RestTemplate对象</span><br>        <span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br><br>        <span class="hljs-comment">// 设置请求头，指定接受JSON数据</span><br>        <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>        headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));<br><br>        <span class="hljs-comment">// 发送GET请求，获取响应</span><br>        ResponseEntity&lt;String&gt; response = restTemplate.exchange(<br>                <span class="hljs-string">&quot;http://localhost:8080/hok/heros/form4&quot;</span>,<br>                HttpMethod.GET,<br>                <span class="hljs-literal">null</span>,<br>                String.class<br>        );<br><br>        <span class="hljs-comment">// 获取响应的JSON数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">responseBody</span> <span class="hljs-operator">=</span> response.getBody();<br><br>        <span class="hljs-comment">// 在控制台输出JSON数据</span><br>        System.out.println(responseBody);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="MySQLTest"><a href="#MySQLTest" class="headerlink" title="MySQLTest"></a>MySQLTest</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata;<br><br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> hokdata.dao.hive.HeroScoreDao;<br><span class="hljs-keyword">import</span> hokdata.dao.mysql.HerosDao;<br><span class="hljs-keyword">import</span> hokdata.pojo.HeroBan;<br><span class="hljs-keyword">import</span> hokdata.pojo.Heros;<br><span class="hljs-keyword">import</span> hokdata.service.HerosService;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//  四个测试</span><br><span class="hljs-comment">// 1.从MySQL中查询的英雄基础信息</span><br><span class="hljs-comment">// 2.从MySQL中查询的英雄ban率前10条</span><br><span class="hljs-comment">// 3.从MySQL中查询的英雄热度排行前10条</span><br><span class="hljs-comment">// 4.从MySQL中查询的英雄胜率前十</span><br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySQLTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    HerosService herosService;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Heros&gt; herosList = herosService.getHeros();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">heroStr</span> <span class="hljs-operator">=</span> JSON.toJSONString(herosList);<br>        System.out.println(<span class="hljs-string">&quot;从MySQL中查询的英雄基础信息&quot;</span>+heroStr);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        List&lt;HeroBan&gt; herosList = herosService.getHeros3();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">heroStr</span> <span class="hljs-operator">=</span> JSON.toJSONString(herosList);<br>        System.out.println(<span class="hljs-string">&quot;从MySQL中查询的英雄ban率前10条&quot;</span>+heroStr);  <span class="hljs-comment">///前10条</span><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Heros&gt; herosList = herosService.getHeros2();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">heroStr</span> <span class="hljs-operator">=</span> JSON.toJSONString(herosList);<br>        System.out.println(<span class="hljs-string">&quot;从MySQL中查询的英雄热度排行前10条&quot;</span>+heroStr);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Heros&gt; herosList = herosService.getHeros4();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">heroStr</span> <span class="hljs-operator">=</span> JSON.toJSONString(herosList);<br>        System.out.println(<span class="hljs-string">&quot;从MySQL中查询的英雄胜率前十&quot;</span>+heroStr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="yumin-WebTest"><a href="#yumin-WebTest" class="headerlink" title="yumin_WebTest"></a>yumin_WebTest</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hokdata;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpHeaders;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpMethod;<br><span class="hljs-keyword">import</span> org.springframework.http.MediaType;<br><span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> java.util.Collections;<br><br><span class="hljs-comment">// 发送GET请求,测试能不能从url获得相应数 ---- 这是ip地址测试，可以通过局域网访问</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">yumin_WebTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建RestTemplate对象</span><br>        <span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br><br>        <span class="hljs-comment">// 设置请求头，指定接受JSON数据</span><br>        <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>        headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));<br><br>        <span class="hljs-comment">// 发送GET请求，获取响应</span><br>        ResponseEntity&lt;String&gt; response = restTemplate.exchange(<br>                <span class="hljs-string">&quot;http://192.168.61.21:8080/hok/heros/form4&quot;</span>,<br>                HttpMethod.GET,<br>                <span class="hljs-literal">null</span>,<br>                String.class<br>        );<br><br>        <span class="hljs-comment">// 获取响应的JSON数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">responseBody</span> <span class="hljs-operator">=</span> response.getBody();<br><br>        <span class="hljs-comment">// 在控制台输出JSON数据</span><br>        System.out.println(responseBody);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure> <img src="/2024/03/04/HOK%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20230611105826066.png" class="">  <img src="/2024/03/04/HOK%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20230611111632803.png" class=""> ]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>视频的存储与使用</title>
    <link href="/2023/03/26/%E8%A7%86%E9%A2%91%E7%9A%84%E5%AD%98%E5%82%A8%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/26/%E8%A7%86%E9%A2%91%E7%9A%84%E5%AD%98%E5%82%A8%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="视频的存储与使用"><a href="#视频的存储与使用" class="headerlink" title="视频的存储与使用"></a>视频的存储与使用</h1><p>数据库可以存储视频，但是通常不会将大型文件（如视频、音频等）直接存储在数据库中，因为这会导致数据库变得过于庞大，降低数据库的性能，增加维护成本。</p><p>通常更好的做法是将视频文件存储在服务器的文件系统中，然后在数据库中保存该视频文件的链接地址（比如下面用的服务器上的URL），通过链接地址获取视频文件。</p><h3 id="转为base64编码方法"><a href="#转为base64编码方法" class="headerlink" title="转为base64编码方法"></a>转为base64编码方法</h3><p>视频文件可以生成base64编码。<strong>base64编码是一种将二进制数据转换为ASCII字符串的编码方式，因此任何类型的文件，包括视频文件，都可以通过base64编码进行转换和传输。</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 读取视频文件</span><br><span class="hljs-variable">$video_path</span> = <span class="hljs-string">&#x27;path/to/video.mp4&#x27;</span>;<br><span class="hljs-variable">$video_data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$video_path</span>);<br><br><span class="hljs-comment">// 将视频数据转换为base64编码</span><br><span class="hljs-variable">$video_base64</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$video_data</span>);<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> video_base64 = jsonResponse.getString(<span class="hljs-string">&quot;video_base64&quot;</span>)<br><br><span class="hljs-comment">// 解码Base64字符串为字节数组</span><br><span class="hljs-keyword">val</span> videoData = Base64.decode(video_base64, Base64.DEFAULT)<br><br><span class="hljs-comment">// 将字节数组写入临时文件</span><br><span class="hljs-keyword">val</span> videoFile = File.createTempFile(<span class="hljs-string">&quot;temp_video&quot;</span>, <span class="hljs-string">&quot;.mp4&quot;</span>)<br>videoFile.writeBytes(videoData)<br><br><span class="hljs-comment">// 将临时文件路径传递给VideoView进行播放</span><br><span class="hljs-keyword">val</span> videoView: VideoView = findViewById(R.id.video_view)<br>videoView.setVideoPath(videoFile.absolutePath)<br>videoView.start()<br></code></pre></td></tr></table></figure><p>弊端：生成base64编码会将数据大小增加约1.33倍，对于大型视频文件，会导致性能和带宽占用问题。</p><h3 id="Allowed-memory-size-of-134217728-bytes-exhausted-tried-to-allocate-68964352-bytes"><a href="#Allowed-memory-size-of-134217728-bytes-exhausted-tried-to-allocate-68964352-bytes" class="headerlink" title="Allowed memory size of 134217728 bytes exhausted (tried to allocate 68964352 bytes)"></a>Allowed memory size of 134217728 bytes exhausted (tried to allocate 68964352 bytes)</h3><p>对于内存稍微大一点的视频文件，会出现这个问题。</p><p>原因：PHP脚本尝试使用的内存超过了PHP配置文件中允许使用的最大内存限制。默认情况下，PHP配置文件中的<code>memory_limit</code>指令设置为128M，因此当使用的内存超过此限制时，就会出现错误。</p><p>解决：</p><ol><li>增加内存限制：开头使用<code>ini_set(&#39;memory_limit&#39;, &#39;256M&#39;);</code>增加内存限制。</li><li>优化代码：优化代码来减少内存使用量。例如，在循环中使用<code>unset()</code>函数释放不需要的变量和数组；使用<code>mysqli_fetch_array()</code>替代<code>mysqli_fetch_all()</code>等方法。</li><li>分割任务：如果你需要处理大量数据，可以分割为多个步骤，在每个步骤中处理一部分数据，避免一次性处理大量数据导致内存不足的问题。</li></ol><p><strong>注：使用<code>ini_set()</code>函数修改内存限制之前，需要检查是否有足够的可用内存。如果服务器上没有足够的可用内存，那么增加内存限制可能会导致服务器崩溃。最好的方案是优化代码，减少内存使用量。</strong></p><h3 id="我的解决方法："><a href="#我的解决方法：" class="headerlink" title="我的解决方法："></a>我的解决方法：</h3><p>使用<strong>分块传输</strong>的方法，将Base64字符串分成多个较小的块进行传输，避免一次传输大量数据导致网络传输过慢或者<strong>内存不足的问题</strong>。</p><h5 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h5><ol><li>在服务器端，将视频文件读入内存，转换为Base64字符串。</li><li>将Base64字符串按照一定的块大小进行分块，每个块不超过一定的大小（一般为1MB），将每个块的数据单独发送给客户端。</li><li>客户端收到数据后，将每个块的数据拼接在一起，得到完整的Base64字符串。</li><li>客户端使用Base64字符串解码并播放视频。</li></ol><p>服务器端：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;memory_limit&#x27;</span>, <span class="hljs-string">&#x27;256M&#x27;</span>);<br><br><span class="hljs-comment">// 读取视频文件</span><br><span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;/path/to/video.mp4&#x27;</span>;<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>);<br><br><span class="hljs-comment">// 转换为Base64字符串</span><br><span class="hljs-variable">$base64</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$data</span>);<br><br><span class="hljs-comment">// 分块传输数据</span><br><span class="hljs-variable">$block_size</span> = <span class="hljs-number">1048576</span>; <span class="hljs-comment">// 1MB</span><br><span class="hljs-variable">$chunks</span> = <span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-variable">$base64</span>, <span class="hljs-variable">$block_size</span>);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$chunks</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$chunk</span>) &#123;<br>    <span class="hljs-comment">// 发送数据块</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$chunk</span>;<br>    <span class="hljs-comment">// 刷新输出缓冲区，确保数据即时发送</span><br>    <span class="hljs-title function_ invoke__">flush</span>();<br>    <span class="hljs-title function_ invoke__">ob_flush</span>();<br>&#125;<br><br><span class="hljs-comment">//  下面是拼接块，不需要使用，仅记录</span><br><span class="hljs-comment">// 拼接分块数据为一个完整数据</span><br><span class="hljs-variable">$completeData</span> = <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$chunks</span>);<br><br><span class="hljs-comment">// 返回拼接后的完整数据</span><br><span class="hljs-keyword">return</span> <span class="hljs-variable">$completeData</span>;<br></code></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 建立HTTP连接</span><br><span class="hljs-keyword">val</span> url = URL(<span class="hljs-string">&quot;http://example.com/video.php&quot;</span>)<br><span class="hljs-keyword">val</span> connection = url.openConnection() <span class="hljs-keyword">as</span> HttpURLConnection<br>connection.requestMethod = <span class="hljs-string">&quot;GET&quot;</span><br><br><span class="hljs-comment">// 接收数据块并拼接</span><br><span class="hljs-keyword">val</span> base64 = StringBuilder()<br><span class="hljs-keyword">val</span> input: InputStream = connection.inputStream<br><span class="hljs-keyword">val</span> buffer = ByteArray(<span class="hljs-number">1024</span>)<br><span class="hljs-keyword">var</span> bytesRead: <span class="hljs-built_in">Int</span><br><span class="hljs-keyword">while</span> (input.read(buffer).also &#123; bytesRead = it &#125; &gt; <span class="hljs-number">0</span>) &#123;<br>    base64.append(String(buffer, <span class="hljs-number">0</span>, bytesRead))<br>&#125;<br><br><span class="hljs-comment">// 解码并播放视频</span><br><span class="hljs-keyword">val</span> base64String = base64.toString()<br><span class="hljs-keyword">val</span> <span class="hljs-keyword">data</span> = Base64.decode(base64String, Base64.DEFAULT)<br><span class="hljs-keyword">val</span> file = File(getExternalFilesDir(<span class="hljs-literal">null</span>), <span class="hljs-string">&quot;video.mp4&quot;</span>)<br><span class="hljs-keyword">val</span> output = FileOutputStream(file)<br>output.write(<span class="hljs-keyword">data</span>)<br>output.close()<br></code></pre></td></tr></table></figure><p><em>注：使用1MB大小的块可以减少网络请求的次数，从而提高文件下载速度。同时，1MB也是一种比较合理的块大小，可以避免在内存中占用太多空间，同时又不会增加太多的I&#x2F;O操作。</em></p><h3 id="客户端直接从URL下载视频文件"><a href="#客户端直接从URL下载视频文件" class="headerlink" title="客户端直接从URL下载视频文件"></a>客户端直接从URL下载视频文件</h3><p> <code>DownloadManager</code> 类来执行文件下载</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> downloadUrl = <span class="hljs-string">&quot;视频路径  .mp4&quot;</span><br><span class="hljs-keyword">val</span> fileName = <span class="hljs-string">&quot;myvideo.mp4&quot;</span><br><span class="hljs-keyword">val</span> request = DownloadManager.Request(Uri.parse(downloadUrl))<br>    .setTitle(fileName)<br>    .setDescription(<span class="hljs-string">&quot;Downloading&quot;</span>)<br>    .setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)<br>    .setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, fileName)<br><span class="hljs-keyword">val</span> downloadManager = getSystemService(Context.DOWNLOAD_SERVICE) <span class="hljs-keyword">as</span> DownloadManager<br>downloadManager.enqueue(request)<br></code></pre></td></tr></table></figure><p><code>downloadUrl</code> 是视频文件的 URL</p><p><code>fileName</code> 是下载后保存的文件名</p><p><code>DownloadManager.Request</code> 设置文件的一些属性，如下载时显示的名称、描述和存储位置等</p><p><code>DownloadManager</code> 在执行下载时，将下载请求加入到下载队列中</p><p><strong>下载文件存储在外部公共目录的 DOWNLOADS 目录下，用户要在设备上使用其他应用程序访问这些文件，需要在清单文件中添加权限：</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">&lt;uses-permission android:name=<span class="hljs-string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h5 id="使用视频文件"><a href="#使用视频文件" class="headerlink" title="使用视频文件"></a>使用视频文件</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> filePath = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).absolutePath + <span class="hljs-string">&quot;/myvideo.mp4&quot;</span><br><span class="hljs-keyword">val</span> videoView = findViewById&lt;VideoView&gt;(R.id.videoView)<br>videoView.setVideoPath(filePath)<br>videoView.setOnPreparedListener &#123; mp -&gt; mp.start() &#125;<br></code></pre></td></tr></table></figure><p> <code>setVideoPath()</code> 方法将视频文件的路径设置为 <code>VideoView</code> 的源</p><p> <code>setOnPreparedListener()</code> 方法，等待 <code>VideoView</code> 准备好后开始播放视频</p><h5 id="出现权限问题：No-permission-to-write-to-x2F-storage-x2F-emulated-x2F-0-x2F-Download-x2F-video-mp4"><a href="#出现权限问题：No-permission-to-write-to-x2F-storage-x2F-emulated-x2F-0-x2F-Download-x2F-video-mp4" class="headerlink" title="出现权限问题：No permission to write to &#x2F;storage&#x2F;emulated&#x2F;0&#x2F;Download&#x2F;video.mp4"></a>出现权限问题：No permission to write to &#x2F;storage&#x2F;emulated&#x2F;0&#x2F;Download&#x2F;video.mp4</h5><p><strong>从 Android 6.0（API 级别 23）开始，应用程序需要在运行时获得访问外部存储设备的权限。</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">if</span> (ContextCompat.checkSelfPermission(<span class="hljs-keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)<br>    != PackageManager.PERMISSION_GRANTED) &#123;<br>    ActivityCompat.requestPermissions(<span class="hljs-keyword">this</span>,<br>            arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE),<br>            MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE)<br>&#125;<br></code></pre></td></tr></table></figure><p><em>如果Activity中使用，将 <code>this</code> 替换为Activity。如果在片段中使用，将 <code>this</code> 替换为 <code>requireActivity()</code>。如果在服务（Service）中使用，则需要传递一个上下文对象。</em></p><p><code>MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE</code>： 自定义的常量，用于标识请求 WRITE_EXTERNAL_STORAGE 权限的权限请求，该值可以是任何整数，只要与应用程序中其他权限请求不冲突即可。</p><h5 id="判断是否获得权限"><a href="#判断是否获得权限" class="headerlink" title="判断是否获得权限"></a>判断是否获得权限</h5><p>上面的代码请求了 WRITE_EXTERNAL_STORAGE 权限。当用户响应权限请求时，<code>onRequestPermissionsResult()</code> 方法将被调用，在此方法中检查用户是否授予了所需的权限。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onRequestPermissionsResult</span><span class="hljs-params">(requestCode: <span class="hljs-type">Int</span>, permissions: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function">        grantResults: <span class="hljs-type">IntArray</span>)</span></span> &#123;<br>    <span class="hljs-keyword">when</span> (requestCode) &#123;<br>        MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE -&gt; &#123;<br>            <span class="hljs-comment">// 如果请求被取消，结果数组将为空</span><br>            <span class="hljs-keyword">if</span> (grantResults.isNotEmpty() &amp;&amp; grantResults[<span class="hljs-number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;<br>                <span class="hljs-comment">// 权限已授予，执行写入外部存储设备的操作</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 权限被拒绝，向用户解释为什么需要这个权限</span><br>            &#125;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><p><em>有关数据库的连接参见前面文章</em></p><h4 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;memory_limit&#x27;</span>, <span class="hljs-string">&#x27;512M&#x27;</span>);<br><br><span class="hljs-variable">$json</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$json</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><br><span class="hljs-comment">// 连接到MySQL数据库</span><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;mydatabase&quot;</span>;<br><br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);<br><br><span class="hljs-comment">// 从MySQL表中获取包含图像路径的记录</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT video FROM video WHERE id = &#x27;<span class="hljs-subst">$id</span>&#x27;&quot;</span>;<br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch_assoc</span>();<br><br><span class="hljs-variable">$video_path</span> = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;video&quot;</span>];<br><span class="hljs-variable">$type</span> = <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$video_path</span>, PATHINFO_EXTENSION);<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$video_path</span>);<br><span class="hljs-variable">$base64</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$data</span>);<br><br><span class="hljs-comment">//分块</span><br><span class="hljs-variable">$size</span> = <span class="hljs-number">1048576</span>;<br><span class="hljs-variable">$chunks</span> = <span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-variable">$base64</span>, <span class="hljs-variable">$size</span>);<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$chunks</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$chunk</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$chunk</span>;<br>    <span class="hljs-title function_ invoke__">flush</span>();<br>    <span class="hljs-title function_ invoke__">ob_flush</span>();<br>&#125;<br><br><span class="hljs-comment">//$response[&quot;video_base64&quot;] = $base64;</span><br><span class="hljs-comment">//echo json_encode($response);</span><br><br><span class="hljs-comment">// 关闭数据库连接</span><br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">CoroutineScope(Dispatchers.IO).launch &#123;<br>    <span class="hljs-keyword">val</span> url = URL(<span class="hljs-string">&quot;http://……/…….php&quot;</span>)<span class="hljs-comment">// 初始化一个URL对象，使用服务器URL。</span><br><span class="hljs-keyword">val</span> connection = url.openConnection() <span class="hljs-keyword">as</span> HttpURLConnection <span class="hljs-comment">// 使用HttpURLConnection类打开与服务器的连接。</span><br>connection.requestMethod = <span class="hljs-string">&quot;GET&quot;</span> <span class="hljs-comment">// 设置请求方法为GET。</span><br>connection.doOutput = <span class="hljs-literal">true</span> <span class="hljs-comment">// 表示该请求将有一个输出。</span><br>connection.setRequestProperty(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>) <span class="hljs-comment">// 将请求的内容类型设置为JSON。</span><br><span class="hljs-keyword">var</span> id: <span class="hljs-built_in">Int</span> = <span class="hljs-number">1</span> <span class="hljs-comment">// 使用值为1初始化id变量。</span><br><span class="hljs-keyword">val</span> jsonObject = JSONObject() <span class="hljs-comment">// 初始化一个新的JSON对象。</span><br>jsonObject.put(<span class="hljs-string">&quot;id&quot;</span>, id) <span class="hljs-comment">// 将id键值对添加到JSON对象中。</span><br><br><span class="hljs-keyword">val</span> outputWriter = OutputStreamWriter(connection.outputStream) <span class="hljs-comment">// 获取连接的输出流。</span><br>outputWriter.write(jsonObject.toString()) <span class="hljs-comment">// 将JSON对象作为字符串写入输出流中。</span><br>outputWriter.flush() <span class="hljs-comment">// 刷新输出流。</span><br>outputWriter.close() <span class="hljs-comment">// 关闭输出流。</span><br><br><span class="hljs-keyword">val</span> responseCode = connection.responseCode <span class="hljs-comment">// 获取连接的响应代码。</span><br><span class="hljs-keyword">if</span> (responseCode == HttpURLConnection.HTTP_OK) &#123; <span class="hljs-comment">// 检查响应代码是否为HTTP OK（200）。</span><br>        <br>        <span class="hljs-keyword">val</span> inputStream = connection.inputStream <span class="hljs-comment">// 获取连接的输入流。</span><br><span class="hljs-keyword">val</span> base64 = StringBuilder() <span class="hljs-comment">// 初始化一个新的StringBuilder对象以存储Base64编码的视频数据。</span><br><span class="hljs-keyword">val</span> buffer = ByteArray(<span class="hljs-number">1024</span>) <span class="hljs-comment">// 初始化一个新的字节数组以存储数据。</span><br><span class="hljs-keyword">var</span> bytesRead: <span class="hljs-built_in">Int</span> <span class="hljs-comment">// 初始化一个新的bytesRead变量。</span><br><span class="hljs-keyword">while</span> (inputStream.read(buffer).also &#123; bytesRead = it &#125; &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 逐块读取数据。</span><br>    base64.append(String(buffer, <span class="hljs-number">0</span>, bytesRead)) <span class="hljs-comment">// 将每块数据作为字符串追加到StringBuilder对象中。</span><br>&#125;<br>Log.d(<span class="hljs-string">&quot;MainActivity&quot;</span>, <span class="hljs-string">&quot;Response received: <span class="hljs-variable">$base64</span>&quot;</span>) <span class="hljs-comment">// 将响应记录到控制台中。</span><br><span class="hljs-comment">// 解码并播放视频</span><br><span class="hljs-keyword">val</span> base64String = base64.toString() <span class="hljs-comment">// 获取Base64字符串。</span><br><span class="hljs-keyword">val</span> <span class="hljs-keyword">data</span> = Base64.decode(base64String, Base64.DEFAULT) <span class="hljs-comment">// 将Base64字符串解码为字节数组。</span><br><span class="hljs-keyword">val</span> file = File(getExternalFilesDir(<span class="hljs-literal">null</span>), <span class="hljs-string">&quot;video.mp4&quot;</span>) <span class="hljs-comment">// 初始化一个新的File对象以指定本地文件路径。</span><br><span class="hljs-keyword">val</span> output = FileOutputStream(file) <span class="hljs-comment">// 初始化一个新的FileOutputStream对象以将字节数组写入文件。</span><br>output.write(<span class="hljs-keyword">data</span>) <span class="hljs-comment">// 将字节数组写入文件。</span><br>output.close() <span class="hljs-comment">// 关闭FileOutputStream对象。</span><br>        <span class="hljs-keyword">val</span> videoView: VideoView = bd.videoView<br>        file.writeBytes(<span class="hljs-keyword">data</span>)<br>        withContext(Dispatchers.Main)&#123;<br>            videoView.setVideoPath(file.absolutePath)<br>            videoView.start()<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">while</span> (inputStream.read(buffer).also &#123; bytesRead = it &#125; &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 逐块读取数据。</span><br>    base64.append(String(buffer, <span class="hljs-number">0</span>, bytesRead)) <span class="hljs-comment">// 将每块数据作为字符串追加到StringBuilder对象中。</span><br>&#125;<br></code></pre></td></tr></table></figure><p>从连接的输入流中逐块读取视频数据并将其存储在一个StringBuilder对象中，以便后续进行Base64解码和写入本地文件。在循环中，每次从输入流中读取的数据块都将存储在一个指定大小的字节数组中。 <code>inputStream.read(buffer)</code> 将数据块读入缓冲区中，并返回读取的字节数，返回值为-1时表示已到达流的结尾。通过 <code>also</code> 和 <code>it</code> 确保读取到的字节数能够赋值给 <code>bytesRead</code> 变量，并且该变量的值在每次循环迭代中都会被更新。</p><p>在每次循环迭代中，使用 <code>String(buffer, 0, bytesRead)</code> 将读取的字节数组转换为字符串，追加到StringBuilder对象中。第二个参数 <code>0</code> 表示从缓冲区的第一个字节开始转换，第三个参数 <code>bytesRead</code> 表示只转换缓冲区中的前 <code>bytesRead</code> 个字节。</p><h4 id="URL下载"><a href="#URL下载" class="headerlink" title="URL下载"></a>URL下载</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//设置权限，没有异常处理</span><br><span class="hljs-keyword">val</span> MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE = <span class="hljs-number">123</span><br><br><span class="hljs-keyword">if</span> (ContextCompat.checkSelfPermission(<span class="hljs-keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)<br>    != PackageManager.PERMISSION_GRANTED) &#123;<br>    ActivityCompat.requestPermissions(<span class="hljs-keyword">this</span>,<br>        arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE),<br>        MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE)<br>&#125;<br><br><span class="hljs-comment">//下载视频</span><br><span class="hljs-keyword">val</span> downloadUrl = <span class="hljs-string">&quot;http://……/……/…….mp4&quot;</span><br><span class="hljs-keyword">val</span> fileName = <span class="hljs-string">&quot;video.mp4&quot;</span><br><span class="hljs-keyword">val</span> request = DownloadManager.Request(Uri.parse(downloadUrl))<br>    .setTitle(fileName)<br>    .setDescription(<span class="hljs-string">&quot;Downloading&quot;</span>)<br>    .setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)<br>    .setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, fileName)<br><span class="hljs-keyword">val</span> downloadManager = getSystemService(Context.DOWNLOAD_SERVICE) <span class="hljs-keyword">as</span> DownloadManager<br>downloadManager.enqueue(request)<br><br><span class="hljs-keyword">val</span> filePath = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).absolutePath + <span class="hljs-string">&quot;/video.mp4&quot;</span><br><span class="hljs-keyword">val</span> videoView = findViewById&lt;VideoView&gt;(R.id.videoView)<br>videoView.setVideoPath(filePath)<br>videoView.setOnPreparedListener &#123; mp -&gt; mp.start() &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android studio</category>
      
      <category>数据库相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android studio</tag>
      
      <tag>MySql</tag>
      
      <tag>Apache服务器，PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android将图片上传到PHP服务器，并通过调用MySql数据显示图片</title>
    <link href="/2023/03/22/Android%E5%B0%86%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%88%B0PHP%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E5%B9%B6%E9%80%9A%E8%BF%87%E8%B0%83%E7%94%A8MySql%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/"/>
    <url>/2023/03/22/Android%E5%B0%86%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%88%B0PHP%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E5%B9%B6%E9%80%9A%E8%BF%87%E8%B0%83%E7%94%A8MySql%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h1 id="Android将图片上传到PHP服务器，并通过调用MySql数据显示图片"><a href="#Android将图片上传到PHP服务器，并通过调用MySql数据显示图片" class="headerlink" title="Android将图片上传到PHP服务器，并通过调用MySql数据显示图片"></a>Android将图片上传到PHP服务器，并通过调用MySql数据显示图片</h1><h2 id="PHP处理上传数据，图像数据保存到MySQL"><a href="#PHP处理上传数据，图像数据保存到MySQL" class="headerlink" title="PHP处理上传数据，图像数据保存到MySQL"></a>PHP处理上传数据，图像数据保存到MySQL</h2><ol><li>将字节数组转换为Base64编码字符串</li><li>使用HTTP POST请求将Base64编码字符串发送到PHP服务器端</li><li>在服务器端，使用PHP解码Base64字符串并将其保存为文件</li><li>使用MySQLi模块连接到MySQL数据库</li><li>进行需要的数据库操作</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$json</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$json</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-variable">$user</span> = <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br><span class="hljs-variable">$image</span> = <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;image&#x27;</span>];<br><br><span class="hljs-comment">//$image = isset($_REQUEST[&quot;image&quot;]) ? $_REQUEST[&quot;image&quot;] : &quot;&quot;;</span><br><span class="hljs-comment">// 获取POST请求中的Base64编码字符串</span><br><span class="hljs-variable">$base64_string</span> = <span class="hljs-variable">$image</span>;<br><span class="hljs-comment">// 解码Base64编码字符串</span><br><span class="hljs-variable">$image_data</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$base64_string</span>);<br><span class="hljs-comment">// 为图像生成唯一的文件名</span><br><span class="hljs-variable">$image_name</span> = <span class="hljs-title function_ invoke__">uniqid</span>() . <span class="hljs-string">&#x27;.png&#x27;</span>;<br><span class="hljs-comment">// 将图像保存为文件</span><br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;uploads/avatar/&#x27;</span> . <span class="hljs-variable">$image_name</span>, <span class="hljs-variable">$image_data</span>);<br><br><span class="hljs-comment">// 连接到MySQL数据库</span><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;mydatabase&quot;</span>;<br><br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);<br><br><span class="hljs-comment">//UPDATE &lt;表名&gt; SET 字段 1=值 1 [,字段 2=值 2… ] [WHERE 子句 ]</span><br><br><span class="hljs-comment">// 插入文件路径到MySQL表中的相应列中，这里是更新数据库数据，更改语句即可</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot; UPDATE users SET avatar = &#x27;uploads/avatar/<span class="hljs-subst">$image_name</span>&#x27; WHERE user = &#x27;<span class="hljs-subst">$user</span>&#x27; &quot;</span>;<br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;更新数据库成功&quot;</span>;<br><br><span class="hljs-comment">// 关闭数据库连接</span><br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h5 id="另一种上传图像的方法-没有尝试过"><a href="#另一种上传图像的方法-没有尝试过" class="headerlink" title="另一种上传图像的方法[没有尝试过]"></a>另一种上传图像的方法[没有尝试过]</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> imageByteArray: ByteArray = <span class="hljs-comment">//从图像选择器获取图像字节数组</span><br><span class="hljs-keyword">val</span> base64String = Base64.encodeToString(imageByteArray, Base64.DEFAULT)<br><br><span class="hljs-keyword">val</span> url = URL(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">val</span> conn = url.openConnection() <span class="hljs-keyword">as</span> HttpURLConnection<br>conn.requestMethod = <span class="hljs-string">&quot;POST&quot;</span><br>conn.doOutput = <span class="hljs-literal">true</span><br><span class="hljs-keyword">val</span> os = conn.outputStream<br>os.write(base64String.toByteArray())<br>os.flush()<br>os.close()<br><br><span class="hljs-comment">// 检查上传是否成功</span><br><span class="hljs-keyword">if</span> (conn.responseCode == HttpURLConnection.HTTP_OK) &#123;<br>    <span class="hljs-comment">// 上传成功</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 上传失败</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="另一种检索图像的方法-没有尝试过，将BASE64直接存储，很占空间-，解码为-Bitmap"><a href="#另一种检索图像的方法-没有尝试过，将BASE64直接存储，很占空间-，解码为-Bitmap" class="headerlink" title="另一种检索图像的方法[没有尝试过，将BASE64直接存储，很占空间]，解码为 Bitmap"></a>另一种检索图像的方法[没有尝试过，将BASE64直接存储，很占空间]，解码为 Bitmap</h5><p>&#x2F;&#x2F;<code>get_image.php</code> 文件需要从数据库中检索 Base64 字符串，作为响应发送回客户端</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 创建 HTTP 连接</span><br><span class="hljs-keyword">val</span> url = URL(<span class="hljs-string">&quot;get_image.php&quot;</span>)<br><span class="hljs-keyword">val</span> conn = url.openConnection() <span class="hljs-keyword">as</span> HttpURLConnection<br>conn.requestMethod = <span class="hljs-string">&quot;GET&quot;</span><br>conn.connect()<br><br><span class="hljs-comment">// 获取响应数据</span><br><span class="hljs-keyword">val</span> inputStream = conn.inputStream<br><span class="hljs-keyword">val</span> encodedImage = inputStream.bufferedReader().use &#123; it.readText() &#125;<br><br><span class="hljs-comment">// 解码 Base64 字符串为字节数组</span><br><span class="hljs-keyword">val</span> decodedImage = Base64.decode(encodedImage, Base64.DEFAULT)<br><br><span class="hljs-comment">// 将字节数组转换为 Bitmap</span><br><span class="hljs-keyword">val</span> bitmap = BitmapFactory.decodeByteArray(decodedImage, <span class="hljs-number">0</span>, decodedImage.size)<br><br><span class="hljs-comment">// 将 Bitmap 显示在 ImageView 中</span><br><span class="hljs-keyword">val</span> imageView = findViewById(R.id.image_view)<br>imageView.setImageBitmap(bitmap)<br></code></pre></td></tr></table></figure><h2 id="基于-PHP-服务器的文件上传和保存"><a href="#基于-PHP-服务器的文件上传和保存" class="headerlink" title="基于 PHP 服务器的文件上传和保存"></a>基于 PHP 服务器的文件上传和保存</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 处理文件上传</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;fileToUpload&quot;</span>])) &#123;<br>    <span class="hljs-comment">// 获取上传的文件信息</span><br>    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;fileToUpload&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>    <span class="hljs-variable">$filesize</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;fileToUpload&quot;</span>][<span class="hljs-string">&quot;size&quot;</span>];<br>    <span class="hljs-variable">$filetype</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;fileToUpload&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>];<br>    <span class="hljs-variable">$filecontent</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;fileToUpload&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br><span class="hljs-comment">// 连接 MySQL 数据库</span><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;SERVER&quot;</span>;<br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;ROOT&quot;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;DATA&quot;</span>;<br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);<br><br><span class="hljs-comment">// 插入文件信息到数据库</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO files (filename, filesize, filetype, filecontent) VALUES (?, ?, ?, ?)&quot;</span>;<br><span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&quot;siss&quot;</span>, <span class="hljs-variable">$filename</span>, <span class="hljs-variable">$filesize</span>, <span class="hljs-variable">$filetype</span>, <span class="hljs-variable">$filecontent</span>);<br><span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br><span class="hljs-variable">$fileId</span> = <span class="hljs-variable">$stmt</span>-&gt;insert_id;<br><br><span class="hljs-comment">// 返回文件信息给客户端</span><br><span class="hljs-variable">$response</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&quot;fileId&quot;</span> =&gt; <span class="hljs-variable">$fileId</span>,<br>    <span class="hljs-string">&quot;filename&quot;</span> =&gt; <span class="hljs-variable">$filename</span>,<br>    <span class="hljs-string">&quot;filesize&quot;</span> =&gt; <span class="hljs-variable">$filesize</span>,<br>    <span class="hljs-string">&quot;filetype&quot;</span> =&gt; <span class="hljs-variable">$filetype</span>,<br>    <span class="hljs-string">&quot;createdAt&quot;</span> =&gt; <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;Y-m-d H:i:s&quot;</span>)<br>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: application/json&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$response</span>);<br><span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Android中使用Kotlin进行图片的BASE64编码和解码"><a href="#Android中使用Kotlin进行图片的BASE64编码和解码" class="headerlink" title="Android中使用Kotlin进行图片的BASE64编码和解码"></a>Android中使用Kotlin进行图片的BASE64编码和解码</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> android.graphics.Bitmap<br><span class="hljs-keyword">import</span> android.graphics.BitmapFactory<br><span class="hljs-keyword">import</span> android.util.Base64<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream<br><br><span class="hljs-comment">// 将Bitmap对象编码为BASE64字符串</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">encodeBitmapToBase64</span><span class="hljs-params">(bitmap: <span class="hljs-type">Bitmap</span>)</span></span>: String &#123;<br>    <span class="hljs-comment">// 创建一个输出流，用于将Bitmap对象压缩为PNG格式的字节数组</span><br>    <span class="hljs-keyword">val</span> outputStream = ByteArrayOutputStream()<br>    bitmap.compress(Bitmap.CompressFormat.PNG, <span class="hljs-number">100</span>, outputStream)<br>    <span class="hljs-keyword">val</span> byteArray = outputStream.toByteArray()<br>    <span class="hljs-comment">// 使用Base64类的encodeToString函数将字节数组编码为BASE64字符串并返回</span><br>    <span class="hljs-keyword">return</span> Base64.encodeToString(byteArray, Base64.DEFAULT)<br>&#125;<br><br><span class="hljs-comment">// 将BASE64字符串解码为Bitmap对象</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">decodeBase64ToBitmap</span><span class="hljs-params">(base64String: <span class="hljs-type">String</span>)</span></span>: Bitmap &#123;<br>    <span class="hljs-comment">// 使用Base64类的decode函数将BASE64字符串解码为字节数组</span><br>    <span class="hljs-keyword">val</span> decodedByteArray = Base64.decode(base64String, Base64.DEFAULT)<br>    <span class="hljs-comment">// 使用BitmapFactory类的decodeByteArray函数将字节数组转换为Bitmap对象并返回</span><br>    <span class="hljs-keyword">return</span> BitmapFactory.decodeByteArray(decodedByteArray, <span class="hljs-number">0</span>, decodedByteArray.size)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>bitmap.compress(Bitmap.CompressFormat.PNG, 100, outputStream)</code></p><p>第二个参数用于指定压缩质量的参数，它在压缩PNG格式的图片时并没有实际意义[PNG格式是一种无损压缩格式，压缩质量参数的值并不会影响压缩后图片的清晰度和质量]。因此，无论将这个参数设置为多少，生成的PNG图片的质量都是一样的。</p><p>但为了确保图片在转换为PNG格式时不会丢失任何信息，通常会将这个参数的值设置为100。在压缩其他格式的图片时，这个参数的值就会起到实际的作用，用于指定压缩质量。如：压缩JPEG格式的图片时，这个参数的值越高，生成的压缩后的图片质量越好，对应文件大小越大。</p><p><code>Base64.encodeToString(byteArray, Base64.DEFAULT)</code></p><p>第二个参数指定了编码方式。</p><ul><li><code>Base64.DEFAULT</code>：默认值，使用标准的Base64编码方式进行编码。编码后的字符串会被分成若干行，每行长度为76个字符，每行末尾会添加一个换行符。</li><li><code>Base64.NO_PADDING</code>：不进行填充操作，也就是说编码后的字符串长度不一定是4的倍数。</li><li><code>Base64.NO_WRAP</code>：编码后的字符串不进行换行操作，也就是说所有的字符都在一行上。</li><li><code>Base64.URL_SAFE</code>：使用URL和文件名安全的Base64编码方式进行编码。在这种编码方式中，字符+和&#x2F;被替换为-和_，而且编码后的字符串不进行换行操作。</li></ul><p><code>BitmapFactory.decodeByteArray(decodedByteArray, 0, decodedByteArray.size)</code></p><ul><li><code>decodedByteArray</code>是包含BASE64解码后的字节数组，这个数组是从输入的BASE64字符串中解码得到的。</li><li><code>BitmapFactory.decodeByteArray()</code>是一个静态方法，它可以将一个字节数组解码为一个<code>Bitmap</code>对象。该方法接收三个参数：<ul><li>第一个参数是要解码的字节数组。</li><li>第二个参数是解码的偏移量，通常设置为0，表示从字节数组的起始位置开始解码。</li><li>第三个参数是解码的长度，通常设置为字节数组的长度，表示解码整个字节数组。</li></ul></li></ul><p><em>注：解码过程发生了错误或者字节数组无法被正确解码为一个<code>Bitmap</code>对象，该方法会返回null</em></p><h2 id="ImageView-获取-Bitmap-图像"><a href="#ImageView-获取-Bitmap-图像" class="headerlink" title="ImageView 获取 Bitmap 图像"></a>ImageView 获取 Bitmap 图像</h2><p>要从 ImageView 获取 Bitmap 图像，可以使用以下代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> imageView: ImageView = findViewById(R.id.imageView)<br><span class="hljs-keyword">val</span> bitmap = (imageView.drawable <span class="hljs-keyword">as</span> BitmapDrawable).bitmap<br></code></pre></td></tr></table></figure><p>首先获取 ImageView 对象，然后使用 <code>drawable</code> 属性获取 ImageView 的 Drawable 对象。由于这里使用的是 BitmapDrawable，因此可以将其转换为 Bitmap 对象并将其分配给一个变量。</p><p><code>val bitmap = (imageView.drawable as BitmapDrawable).bitmap</code>分析：</p><p>获取 ImageView 中显示的 Bitmap 对象。</p><p>使用 <code>imageView.drawable</code> 属性获取 ImageView 的 Drawable 对象。</p><p>将其转换为 BitmapDrawable 对象，这是一个可以将 Drawable 转换为 Bitmap 的特殊类型。使用 <code>as</code> 操作符可以将 Drawable 对象转换为 BitmapDrawable 对象  </p><p>获得 BitmapDrawable 对象后使用 <code>bitmap</code> 属性获取其中的 Bitmap 对象，这是 BitmapDrawable 中存储 Bitmap 的位置。</p><p><strong>注意：代码假定 ImageView 中显示的 Drawable 对象是 BitmapDrawable，如果 ImageView 中显示的是其他类型的 Drawable 对象，如 ShapeDrawable、GradientDrawable 或 VectorDrawable，那么将无法将其转换为 BitmapDrawable。</strong></p><p><strong>设置图片转为Bitmap类型的</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">bd.imageView.setImageBitmap(BitmapFactory.decodeResource(resources,R.drawable.a))<br></code></pre></td></tr></table></figure><p><strong>完整代码</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">CoroutineScope(Dispatchers.IO).launch &#123;<br>    <span class="hljs-keyword">var</span> bitmap = (imageView.drawable <span class="hljs-keyword">as</span> BitmapDrawable).bitmap <span class="hljs-comment">//这个imageview一定要是Bigmap类型的</span><br><span class="hljs-keyword">var</span> pic_base : String = encodeBitmapToBase(bitmap)<br>    <span class="hljs-keyword">val</span> url = URL(<span class="hljs-string">&quot;http://172.19.136.160/postpic.php&quot;</span>)<br>    <span class="hljs-keyword">val</span> connection = url.openConnection() <span class="hljs-keyword">as</span> HttpURLConnection<br>    connection.requestMethod = <span class="hljs-string">&quot;POST&quot;</span><br>    connection.doOutput = <span class="hljs-literal">true</span><br>    connection.setRequestProperty(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>)<br>    <span class="hljs-keyword">var</span> image: String = pic_base<br>    <span class="hljs-keyword">val</span> jsonObject = JSONObject()<br>    jsonObject.put(<span class="hljs-string">&quot;user&quot;</span>, user)<br>    jsonObject.put(<span class="hljs-string">&quot;image&quot;</span>, image)<br><br>    <span class="hljs-keyword">val</span> outputWriter = OutputStreamWriter(connection.outputStream)<br>    outputWriter.write(jsonObject.toString())<br>    outputWriter.flush()<br>    outputWriter.close()<br><br>    <span class="hljs-keyword">val</span> responseCode = connection.responseCode<br>    <span class="hljs-keyword">if</span> (responseCode == HttpURLConnection.HTTP_OK) &#123;<br>        <span class="hljs-keyword">val</span> inputStream = connection.inputStream<br>        <span class="hljs-keyword">val</span> bufferedReader = BufferedReader(InputStreamReader(inputStream))<br>        <span class="hljs-keyword">val</span> response = StringBuilder()<br>        <span class="hljs-keyword">var</span> inputLine: String?<br>        <span class="hljs-keyword">while</span> (bufferedReader.readLine().also &#123; inputLine = it &#125; != <span class="hljs-literal">null</span>) &#123;<br>            response.append(inputLine)<br>        &#125;<br>        bufferedReader.close()<br>        Log.d(<span class="hljs-string">&quot;MainActivity&quot;</span>, <span class="hljs-string">&quot;Response received: <span class="hljs-variable">$response</span>&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="将-Bitmap-显示在-ImageView-上"><a href="#将-Bitmap-显示在-ImageView-上" class="headerlink" title="将 Bitmap 显示在 ImageView 上"></a>将 Bitmap 显示在 ImageView 上</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> imageView: ImageView = findViewById(R.id.imageView)<br><span class="hljs-keyword">val</span> bitmap: Bitmap = ...<br>imageView.setImageBitmap(bitmap)<br></code></pre></td></tr></table></figure><p>实现代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">Thread &#123;<br>    <span class="hljs-keyword">val</span> url = URL(<span class="hljs-string">&quot;http://192.168.56.1/getpic.php&quot;</span>)<br>    <span class="hljs-keyword">val</span> connection = url.openConnection() <span class="hljs-keyword">as</span> HttpURLConnection<br>    connection.requestMethod = <span class="hljs-string">&quot;POST&quot;</span><br>    connection.doOutput = <span class="hljs-literal">true</span><br>    connection.setRequestProperty(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>)<br>    <span class="hljs-keyword">var</span> id : <span class="hljs-built_in">Int</span><br>    id = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">val</span> jsonObject = JSONObject()<br>    jsonObject.put(<span class="hljs-string">&quot;id&quot;</span>, id)<br><br>    <span class="hljs-keyword">val</span> outputWriter = OutputStreamWriter(connection.outputStream)<br>    outputWriter.write(jsonObject.toString())<br>    outputWriter.flush()<br>    outputWriter.close()<br><br>    <span class="hljs-keyword">val</span> responseCode = connection.responseCode<br>    <span class="hljs-keyword">if</span> (responseCode == HttpURLConnection.HTTP_OK) &#123;<br>        <span class="hljs-keyword">val</span> inputStream = connection.inputStream<br>        <span class="hljs-keyword">val</span> bufferedReader = BufferedReader(InputStreamReader(inputStream))<br>        <span class="hljs-keyword">val</span> response = StringBuilder()<br>        <span class="hljs-keyword">var</span> inputLine: String?<br>        <span class="hljs-keyword">while</span> (bufferedReader.readLine().also &#123; inputLine = it &#125; != <span class="hljs-literal">null</span>) &#123;<br>            response.append(inputLine)<br>        &#125;<br>        bufferedReader.close()<br>        Log.d(<span class="hljs-string">&quot;MainActivity&quot;</span>, <span class="hljs-string">&quot;Response received: <span class="hljs-variable">$response</span>&quot;</span>)<br>        <span class="hljs-keyword">val</span> jsonResponse = JSONObject(response.toString())<br>        <span class="hljs-keyword">val</span> pic_base24 = jsonResponse.getString(<span class="hljs-string">&quot;pic_base24&quot;</span>)<br>        bd.textView2.setText(pic_base24)<br>        <span class="hljs-keyword">val</span> imageView: ImageView = bd.imageView<br>        <span class="hljs-keyword">val</span> bitmap: Bitmap = encodeBaseToBitmap(pic_base24)<br>        imageView.setImageBitmap(bitmap)<br>    &#125;<br>&#125;.start()<br></code></pre></td></tr></table></figure><p>注：最后的i<code>mageView.setImageBitmap(bitmap)</code>可能因为不在主线程报错，用Handle类，或者协程解决</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">withContext(Dispatchers.Main)&#123;<br>    <span class="hljs-keyword">val</span> bitmap: Bitmap = encodeBaseToBitmap(pic_base24)<br>    imageView.setImageBitmap(bitmap)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结果展示："><a href="#结果展示：" class="headerlink" title="结果展示："></a>结果展示：</h2><h5 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$json</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$json</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-variable">$user</span> = <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br><span class="hljs-variable">$image</span> = <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;image&#x27;</span>];<br><br><span class="hljs-comment">//$image = isset($_REQUEST[&quot;image&quot;]) ? $_REQUEST[&quot;image&quot;] : &quot;&quot;;</span><br><span class="hljs-comment">// 获取POST请求中的Base64编码字符串</span><br><span class="hljs-variable">$base64_string</span> = <span class="hljs-variable">$image</span>;<br><span class="hljs-comment">// 解码Base64编码字符串</span><br><span class="hljs-variable">$image_data</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$base64_string</span>);<br><span class="hljs-comment">// 为图像生成唯一的文件名</span><br><span class="hljs-variable">$image_name</span> = <span class="hljs-title function_ invoke__">uniqid</span>() . <span class="hljs-string">&#x27;.png&#x27;</span>;<br><span class="hljs-comment">// 将图像保存为文件</span><br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;uploads/avatar/&#x27;</span> . <span class="hljs-variable">$image_name</span>, <span class="hljs-variable">$image_data</span>);<br><br><span class="hljs-comment">// 连接到MySQL数据库</span><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;mydatabase&quot;</span>;<br><br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);<br><br><span class="hljs-comment">//UPDATE &lt;表名&gt; SET 字段 1=值 1 [,字段 2=值 2… ] [WHERE 子句 ]</span><br><br><span class="hljs-comment">// 插入文件路径到MySQL表中的相应列中</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot; UPDATE users SET avatar = &#x27;uploads/avatar/<span class="hljs-subst">$image_name</span>&#x27; WHERE user = &#x27;<span class="hljs-subst">$user</span>&#x27; &quot;</span>;<br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;更新数据库成功&quot;</span>;<br><br><span class="hljs-comment">// 关闭数据库连接</span><br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h5 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$json</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$json</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-variable">$user</span> = <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br><br><span class="hljs-comment">// 连接到MySQL数据库</span><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;mydatabase&quot;</span>;<br><br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);<br><br><span class="hljs-comment">// 从MySQL表中获取包含图像路径的记录</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT avatar FROM users WHERE user = &#x27;<span class="hljs-subst">$user</span>&#x27;&quot;</span>;<br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch_assoc</span>();<br><br><span class="hljs-variable">$image_path</span> = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;avatar&quot;</span>];<br><span class="hljs-variable">$type</span> = <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$image_path</span>, PATHINFO_EXTENSION);<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$image_path</span>);<br><span class="hljs-comment">//$base64 = &#x27;data:image/&#x27; . $type . &#x27;;base64,&#x27; . base64_encode($data);</span><br><span class="hljs-variable">$base64</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$data</span>);<br><span class="hljs-variable">$response</span>[<span class="hljs-string">&quot;pic_base24&quot;</span>] = <span class="hljs-variable">$base64</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$response</span>);<br><br><span class="hljs-comment">// 将图像文件作为响应返回给客户端</span><br><span class="hljs-comment">//header(&#x27;Content-Type: image/png&#x27;);</span><br><span class="hljs-comment">//readfile($image_path);</span><br><br><span class="hljs-comment">// 关闭数据库连接</span><br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>程序运行后，将a.png上传到服务器，保存路径到MySQL中</strong></li></ul><p><strong>数据库更新</strong></p> <img src="/2023/03/22/Android%E5%B0%86%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%88%B0PHP%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E5%B9%B6%E9%80%9A%E8%BF%87%E8%B0%83%E7%94%A8MySql%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/1.png" class=""> <p><strong>文件写入</strong></p> <img src="/2023/03/22/Android%E5%B0%86%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%88%B0PHP%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E5%B9%B6%E9%80%9A%E8%BF%87%E8%B0%83%E7%94%A8MySql%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/2.png" class=""> <ul><li><strong>GET从数据库中查询图片路径，到服务器中找到admin 的图片，解析成Base64传回应用程序显示</strong></li></ul> <img src="/2023/03/22/Android%E5%B0%86%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%88%B0PHP%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E5%B9%B6%E9%80%9A%E8%BF%87%E8%B0%83%E7%94%A8MySql%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/3.png" class=""> ]]></content>
    
    
    <categories>
      
      <category>Android studio</category>
      
      <category>数据库相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android studio</tag>
      
      <tag>MySql</tag>
      
      <tag>Apache服务器，PHP</tag>
      
      <tag>文件上传下载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio中通过PHP脚本在Apache服务器验证账号密码</title>
    <link href="/2023/03/21/Android-Studio%E4%B8%AD%E9%80%9A%E8%BF%87PHP%E8%84%9A%E6%9C%AC%E5%9C%A8Apache%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%AA%8C%E8%AF%81%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/"/>
    <url>/2023/03/21/Android-Studio%E4%B8%AD%E9%80%9A%E8%BF%87PHP%E8%84%9A%E6%9C%AC%E5%9C%A8Apache%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%AA%8C%E8%AF%81%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio中通过PHP脚本在Apache服务器验证账号密码是否正确（在MySql中是否存在）"><a href="#Android-Studio中通过PHP脚本在Apache服务器验证账号密码是否正确（在MySql中是否存在）" class="headerlink" title="Android Studio中通过PHP脚本在Apache服务器验证账号密码是否正确（在MySql中是否存在）"></a>Android Studio中通过PHP脚本在Apache服务器验证账号密码是否正确（在MySql中是否存在）</h1><p><em>这个问题耗费了大量时间，踩了很多坑，下就解决过程进行记录</em></p><h2 id="1-不使用服务器连接MySQL"><a href="#1-不使用服务器连接MySQL" class="headerlink" title="1.不使用服务器连接MySQL"></a>1.不使用服务器连接MySQL</h2><h4 id="1-1添加-MySQL-的-JDBC-驱动程序"><a href="#1-1添加-MySQL-的-JDBC-驱动程序" class="headerlink" title="1.1添加 MySQL 的 JDBC 驱动程序"></a>1.1添加 MySQL 的 JDBC 驱动程序</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">dependencies &#123;<br>    implementation <span class="hljs-string">&#x27;mysql:mysql-connector-java:8.0.27&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-2验证账号密码"><a href="#1-2验证账号密码" class="headerlink" title="1.2验证账号密码"></a>1.2验证账号密码</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> android.os.Bundle<br><span class="hljs-keyword">import</span> android.widget.Toast<br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity<br><span class="hljs-keyword">import</span> java.sql.DriverManager<br><span class="hljs-keyword">import</span> java.sql.SQLException<br><span class="hljs-keyword">import</span> java.sql.Statement<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginActivity</span> : <span class="hljs-type">AppCompatActivity</span>() &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> DATABASE_URL = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/my_database&quot;</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> DATABASE_USER = <span class="hljs-string">&quot;root&quot;</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> DATABASE_PASSWORD = <span class="hljs-string">&quot;password&quot;</span><br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br>        setContentView(R.layout.activity_login)<br><br>        <span class="hljs-keyword">val</span> username = <span class="hljs-string">&quot;input_username&quot;</span> <span class="hljs-comment">// 替换为实际输入的用户名</span><br>        <span class="hljs-keyword">val</span> password = <span class="hljs-string">&quot;input_password&quot;</span> <span class="hljs-comment">// 替换为实际输入的密码</span><br><br>        <span class="hljs-keyword">val</span> connection = DriverManager.getConnection(DATABASE_URL, DATABASE_USER, DATABASE_PASSWORD)<br>        <span class="hljs-keyword">val</span> statement = connection.createStatement()<br>        <span class="hljs-keyword">val</span> query = <span class="hljs-string">&quot;SELECT * FROM users WHERE username = &#x27;<span class="hljs-variable">$username</span>&#x27; AND password = &#x27;<span class="hljs-variable">$password</span>&#x27;&quot;</span><br>        <span class="hljs-keyword">val</span> resultSet = statement.executeQuery(query)<br><br>        <span class="hljs-keyword">if</span> (resultSet.next()) &#123;<br>            Toast.makeText(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;登录成功&quot;</span>, Toast.LENGTH_SHORT).show()<br>            <span class="hljs-comment">// 在此处添加成功提示框的代码</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Toast.makeText(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;账号或密码错误&quot;</span>, Toast.LENGTH_SHORT).show()<br>            <span class="hljs-comment">// 在此处添加错误提示框的代码</span><br>        &#125;<br><br>        resultSet.close()<br>        statement.close()<br>        connection.close()<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p> <em>注释：onCreate() 方法中获取输入的用户名和密码，然后使用 DriverManager 类建立与数据库的连接。然后，我们创建了一个 Statement 对象并执行了查询语句。如果结果集中包含数据，则认为登录成功，并使用 Toast 显示成功提示框。</em></p><p><strong>问题：安卓虚拟机中不能访问Localhost，应改为ip地址，这就要求程序联网，同时 ‘mysql-connector-java’, version: ‘8.0.27’中缺少所需的包，会导致程序运行错误;当程序联网时，不能在主线程实现，可以在协程或者创建子线程完成； 一个重要问题——DriverManager.getConnection(DATABASE_URL, DATABASE_USER, DATABASE_PASSWORD)一直报错导致程序闪退，降低mysql-connector-java版本后解决</strong></p><p>解决：</p><p>1.导入依赖</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//数据库连接</span><br>implementation group: <span class="hljs-string">&#x27;mysql&#x27;</span>, name: <span class="hljs-string">&#x27;mysql-connector-java&#x27;</span>, version: <span class="hljs-string">&#x27;5.1.49&#x27;</span><br><span class="hljs-comment">//协程</span><br>implementation <span class="hljs-string">&#x27;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9&#x27;</span><br></code></pre></td></tr></table></figure><p>2.JDBC_URL更换为ip地址</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-string">&quot;jdbc:mysql://192.168.56.1:3306/test？useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf-8&quot;</span>,<br></code></pre></td></tr></table></figure><p>更改后的连接数据库测试代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">CoroutineScope(Dispatchers.IO).launch &#123;<br>    <span class="hljs-keyword">var</span> con: Connection<br>    <span class="hljs-keyword">var</span> sql: Statement<br>    <span class="hljs-keyword">try</span> &#123;<br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);   <span class="hljs-comment">//加载MYSQL JDBC驱动程序</span><br>        println(<span class="hljs-string">&quot;成功加载Mysql驱动程序!&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>        print(<span class="hljs-string">&quot;加载Mysql驱动程序时出错!&quot;</span>);<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        con = DriverManager.getConnection(<br>            <span class="hljs-string">&quot;jdbc:mysql://192.168.56.1:3306/test?useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf-8&quot;</span>,<br>            <span class="hljs-string">&quot;root&quot;</span>,<br>            <span class="hljs-string">&quot;123456&quot;</span><br>        );<span class="hljs-comment">//连接数据库</span><br>        println(<span class="hljs-string">&quot;成功连接Mysql服务器!&quot;</span>);<br>        sql=con.createStatement()<br>        <span class="hljs-keyword">val</span> query = <span class="hljs-string">&quot;SELECT * FROM users&quot;</span><br>        <span class="hljs-keyword">val</span> resultSet=sql.executeQuery(query)<br>        <span class="hljs-keyword">while</span>(resultSet.next())&#123;<br>            <span class="hljs-comment">//val ss=resultSet.getString(2)</span><br>            withContext(Dispatchers.Main)&#123;<br><br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>        print(<span class="hljs-string">&quot;连接数据库失败!&quot;</span>);<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台结果：</p> <img src="/2023/03/21/Android-Studio%E4%B8%AD%E9%80%9A%E8%BF%87PHP%E8%84%9A%E6%9C%AC%E5%9C%A8Apache%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%AA%8C%E8%AF%81%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/1.png" class=""> <p>在完成这段代码中了解到：</p><h2 id="SQL注入问题"><a href="#SQL注入问题" class="headerlink" title="SQL注入问题"></a>SQL注入问题</h2><p><strong>概要：</strong>SQL 注入攻击是一种常见的网络攻击，它利用程序没有正确过滤用户输入的数据而向数据库中插入恶意代码。攻击者通过构造一些精心设计的输入数据，让程序将恶意代码当做正常的 SQL 语句来执行，从而获取非法的数据、破坏数据库的完整性，甚至控制整个系统。</p><p><strong>示例：</strong></p><p>查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;$username&#x27;</span> <span class="hljs-keyword">AND</span> password <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;$password&#x27;</span><br></code></pre></td></tr></table></figure><p>假设用户输入的用户名是 <code>admin&#39;--</code>，密码是任意值。这时，构造出来的查询语句就变成了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span><span class="hljs-comment">--&#x27; AND password = &#x27;任意值&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>后果：</strong>选取 <code>users</code> 表中用户名为 <code>admin</code> 的记录，后面的部分是注释掉的。这就意味着用户可以不需要知道正确的密码就能成功登录，从而进行非法的操作。</p><p>为了防止 SQL 注入攻击，程序应该正确地过滤用户输入的数据，避免将恶意代码当做正常的 SQL 语句来执行。在上面的示例中，可以使用参数化查询的方式来防止 SQL 注入攻击，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> username <span class="hljs-operator">=</span> ? <span class="hljs-keyword">AND</span> password <span class="hljs-operator">=</span> ?<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>在这种方式下，程序会将用户输入的数据作为参数传递给 SQL 查询语句，而不是直接将数据拼接到 SQL 查询语句中。这样，即使用户输入恶意代码，也不会对数据库造成任何危害。</p><h5 id="故：最后更改上述代码为"><a href="#故：最后更改上述代码为" class="headerlink" title="故：最后更改上述代码为"></a>故：最后更改上述代码为</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// val statement = connection.createStatement()</span><br><span class="hljs-comment">// val query = &quot;SELECT * FROM users WHERE username = &#x27;$username&#x27; AND password = &#x27;$password&#x27;&quot;</span><br>   <span class="hljs-keyword">val</span> query = <span class="hljs-string">&quot;SELECT * FROM users WHERE username = ? AND password = ?&quot;</span><br>   <span class="hljs-keyword">val</span> statement = connection.prepareStatement(query)<br>   statement.setString(<span class="hljs-number">1</span>, username)<br>   statement.setString(<span class="hljs-number">2</span>, password)<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//补充了一下之前连接数据库并验证的代码，还是本地验证</span><br>Thread(Runnable &#123;<br>    <span class="hljs-keyword">val</span> DATABASE_URL = <span class="hljs-string">&quot;jdbc:mysql://192.168.56.1:3306/test?useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf-8&quot;</span><br>    <span class="hljs-keyword">val</span> DATABASE_USER = <span class="hljs-string">&quot;root&quot;</span><br>    <span class="hljs-keyword">val</span> DATABASE_PASSWORD = <span class="hljs-string">&quot;123456&quot;</span><br>    <span class="hljs-keyword">val</span> username = bd.user.text.toString() <span class="hljs-comment">// 替换为实际输入的用户名</span><br>    <span class="hljs-keyword">val</span> password = bd.password.text.toString() <span class="hljs-comment">// 替换为实际输入的密码</span><br>    Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>)<br>    <span class="hljs-keyword">val</span> connection: Connection =<br>        DriverManager.getConnection(DATABASE_URL, DATABASE_USER, DATABASE_PASSWORD)<br>    <span class="hljs-keyword">val</span> statement = connection.createStatement()<br>    <span class="hljs-keyword">val</span> query = <span class="hljs-string">&quot;SELECT * FROM users WHERE user = &#x27;<span class="hljs-variable">$username</span>&#x27; AND password = &#x27;<span class="hljs-variable">$password</span>&#x27;&quot;</span><br>    <span class="hljs-keyword">val</span> resultSet = statement.executeQuery(query)<br>    <span class="hljs-keyword">if</span> (resultSet.next()) &#123;<br>        <span class="hljs-comment">// 成功</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 失败</span><br>    &#125;<br>    resultSet.close()<br>    statement.close()<br>    connection.close()<br><br>&#125;).start()<br></code></pre></td></tr></table></figure><h2 id="附：使用命令行工具Windows-PowerShell验证数据库连接-URL"><a href="#附：使用命令行工具Windows-PowerShell验证数据库连接-URL" class="headerlink" title="附：使用命令行工具Windows PowerShell验证数据库连接 URL"></a>附：使用命令行工具Windows PowerShell验证数据库连接 URL</h2><p>在数据库一直连不上时，找到了这个办法，但是可能还是JDBC的版本问题，在尝试的时候报错了，在此记录一下该方法。</p><ol><li>打开 Windows PowerShell。 Windows 键 + R 组合键：输入 “powershell” 。</li><li>输入以下命令，使用 JDBC 驱动程序测试数据库连接 URL：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java -cp &lt;path/to/jdbc/driver.jar&gt;;&lt;path/to/your/code&gt; TestConnection &lt;database_url&gt; &lt;username&gt; &lt;password&gt;<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li><code>&lt;path/to/jdbc/driver.jar&gt;</code> 是 JDBC 驱动程序的路径。</li><li><code>&lt;path/to/your/code&gt;</code> 是你的代码所在的路径。</li><li><code>&lt;database_url&gt;</code> 是数据库连接 URL。</li><li><code>&lt;username&gt;</code> 是连接数据库所使用的用户名。</li><li><code>&lt;password&gt;</code> 是连接数据库所使用的密码。</li></ul><p>注：<code>&lt;path/to/your/code&gt;</code> 参数示例</p><ul><li>相对路径：<code>.\app\src\main\java\com\example\myapp</code></li><li>绝对路径：<code>C:\AndroidProjects\MyApp\app\src\main\java\com\example\myapp</code></li></ul><p>例如， JDBC 驱动程序位于 “C:\mysql-connector-java-8.0.28.jar”，代码位于 “C:\myproject\src”，数据库连接 URL 是 “jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mydatabase”，用户名是 “root”，密码是 “password”，则可以使用以下命令来测试数据库连接 URL：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java -cp C:\mysql-connector-java-<span class="hljs-number">8.0</span><span class="hljs-number">.28</span>.jar;C:\myproject\src TestConnection jdbc:mysql:<span class="hljs-comment">//localhost:3306/mydatabase root password</span><br></code></pre></td></tr></table></figure><p>如果连接成功，则将看到类似以下内容的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Connected to database successfully.<br></code></pre></td></tr></table></figure><p>否则，将看到与连接相关的错误信息。根据错误信息，进行修改。</p><h2 id="验证Android-应用程序可以通过网络连接到-MySQL-服务器"><a href="#验证Android-应用程序可以通过网络连接到-MySQL-服务器" class="headerlink" title="验证Android 应用程序可以通过网络连接到 MySQL 服务器"></a>验证Android 应用程序可以通过网络连接到 MySQL 服务器</h2><p>Way：在 Android 应用程序中使用网络请求库（例如 OkHttp、Volley、Retrofit 等）向 MySQL 服务器发送 HTTP 请求。</p><p>将请求发送到服务器上的一个简单的 PHP 脚本，该脚本将连接到 MySQL 数据库并返回一些简单的数据（示例代码为“Hello World”）作为响应。以此验证 Android 应用程序可以通过网络连接到 MySQL 服务器。</p><p> PHP 脚本示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$hostname</span> = <span class="hljs-string">&quot;localhost&quot;</span>; <br>  <span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;root&quot;</span>; <br>  <span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;password&quot;</span>; <br>  <span class="hljs-variable">$database</span> = <span class="hljs-string">&quot;mydatabase&quot;</span>; <br><br>  <span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-variable">$hostname</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$database</span>);<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_connect_errno</span>()) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Failed to connect to MySQL: &quot;</span> . <span class="hljs-title function_ invoke__">mysqli_connect_error</span>();<br>    <span class="hljs-keyword">exit</span>();<br>  &#125;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br><br>  <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$conn</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ol><li>将该脚本保存为 <code>test.php</code> 并将其放置在 Web 服务器的根目录下。</li><li>在 Android 应用程序中使用网络请求库向 <code>http://&lt;your_server_ip&gt;/test.php</code> 发送 GET 请求。</li><li>检查响应是否为 “Hello World”。判断 Android 应用程序能否通过网络连接到 MySQL 服务器。</li></ol><h2 id="服务器上传JSON数据，验证账号密码"><a href="#服务器上传JSON数据，验证账号密码" class="headerlink" title="服务器上传JSON数据，验证账号密码"></a>服务器上传JSON数据，验证账号密码</h2><ol><li><p>在 Android 应用程序中创建一个包含账号和密码的 JSON 对象：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> json = JSONObject().apply &#123;<br>    put(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;&lt;your_username&gt;&quot;</span>)<br>    put(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;&lt;your_password&gt;&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 Android 应用程序中创建一个子线程，使用 HttpURLConnection 或 OkHttp 等库来将 JSON 数据上传到服务器：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> url = URL(<span class="hljs-string">&quot;&lt;your_server_url&gt;&quot;</span>)<br><span class="hljs-keyword">val</span> connection = url.openConnection() <span class="hljs-keyword">as</span> HttpURLConnection<br>connection.requestMethod = <span class="hljs-string">&quot;POST&quot;</span><br>connection.doOutput = <span class="hljs-literal">true</span><br>connection.setRequestProperty(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>)<br>connection.setRequestProperty(<span class="hljs-string">&quot;Accept&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>)       <span class="hljs-comment">//设置的是处理数据格式</span><br><br>OutputStreamWriter(connection.outputStream).apply &#123;<br>    write(json.toString())<br>    flush()<br>&#125;<br><br><span class="hljs-keyword">if</span> (connection.responseCode == HttpURLConnection.HTTP_OK) &#123;<br>    <span class="hljs-comment">// 上传成功</span><br>    <span class="hljs-comment">// 在这里处理服务器返回的 JSON 数据，并验证账号密码是否正确</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 上传失败</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 Android 应用程序中解析服务器返回的 JSON 数据，并验证账号密码是否正确：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> response = connection.inputStream.bufferedReader().use &#123; it.readText() &#125;<br><span class="hljs-keyword">val</span> jsonResponse = JSONObject(response)<br><br><span class="hljs-keyword">if</span> (jsonResponse.getBoolean(<span class="hljs-string">&quot;success&quot;</span>)) &#123;<br>    <span class="hljs-comment">// 账号密码正确</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 账号密码错误</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 Android 应用程序中将上述代码放在一个按钮的点击事件中，在用户点击按钮后上传 JSON 数据并验证账号密码是否正确：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> submitBtn = findViewById&lt;Button&gt;(R.id.submitBtn)<br>submitBtn.setOnClickListener &#123;<br>    Thread(Runnable &#123;<br>        <span class="hljs-comment">// 将上述代码放在这里</span><br>    &#125;).start()<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="val-jsonResponse-x3D-JSONObject-response-报错"><a href="#val-jsonResponse-x3D-JSONObject-response-报错" class="headerlink" title="val jsonResponse &#x3D; JSONObject(response)报错"></a>val jsonResponse &#x3D; JSONObject(response)报错</h4><p>原因：<code>response</code> 不是一个有效的 JSON 字符串。</p></li></ol><p>在使用 <code>JSONObject</code> 构造函数时，输入的参数必须是一个有效的 JSON 字符串。如果输入的字符串格式不正确或不完整，则可能会导致解析错误。</p><p>解决：将服务器返回的响应数据打印出来，检查它是否是一个有效的 JSON 字符串。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">Log.d(<span class="hljs-string">&quot;Response&quot;</span>, response)<br></code></pre></td></tr></table></figure><p>这样在Logcat中就会出现：</p> <img src="/2023/03/21/Android-Studio%E4%B8%AD%E9%80%9A%E8%BF%87PHP%E8%84%9A%E6%9C%AC%E5%9C%A8Apache%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%AA%8C%E8%AF%81%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/2.png" class=""> <h2 id="同一个局域网（LAN）下，远程计算机访问-MySQL-数据库-失败了"><a href="#同一个局域网（LAN）下，远程计算机访问-MySQL-数据库-失败了" class="headerlink" title="同一个局域网（LAN）下，远程计算机访问 MySQL 数据库[失败了]"></a>同一个局域网（LAN）下，远程计算机访问 MySQL 数据库[失败了]</h2><p>另一台计算机开启 MySQL 数据库并且设置网络权限，使用该计算机的 IP 地址或主机名来访问该数据库。</p><p>在连接字符串中指定该计算机的 IP 地址或主机名，如下所示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">jdbc:mysql:<span class="hljs-comment">//&lt;host&gt;:&lt;port&gt;/&lt;database_name&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>&lt;host&gt;</code> ：要访问的计算机的 IP 地址或主机名</li><li><code>&lt;port&gt;</code> ： MySQL 数据库的端口号（通常是 3306）</li><li><code>&lt;database_name&gt;</code> ：要连接的数据库的名称</li></ul><p>注：从远程计算机访问 MySQL 数据库，该计算机必须启用 MySQL 服务器，并且已经在 MySQL 服务器中为 IP 地址或主机名授予了正确的权限。</p><p>MySQL 服务器配置步骤：</p><p>1.编辑 MySQL 服务器的配置文件 <code>my.cnf</code>&#x2F;my.ini，将 <code>bind-address</code> 参数设置为服务器的 IP 地址或 <code>0.0.0.0</code>（表示接受所有远程连接）。————<strong>通过查看安装目录，命令行，隐藏文件等方法，都没能找到这个文件，下面步骤配置成功了，但是远程连接还是失败</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">bind-address</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br></code></pre></td></tr></table></figure><p>2.在 MySQL 服务器中创建一个新用户，并为该用户授予远程访问的权限。以下命令将创建一个名为 <code>remoteuser</code> 的新用户，密码为 <code>password</code>，并为该用户授予访问名为 <code>mydatabase</code> 的数据库的权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE USER &#x27;remoteuser&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;password&#x27;;<br>GRANT ALL PRIVILEGES ON mydatabase.* TO &#x27;remoteuser&#x27;@&#x27;%&#x27;;<br></code></pre></td></tr></table></figure><p><code>&#39;%&#39;</code> 表示该用户可以从任何 IP 地址访问 MySQL 服务器【不安全，应设定为特定的 IP 地址或主机名】</p><p>3.重启 MySQL 服务器</p><h1 id="Mysql更改从localhost访问到任意IP访问"><a href="#Mysql更改从localhost访问到任意IP访问" class="headerlink" title="Mysql更改从localhost访问到任意IP访问"></a>Mysql更改从localhost访问到任意IP访问</h1><p><strong>mysql安装好后默认只能在localhost访问</strong>，重新设定后才能用192.***这种ip地址访问数据库</p><h5 id="1-在mysql安装路径-bin-下，进入控制台"><a href="#1-在mysql安装路径-bin-下，进入控制台" class="headerlink" title="1.在mysql安装路径 bin 下，进入控制台"></a>1.在mysql安装路径 bin 下，进入控制台</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">bin&gt;mysql -u root -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><h5 id="2-把localhost用-代替"><a href="#2-把localhost用-代替" class="headerlink" title="2.把localhost用%代替"></a>2.把localhost用%代替</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; use mysql<br>mysql&gt; <span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> host = <span class="hljs-string">&#x27;%&#x27;</span>  <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> =<span class="hljs-string">&#x27;root&#x27;</span>;<br>mysql&gt; flush <span class="hljs-keyword">privileges</span>;<br>mysql&gt; <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;host&#x27;</span>,<span class="hljs-string">&#x27;user&#x27;</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span>=<span class="hljs-string">&#x27;root&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>同样：用“%”不安全，最好设置为特定ip地址[数据库中没有重要数据，就没有特别设置]</strong></p><h2 id="php文件用Apache上传到服务器，从另一台计算机远程访问"><a href="#php文件用Apache上传到服务器，从另一台计算机远程访问" class="headerlink" title="php文件用Apache上传到服务器，从另一台计算机远程访问"></a>php文件用Apache上传到服务器，从另一台计算机远程访问</h2><h5 id="注意两点"><a href="#注意两点" class="headerlink" title="注意两点"></a>注意两点</h5><ol><li>确认防火墙没有阻止访问：如果服务器上的防火墙已启用并阻止了 HTTP 请求，需要允许 HTTP 请求通过防火墙。</li><li>确认 Wi-Fi 网络连接正常：确保计算机已连接到同一 Wi-Fi 网络。</li></ol><p>防火墙访问设置:  Windows Defender 防火墙中 - 高级设置 - 入站规则</p> <img src="/2023/03/21/Android-Studio%E4%B8%AD%E9%80%9A%E8%BF%87PHP%E8%84%9A%E6%9C%AC%E5%9C%A8Apache%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%AA%8C%E8%AF%81%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/3.png" class=""> <h2 id="Android-应用程序中上传-JSON-数据并验证账号密码"><a href="#Android-应用程序中上传-JSON-数据并验证账号密码" class="headerlink" title="Android 应用程序中上传 JSON 数据并验证账号密码"></a>Android 应用程序中上传 JSON 数据并验证账号密码</h2><p>将验证的结果转换为 JSON 数据，然后上传到服务器。服务器可以通过接收到的 JSON 数据进行相应的处理，例如将其存储到数据库中或者验证 JSON 数据中的账号密码是否正确。</p><p>将 MySQL 数据库中的数据转换成 JSON 格式，可以使用 MySQL 自带的 JSON 函数，如 <code>JSON_OBJECT</code> 和 <code>JSON_ARRAY</code>，将数据库中的数据转换为 JSON 对象或者 JSON 数组。然后将 JSON 数据上传到服务器进行处理。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 获取 POST 请求中的 JSON 数据</span><br><span class="hljs-variable">$json</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><br><span class="hljs-comment">// 将 JSON 数据解析为关联数组</span><br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$json</span>, <span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">// 在此处验证账号密码是否正确</span><br><br><br><span class="hljs-comment">// 返回 JSON 响应</span><br><span class="hljs-variable">$response</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;success&#x27;</span> =&gt; <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;验证成功&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$response</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><hr><p>注意点：<code>$json = file_get_contents(&#39;php://input&#39;);</code>这是上传<strong>JSON代码</strong>，也就是Android中POST的结果，我在处理数据的时候，一直当做Param&#x2F;Form-data处理，在POST请求服务器测试的时候，Form-data可以，但是Param不行，就以为AS中失败的原因是没有处理Param参数，费了很长时间解决了这个问题[解决方法很简单]，在到AS中测试，失败了，崩溃！！！</p><h2 id="下面先列出正确执行的步骤："><a href="#下面先列出正确执行的步骤：" class="headerlink" title="下面先列出正确执行的步骤："></a>下面先列出正确执行的步骤：</h2><h4 id="1-php脚本中验证账号密码-使用-MySQLi（MySQL-Improved-Extension）扩展库连接-MySQL"><a href="#1-php脚本中验证账号密码-使用-MySQLi（MySQL-Improved-Extension）扩展库连接-MySQL" class="headerlink" title="1.php脚本中验证账号密码[使用 MySQLi（MySQL Improved Extension）扩展库连接 MySQL]"></a>1.php脚本中验证账号密码[使用 MySQLi（MySQL Improved Extension）扩展库连接 MySQL]</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$json</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$json</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-variable">$user</span> = <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-comment">//echo &quot;user = $user, password = $password\n&quot;;</span><br><span class="hljs-comment">// 使用解析后的 $user 和 $password 进行后续操作</span><br><br><br><span class="hljs-comment">// 获取请求参数</span><br><span class="hljs-comment">//$user = isset($_REQUEST[&quot;user&quot;]) ? $_REQUEST[&quot;user&quot;] : &quot;&quot;;</span><br><span class="hljs-comment">//$password = isset($_REQUEST[&quot;password&quot;]) ? $_REQUEST[&quot;password&quot;] : &quot;&quot;;</span><br><span class="hljs-comment">//echo &quot;user = $user, password = $password\n&quot;;</span><br><span class="hljs-comment">// 调试语句，查看参数是否正确接收</span><br><span class="hljs-comment">//echo &quot;user = $user, password = $password\n&quot;;</span><br><span class="hljs-comment">//echo &quot;user = &quot;.$_GET[&quot;user&quot;].&quot;\n&quot;;</span><br><br><span class="hljs-comment">// 数据库连接信息</span><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><span class="hljs-variable">$userdbname</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$passdbword</span> = <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;mydatabase&quot;</span>;<br><br><span class="hljs-comment">// 创建连接</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$userdbname</span>, <span class="hljs-variable">$passdbword</span>, <span class="hljs-variable">$dbname</span>);<br><br><span class="hljs-comment">// 检查连接是否成功</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$conn</span>-&gt;connect_error) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败: &quot;</span> . <span class="hljs-variable">$conn</span>-&gt;connect_error);<br>&#125;<br><br><span class="hljs-comment">// 设置字符集</span><br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">set_charset</span>(<span class="hljs-string">&quot;utf8&quot;</span>);<br><br><span class="hljs-comment">// 获取请求参数</span><br><span class="hljs-comment">//$user =  $user;</span><br><span class="hljs-comment">//$password = $password;</span><br><br><span class="hljs-comment">// 执行查询</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE user=&#x27;<span class="hljs-subst">$user</span>&#x27; AND password=&#x27;<span class="hljs-subst">$password</span>&#x27;&quot;</span>;<br><span class="hljs-comment">//echo &quot;user = $user, password = $password\n&quot;;</span><br><span class="hljs-comment">//$sql = &quot;SELECT * FROM users WHERE user=&#x27;&quot; . $_GET[&quot;user&quot;] . &quot;&#x27; AND password=&#x27;&quot; . $_GET[&quot;password&quot;] . &quot;&#x27;&quot;;</span><br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br><br><span class="hljs-comment">// 检查结果是否存在</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>-&gt;num_rows &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 验证成功</span><br>    <span class="hljs-variable">$response</span>[<span class="hljs-string">&quot;user_exists&quot;</span>] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-variable">$response</span>[<span class="hljs-string">&quot;password_matches&quot;</span>] = <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 验证失败</span><br>    <span class="hljs-variable">$response</span>[<span class="hljs-string">&quot;user_exists&quot;</span>] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-variable">$response</span>[<span class="hljs-string">&quot;password_matches&quot;</span>] = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 返回 JSON 格式响应</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$response</span>);<br><br><span class="hljs-comment">// 关闭连接</span><br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>细节：</strong></p><p>从POST过来的参数，有两种格式（暂只讨论这两种）：from-data，param；</p><p>. $_GET[“user”] .获得的是param数据</p><p>. $_POST[“user”] .获得的是from-data数据</p><p>代码块</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 获取请求参数</span><br><span class="hljs-comment">//$user = isset($_REQUEST[&quot;user&quot;]) ? $_REQUEST[&quot;user&quot;] : &quot;&quot;;</span><br><span class="hljs-comment">//$password = isset($_REQUEST[&quot;password&quot;]) ? $_REQUEST[&quot;password&quot;] : &quot;&quot;;</span><br></code></pre></td></tr></table></figure><p>作用是获得：POST,GET,COOKIE里的所有参数数值</p><h5 id="PHP代码中未正确处理POST请求中的参数，会报错：Undefined-array-key"><a href="#PHP代码中未正确处理POST请求中的参数，会报错：Undefined-array-key" class="headerlink" title="PHP代码中未正确处理POST请求中的参数，会报错：Undefined array key"></a>PHP代码中未正确处理POST请求中的参数，会报错：Undefined array key</h5><p>确保在客户端中使用的键与PHP代码中的键匹配。如在Postman中使用键“user”和“password”，则确保PHP代码中使用的是相同的键名。</p><p>使用<code>var_dump($_POST)</code>在PHP代码中打印出POST请求中的内容，以便检查请求中传递的键和值是否正确。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_POST</span>); <br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//没有的话就提示array(0) &#123; &#125;</span><br><span class="hljs-comment">//            Warning: Undefined array key &quot;***&quot;</span><br></code></pre></td></tr></table></figure><p>以下代码检查是否有 POST 数据被成功提交：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;POST data received&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;No POST data received&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Postman测试："><a href="#Postman测试：" class="headerlink" title="Postman测试："></a>Postman测试：</h2><p>当 Postman 发送一个 POST 请求时，需要确保请求的数据是使用 “form-data” 类型发送的，而不是 “x-www-form-urlencoded” 类型。如果使用 “x-www-form-urlencoded” 类型，服务器可能无法正确解析数据，导致无法获取 POST 参数。</p><p>即：</p> <img src="/2023/03/21/Android-Studio%E4%B8%AD%E9%80%9A%E8%BF%87PHP%E8%84%9A%E6%9C%AC%E5%9C%A8Apache%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%AA%8C%E8%AF%81%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/4.png" class=""> <h5 id="AS处理代码"><a href="#AS处理代码" class="headerlink" title="AS处理代码"></a>AS处理代码</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"> <span class="hljs-keyword">val</span> submitBtn = findViewById&lt;Button&gt;(R.id.button)<br>        submitBtn.setOnClickListener &#123;<br>            <span class="hljs-keyword">val</span> username = bd.user.text.toString()     <span class="hljs-comment">// 替换为实际输入的用户名</span><br>            <span class="hljs-keyword">val</span> password = bd.password.text.toString() <span class="hljs-comment">// 替换为实际输入的密码</span><br>            <span class="hljs-comment">//1.创建一个新的线程来执行网络请求，以避免在主线程中进行网络操作而导致 UI 界面卡顿。</span><br>            Thread &#123;<br>                <span class="hljs-comment">//2.创建一个 URL 对象，并使用该对象打开一个 HttpURLConnection 连接对象。</span><br>                <span class="hljs-keyword">val</span> url = URL(<span class="hljs-string">&quot;http://192.168.56.1/checkp.php&quot;</span>)<br>                <span class="hljs-keyword">val</span> connection = url.openConnection() <span class="hljs-keyword">as</span> HttpURLConnection<br>                <span class="hljs-comment">//3.设置请求方法为 POST，并设置连接属性。</span><br>                connection.requestMethod = <span class="hljs-string">&quot;POST&quot;</span><br>                connection.doOutput = <span class="hljs-literal">true</span><br>                connection.setRequestProperty(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>)             <br><span class="hljs-comment">/* 如果处理form-data：</span><br><span class="hljs-comment">connection.setRequestProperty(&quot;Content-Type&quot;, &quot;multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW&quot;)</span><br><span class="hljs-comment">// 创建包含form-data数据的请求体</span><br><span class="hljs-comment">val multiPart = FormDataMultiPart()</span><br><span class="hljs-comment">multiPart.field(&quot;user&quot;, &quot;admin&quot;)</span><br><span class="hljs-comment">multiPart.field(&quot;password&quot;, &quot;123456&quot;)</span><br><span class="hljs-comment">// 将请求体添加到HttpURLConnection对象中</span><br><span class="hljs-comment">val outputWriter = OutputStreamWriter(connection.outputStream)</span><br><span class="hljs-comment">multiPart.writeTo(outputWriter, Charset.defaultCharset())                                */</span><br><span class="hljs-comment">//4.创建一个 JSONObject 对象，并向其中添加要上传的数据。</span><br>                <span class="hljs-keyword">val</span> jsonObject = JSONObject()<br>                jsonObject.put(<span class="hljs-string">&quot;user&quot;</span>, username)<br>                jsonObject.put(<span class="hljs-string">&quot;password&quot;</span>, password)<br><span class="hljs-comment">//5.将 JSONObject 对象转换成字符串，并写入连接对象的输出流中。</span><br>                <span class="hljs-keyword">val</span> outputWriter = OutputStreamWriter(connection.outputStream)<br>                outputWriter.write(jsonObject.toString())<br>                outputWriter.flush()<br>                outputWriter.close()<br><span class="hljs-comment">//6.获取服务器的响应状态码，如果状态码为 HttpURLConnection.HTTP_OK（200），则说明请求成功。</span><br>                <span class="hljs-keyword">val</span> responseCode = connection.responseCode<br>                <span class="hljs-keyword">if</span> (responseCode == HttpURLConnection.HTTP_OK) &#123;<br>                    <span class="hljs-comment">//7.从连接对象的输入流中读取服务器的响应数据，并将其转换成字符串。</span><br>                    <span class="hljs-keyword">val</span> inputStream = connection.inputStream<br>                    <span class="hljs-keyword">val</span> bufferedReader = BufferedReader(InputStreamReader(inputStream))<br>                    <span class="hljs-keyword">val</span> response = StringBuilder()<br>                    <span class="hljs-keyword">var</span> inputLine: String?<br>                    <span class="hljs-keyword">while</span> (bufferedReader.readLine().also &#123; inputLine = it &#125; != <span class="hljs-literal">null</span>) &#123;<br>                        response.append(inputLine)<br>                    &#125;<br>                    bufferedReader.close()<br>                    Log.d(<span class="hljs-string">&quot;MainActivity&quot;</span>, <span class="hljs-string">&quot;Response received: <span class="hljs-variable">$response</span>&quot;</span>)<br>                    <span class="hljs-comment">//8.将响应数据转换成 JSONObject 对象，并获取需要的数据。</span><br>                    <span class="hljs-keyword">val</span> jsonResponse = JSONObject(response.toString())<br>                    <span class="hljs-keyword">val</span> usernameExists = jsonResponse.getBoolean(<span class="hljs-string">&quot;user_exists&quot;</span>)<br>                    <span class="hljs-keyword">val</span> passwordMatches = jsonResponse.getBoolean(<span class="hljs-string">&quot;password_matches&quot;</span>)<br>                    <span class="hljs-comment">//9.根据服务器返回的数据进行相应的处理。</span><br>                    <span class="hljs-keyword">if</span> (usernameExists &amp;&amp; passwordMatches) &#123;<br>                        <span class="hljs-comment">// 账号密码正确，执行下一步操作</span><br>                        Looper.prepare();<br>                        Toast.makeText(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;登录成功&quot;</span>, Toast.LENGTH_SHORT).show() <span class="hljs-comment">//Toast不能直接在子线程中使用</span><br>                        Looper.loop();<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">// 账号密码错误，给出提示信息</span><br>                        Looper.prepare();<br>                        Toast.makeText(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;登录失败&quot;</span>, Toast.LENGTH_SHORT).show()<br>                        Looper.loop();<br>                    &#125;<br>                &#125;<br>            &#125;.start()<br>        &#125;<br></code></pre></td></tr></table></figure><p>注：<code>outputWriter.close()</code> 不会清空数据，作用是关闭输出流并释放资源，以确保数据被正确地发送到目标服务器。如果在写入完数据之后不关闭输出流，可能会导致数据发送不完整或丢失。关闭输出流后，连接将保持打开状态，以等待来自服务器的响应。如果需要清空数据，可以重新实例化 <code>jsonObject</code> 对象。</p><p><code>connection.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json&quot;)</code> ：设置HTTP请求头，设置请求的Content-Type为application&#x2F;json。告诉服务器发送的数据是JSON格式的，让服务器能够正确解析请求数据。</p><p>Postman测试服务器能否正常处理JSON数据：Body-row ,设置为JSON，POST提交验证</p> <img src="/2023/03/21/Android-Studio%E4%B8%AD%E9%80%9A%E8%BF%87PHP%E8%84%9A%E6%9C%AC%E5%9C%A8Apache%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%AA%8C%E8%AF%81%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/5.png" class=""> <div class="note note-info">            <h5 id="附解决-Toast不能直接在子线程中使用-问题链接：——浅析Android中的消息机制"><a href="#附解决-Toast不能直接在子线程中使用-问题链接：——浅析Android中的消息机制" class="headerlink" title="附解决 Toast不能直接在子线程中使用 问题链接：——浅析Android中的消息机制"></a>附解决 Toast不能直接在子线程中使用 问题链接：——浅析Android中的消息机制</h5><p><a href="http://t.csdn.cn/ntFKC">http://t.csdn.cn/ntFKC</a></p>          </div>]]></content>
    
    
    <categories>
      
      <category>Android studio</category>
      
      <category>数据库相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android studio</tag>
      
      <tag>MySql</tag>
      
      <tag>Apache服务器，PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>navicat连接MySQL报错：1045 - Access denied for user ‘root‘@‘localhost‘ (using password NO)</title>
    <link href="/2023/03/18/navicat%E8%BF%9E%E6%8E%A5MySQL%E6%8A%A5%E9%94%99%EF%BC%9A1045-Access-denied-for-user-%E2%80%98root%E2%80%98-%E2%80%98localhost%E2%80%98-using-password-NO/"/>
    <url>/2023/03/18/navicat%E8%BF%9E%E6%8E%A5MySQL%E6%8A%A5%E9%94%99%EF%BC%9A1045-Access-denied-for-user-%E2%80%98root%E2%80%98-%E2%80%98localhost%E2%80%98-using-password-NO/</url>
    
    <content type="html"><![CDATA[<h1 id="navicat连接MySQL报错：1045-Access-denied-for-user-‘root‘-‘localhost‘-using-password-NO"><a href="#navicat连接MySQL报错：1045-Access-denied-for-user-‘root‘-‘localhost‘-using-password-NO" class="headerlink" title="navicat连接MySQL报错：1045 - Access denied for user ‘root‘@‘localhost‘ (using password NO)"></a>navicat连接MySQL报错：1045 - Access denied for user ‘root‘@‘localhost‘ (using password NO)</h1><p>这个错误通常是因为Navicat连接MySQL数据库时使用的用户名或密码不正确导致的。通过以下几个步骤来解决问题：</p><ol><li>确保在Navicat中使用的是正确的用户名和密码。在连接MySQL服务器时，输入MySQL数据库的用户名和密码才能成功连接。确保使用的用户名和密码正确并且拥有足够的权限来访问MySQL数据库。</li><li>确认MySQL服务器正在运行。如果MySQL服务器未运行，则无法连接到它。请确保MySQL服务器已启动并正在运行。</li><li>确认MySQL服务器允许远程连接。如果您正在尝试从远程计算机连接到MySQL服务器，则需要确认MySQL服务器已配置为允许远程连接。可以检查MySQL配置文件中的bind-address选项以及防火墙配置，以确保允许远程连接。</li><li>检查MySQL服务器的日志文件。如果以上步骤都没有解决问题，则可以查看MySQL服务器的日志文件，以查看是否有任何错误或警告消息。可以尝试在日志文件中查找与访问被拒绝相关的信息。</li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>navicat</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JsonArrayRequest()</title>
    <link href="/2023/03/18/JsonArrayRequest/"/>
    <url>/2023/03/18/JsonArrayRequest/</url>
    
    <content type="html"><![CDATA[<h2 id="JsonArrayRequest"><a href="#JsonArrayRequest" class="headerlink" title="JsonArrayRequest()"></a>JsonArrayRequest()</h2><p><code>JsonArrayRequest</code>是一个可以在Android中使用的类，用于发出HTTP请求并接收JSON数组响应的数据。使用<code>JsonArrayRequest</code>，可以将JSON数组作为响应数据接收并处理。</p><h3 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h3><p>下面是使用<code>JsonArrayRequest</code>的基本步骤：</p><ol><li><p>导入Volley库：在Android Studio项目中，导入Volley库。将以下行添加到“build.gradle”文件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">pythonCopy codedependencies &#123;<br>    implementation <span class="hljs-string">&#x27;com.android.volley:volley:1.2.1&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建请求：创建一个<code>JsonArrayRequest</code>对象，该对象包含有关请求的信息，例如URL，HTTP方法等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">typescriptCopy <span class="hljs-type">codeString</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://example.com/api/data&quot;</span>;<br><span class="hljs-type">JsonArrayRequest</span> <span class="hljs-variable">jsonArrayRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonArrayRequest</span>(Request.Method.GET, url, <span class="hljs-literal">null</span>,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>.Listener&lt;JSONArray&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResponse</span><span class="hljs-params">(JSONArray response)</span> &#123;<br>                <span class="hljs-comment">// 在这里处理JSON响应</span><br>            &#125;<br>        &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>.ErrorListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onErrorResponse</span><span class="hljs-params">(VolleyError error)</span> &#123;<br>                <span class="hljs-comment">// 在这里处理错误响应</span><br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure></li><li><p>发送请求：使用Volley库的请求队列将<code>JsonArrayRequest</code>对象添加到队列中，并等待响应。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">javaCopy <span class="hljs-type">codeRequestQueue</span> <span class="hljs-variable">requestQueue</span> <span class="hljs-operator">=</span> Volley.newRequestQueue(<span class="hljs-built_in">this</span>);<br>requestQueue.add(jsonArrayRequest);<br></code></pre></td></tr></table></figure></li><li><p>处理响应：在响应被接收时，将会调用响应监听器中的<code>onResponse</code>方法。在该方法中，处理JSON数组响应的数据。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">typescriptCopy code<span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResponse</span><span class="hljs-params">(JSONArray response)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 遍历JSON数组并处理数据</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; response.length(); i++) &#123;<br>            <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> response.getJSONObject(i);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jsonObject.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> jsonObject.getInt(<span class="hljs-string">&quot;age&quot;</span>);<br>            <span class="hljs-comment">// 处理数据...</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (JSONException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h3><ol><li><p>导入Volley库：在Android Studio项目中，导入Volley库。将以下行添加到“build.gradle”文件中：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">pythonCopy codedependencies &#123;<br>    implementation <span class="hljs-string">&#x27;com.android.volley:volley:1.2.1&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建请求：创建一个<code>JsonArrayRequest</code>对象，该对象包含有关请求的信息，例如URL，HTTP方法等。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">javaCopy codeval url = <span class="hljs-string">&quot;https://example.com/api/data&quot;</span><br><span class="hljs-keyword">val</span> jsonArrayRequest = JsonArrayRequest(<br>        Request.Method.GET, url, <span class="hljs-literal">null</span>,<br>        Response.Listener &#123; response -&gt;<br>            <span class="hljs-comment">// 在这里处理JSON响应</span><br>        &#125;,<br>        Response.ErrorListener &#123; error -&gt;<br>            <span class="hljs-comment">// 在这里处理错误响应</span><br>        &#125;<br>)<br></code></pre></td></tr></table></figure></li><li><p>发送请求：使用Volley库的请求队列将<code>JsonArrayRequest</code>对象添加到队列中，并等待响应。例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">kotlinCopy codeval requestQueue = Volley.newRequestQueue(<span class="hljs-keyword">this</span>)<br>requestQueue.add(jsonArrayRequest)<br></code></pre></td></tr></table></figure></li><li><p>处理响应：在响应被接收时，将会调用响应监听器中的<code>onResponse</code>方法。在该方法中，处理JSON数组响应的数据。例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">javaCopy codeResponse.Listener &#123; response -&gt;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 遍历JSON数组并处理数据</span><br>        <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> until response.length()) &#123;<br>            <span class="hljs-keyword">val</span> jsonObject = response.getJSONObject(i)<br>            <span class="hljs-keyword">val</span> name = jsonObject.getString(<span class="hljs-string">&quot;name&quot;</span>)<br>            <span class="hljs-keyword">val</span> age = jsonObject.getInt(<span class="hljs-string">&quot;age&quot;</span>)<br>            <span class="hljs-comment">// 处理数据...</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (e: JSONException) &#123;<br>        e.printStackTrace()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Android studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android studio</tag>
      
      <tag>JsonArrayRequest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android studio中使用Kotlin语言连接MySql数据库/本地Apache服务器</title>
    <link href="/2023/03/18/Android-studio%E4%B8%AD%E4%BD%BF%E7%94%A8Kotlin%E8%AF%AD%E8%A8%80%E8%BF%9E%E6%8E%A5MySql%E6%95%B0%E6%8D%AE%E5%BA%93-%E6%9C%AC%E5%9C%B0Apache%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2023/03/18/Android-studio%E4%B8%AD%E4%BD%BF%E7%94%A8Kotlin%E8%AF%AD%E8%A8%80%E8%BF%9E%E6%8E%A5MySql%E6%95%B0%E6%8D%AE%E5%BA%93-%E6%9C%AC%E5%9C%B0Apache%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-studio-中使用Kotlin语言-连接-MySql-数据库-x2F-本地Apache服务器"><a href="#Android-studio-中使用Kotlin语言-连接-MySql-数据库-x2F-本地Apache服务器" class="headerlink" title="Android studio 中使用Kotlin语言 连接 MySql 数据库&#x2F;本地Apache服务器"></a>Android studio 中使用Kotlin语言 连接 MySql 数据库&#x2F;本地Apache服务器</h1><h2 id="不用本地服务器"><a href="#不用本地服务器" class="headerlink" title="不用本地服务器"></a>不用本地服务器</h2><p>​<strong>———–这与java中用MyBatis连接的区别</strong></p><p>在 Android Studio 中使用 Kotlin 连接 MySQL 数据库和使用 Java 连接 MySQL 数据库类似，都需要使用 JDBC（Java Database Connectivity）驱动程序。下面是一个使用 Kotlin 连接 MySQL 数据库并执行 SQL 查询的简单示例：</p><h4 id="1-添加-JDBC-驱动程序依赖"><a href="#1-添加-JDBC-驱动程序依赖" class="headerlink" title="1.添加 JDBC 驱动程序依赖"></a>1.添加 JDBC 驱动程序依赖</h4><p>在项目的 <code>build.gradle</code> 文件中添加 MySQL JDBC 驱动程序依赖：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">dependencies &#123;<br>    implementation group: <span class="hljs-string">&#x27;mysql&#x27;</span>, name: <span class="hljs-string">&#x27;mysql-connector-java&#x27;</span>, version: <span class="hljs-string">&#x27;8.0.27&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-创建数据库连接"><a href="#2-创建数据库连接" class="headerlink" title="2.创建数据库连接"></a>2.创建数据库连接</h4><p>在 Kotlin 代码中使用 JDBC 创建 MySQL 数据库连接：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> java.sql.DriverManager<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// JDBC 连接信息</span><br>    <span class="hljs-keyword">val</span> jdbcUrl = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span><br>    <span class="hljs-keyword">val</span> username = <span class="hljs-string">&quot;root&quot;</span><br>    <span class="hljs-keyword">val</span> password = <span class="hljs-string">&quot;password&quot;</span><br>    <br>    <span class="hljs-comment">// 创建数据库连接</span><br>    <span class="hljs-keyword">val</span> conn = DriverManager.getConnection(jdbcUrl, username, password)<br>    <br>    <span class="hljs-comment">// 关闭连接</span><br>    conn.close()<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-执行-SQL-查询"><a href="#3-执行-SQL-查询" class="headerlink" title="3.执行 SQL 查询"></a>3.执行 SQL 查询</h4><p>使用 JDBC 连接 MySQL 数据库后，可以使用 <code>Statement</code> 或 <code>PreparedStatement</code> 执行 SQL 查询。下面是一个使用 <code>Statement</code> 执行 SQL 查询的示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> java.sql.DriverManager<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// JDBC 连接信息</span><br>    <span class="hljs-keyword">val</span> jdbcUrl = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span><br>    <span class="hljs-keyword">val</span> username = <span class="hljs-string">&quot;root&quot;</span><br>    <span class="hljs-keyword">val</span> password = <span class="hljs-string">&quot;password&quot;</span><br>    <br>    <span class="hljs-comment">// 创建数据库连接</span><br>    <span class="hljs-keyword">val</span> conn = DriverManager.getConnection(jdbcUrl, username, password)<br>    <br>    <span class="hljs-comment">// 执行 SQL 查询</span><br>    <span class="hljs-keyword">val</span> stmt = conn.createStatement()<br>    <span class="hljs-keyword">val</span> sql = <span class="hljs-string">&quot;SELECT * FROM users&quot;</span><br>    <span class="hljs-keyword">val</span> rs = stmt.executeQuery(sql)<br>    <br>    <span class="hljs-comment">// 处理查询结果</span><br>    <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>        <span class="hljs-keyword">val</span> id = rs.getInt(<span class="hljs-string">&quot;id&quot;</span>)<br>        <span class="hljs-keyword">val</span> name = rs.getString(<span class="hljs-string">&quot;name&quot;</span>)<br>        <span class="hljs-keyword">val</span> age = rs.getInt(<span class="hljs-string">&quot;age&quot;</span>)<br>        println(<span class="hljs-string">&quot;id: <span class="hljs-variable">$id</span>, name: <span class="hljs-variable">$name</span>, age: <span class="hljs-variable">$age</span>&quot;</span>)<br>    &#125;<br>    <br>    <span class="hljs-comment">// 关闭连接</span><br>    rs.close()<br>    stmt.close()<br>    conn.close()<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，使用 <code>executeQuery()</code> 方法执行 SQL 查询，并使用 <code>while</code> 循环遍历查询结果集。注意，需要在使用完查询结果集后及时关闭 <code>ResultSet</code>、<code>Statement</code> 和数据库连接，以释放资源。</p><p>至于与 Java 中使用 MyBatis 连接 MySQL 数据库的区别，主要在于使用的 API 不同，但连接方式和 SQL 执行过程大体相同。通常，使用 Kotlin 连接 MySQL 数据库会更加简洁和易读。</p><h2 id="使用Web服务器（本地Apache）"><a href="#使用Web服务器（本地Apache）" class="headerlink" title="使用Web服务器（本地Apache）"></a>使用Web服务器（本地Apache）</h2><p><em><strong>关于php，apache的安装参照官方文档，然后在php中配置mysqli模块，解析成 JSON 数据供AS中使用</strong></em></p><p>连接 MySQL 数据库的最佳实践是通过建立一个 Web 服务来实现，然后 Android 应用程序通过调用 Web 服务的 API 来访问数据库。下面是一个<strong>简单示例</strong>，展示了如何使用 Kotlin 和 PHP 构建一个简单的 Web 服务来访问 MySQL 数据库。</p><p><strong>首先，在 Web 服务器上安装 Apache、PHP 和 MySQL，并创建一个名为 <code>mydatabase</code> 的 MySQL 数据库，其中包含一个名为 <code>users</code> 的表，包含三个字段：<code>id</code>、<code>name</code> 和 <code>age</code>。还需要创建一个 PHP 脚本，用于访问 MySQL 数据库，并将查询结果以 JSON 格式返回给 Android 应用程序。</strong></p><h3 id="PHP-脚本代码（get-users-php）："><a href="#PHP-脚本代码（get-users-php）：" class="headerlink" title="PHP 脚本代码（get_users.php）："></a>PHP 脚本代码（<code>get_users.php</code>）：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 连接 MySQL 数据库</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;mydatabase&quot;</span>);<br><br><span class="hljs-comment">// 检查连接是否成功</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$conn</span>-&gt;connect_error) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connection failed: &quot;</span> . <span class="hljs-variable">$conn</span>-&gt;connect_error);<br>&#125;<br><br><span class="hljs-comment">// 执行 SQL 查询</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users&quot;</span>;<br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br><br><span class="hljs-comment">// 将查询结果转换为 JSON 格式</span><br><span class="hljs-variable">$data</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>-&gt;num_rows &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch_assoc</span>()) &#123;<br>        <span class="hljs-variable">$data</span>[] = <span class="hljs-variable">$row</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$json</span> = <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$data</span>);<br><br><span class="hljs-comment">// 返回 JSON 格式的查询结果</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: application/json&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$json</span>;<br><br><span class="hljs-comment">// 关闭数据库连接</span><br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="在-Android-Studio-中，使用-Volley-库来实现与-Web-服务的通信。"><a href="#在-Android-Studio-中，使用-Volley-库来实现与-Web-服务的通信。" class="headerlink" title="在 Android Studio 中，使用 Volley 库来实现与 Web 服务的通信。"></a>在 Android Studio 中，使用 Volley 库来实现与 Web 服务的通信。</h3><p>下面是一个简单的示例，展示了如何使用 Kotlin 和 Volley 库从 Web 服务中获取用户数据。</p><h4 id="首先，在项目的-build-gradle-文件中添加-Volley-库的依赖："><a href="#首先，在项目的-build-gradle-文件中添加-Volley-库的依赖：" class="headerlink" title="首先，在项目的 build.gradle 文件中添加 Volley 库的依赖："></a>首先，在项目的 <code>build.gradle</code> 文件中添加 Volley 库的依赖：</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">dependencies &#123;<br>    implementation <span class="hljs-string">&#x27;com.android.volley:volley:1.2.1&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="然后，在-activity-main-xml-文件中添加一个-ListView-组件，用于显示用户数据："><a href="#然后，在-activity-main-xml-文件中添加一个-ListView-组件，用于显示用户数据：" class="headerlink" title="然后，在 activity_main.xml 文件中添加一个 ListView 组件，用于显示用户数据："></a>然后，在 <code>activity_main.xml</code> 文件中添加一个 <code>ListView</code> 组件，用于显示用户数据：</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">&lt;ListView<br>    android:id=<span class="hljs-string">&quot;@+id/user_list&quot;</span><br>    android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span><br>    android:layout_height=<span class="hljs-string">&quot;match_parent&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><h4 id="最后，在-MainActivity-kt-文件中添加以下代码："><a href="#最后，在-MainActivity-kt-文件中添加以下代码：" class="headerlink" title="最后，在 MainActivity.kt 文件中添加以下代码："></a>最后，在 <code>MainActivity.kt</code> 文件中添加以下代码：</h4><p>​<strong>JsonArrayRequest(）使用简述见另一文章</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity<br><span class="hljs-keyword">import</span> android.os.Bundle<br><span class="hljs-keyword">import</span> android.util.Log<br><span class="hljs-keyword">import</span> android.widget.ArrayAdapter<br><span class="hljs-keyword">import</span> android.widget.ListView<br><span class="hljs-keyword">import</span> com.android.volley.Request<br><span class="hljs-keyword">import</span> com.android.volley.Response<br><span class="hljs-keyword">import</span> com.android.volley.toolbox.JsonArrayRequest<br><span class="hljs-keyword">import</span> com.android.volley.toolbox.Volley<br><span class="hljs-keyword">import</span> org.json.JSONArray<br><span class="hljs-keyword">import</span> org.json.JSONObject<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> : <span class="hljs-type">AppCompatActivity</span>() &#123;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br>        setContentView(R.layout.activity_main)<br><br>        <span class="hljs-comment">// 获取 ListView 组件</span><br>        <span class="hljs-keyword">val</span> listView = findViewById&lt;ListView&gt;(R.id.user_list)<br><br>        <span class="hljs-comment">// 创建 Volley 请求队列</span><br>        <span class="hljs-keyword">val</span> queue = Volley.newRequestQueue(<span class="hljs-keyword">this</span>)<br><br>        <span class="hljs-comment">// 创建 JSON 请求</span><br>        <span class="hljs-keyword">val</span> url = <span class="hljs-string">&quot;http://localhost/get_users.php&quot;</span> <span class="hljs-comment">//安卓中运行要换成电脑ip地址，下面有论述</span><br>        <span class="hljs-keyword">val</span> request = JsonArrayRequest(<br>            Request.Method.GET, url, <span class="hljs-literal">null</span>,<br>            Response.Listener&lt;JSONArray&gt; &#123; response -&gt;<br>                <span class="hljs-comment">// 处理 JSON 响应</span><br>                <span class="hljs-keyword">val</span> users = ArrayList&lt;String&gt;()<br>                <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> until response.length()) &#123;<br>                    <span class="hljs-keyword">val</span> user = response.getJSONObject(i)<br>                    <span class="hljs-keyword">val</span> id = user.getInt(<span class="hljs-string">&quot;id&quot;</span>)<br>                    <span class="hljs-keyword">val</span> name = user.getString(<span class="hljs-string">&quot;name&quot;</span>)<br>                    <span class="hljs-keyword">val</span> age = user.getInt(<span class="hljs-string">&quot;age&quot;</span>)<br>                    users.add(<span class="hljs-string">&quot;<span class="hljs-variable">$id</span>: <span class="hljs-variable">$name</span> (<span class="hljs-variable">$age</span>)&quot;</span>)<br>                &#125;<br>                <span class="hljs-keyword">val</span> adapter = ArrayAdapter(<span class="hljs-keyword">this</span>, android.R.layout.simple_list_item_1, users)<br>                listView.adapter = adapter<br>            &#125;,<br>            Response.ErrorListener &#123; error -&gt;<br>                <span class="hljs-comment">// 处理错误响应</span><br>                Log.e(<span class="hljs-string">&quot;MainActivity&quot;</span>, <span class="hljs-string">&quot;Error: <span class="hljs-subst">$&#123;error.message&#125;</span>&quot;</span>)<br>            &#125;<br>        )<br><br>        <span class="hljs-comment">// 将请求添加到 Volley 请求队列</span><br>        queue.add(request)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>示例中使用<code>JsonArrayRequest</code> 类来发起 JSON 请求，并在响应的回调函数中解析 JSON 数据，将其添加到 <code>ListView</code> 中显示。</p><h3 id="细节处理："><a href="#细节处理：" class="headerlink" title="细节处理："></a>细节处理：</h3><h4 id="php运行中遇到Class-“mysqli”-not-found-怎么解决【PHP开启mysqli扩展】"><a href="#php运行中遇到Class-“mysqli”-not-found-怎么解决【PHP开启mysqli扩展】" class="headerlink" title="php运行中遇到Class “mysqli” not found 怎么解决【PHP开启mysqli扩展】"></a>php运行中遇到Class “mysqli” not found 怎么解决【PHP开启mysqli扩展】</h4><p>参考资料：<a href="http://t.csdn.cn/W3n6n">http://t.csdn.cn/W3n6n</a></p><p>简述：在 php.ini 文件中查找以下两行代码，并去掉前面的分号 (;)：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">;<span class="hljs-attribute">extension</span>=mysqli<br>;<span class="hljs-attribute">extension_dir</span>=<span class="hljs-string">&quot;ext&quot;</span><br></code></pre></td></tr></table></figure><h5 id="步骤1："><a href="#步骤1：" class="headerlink" title="步骤1："></a>步骤1：</h5><p>php.ini中修改mysqli 去掉前面的分号</p> <img src="/2023/03/18/Android-studio%E4%B8%AD%E4%BD%BF%E7%94%A8Kotlin%E8%AF%AD%E8%A8%80%E8%BF%9E%E6%8E%A5MySql%E6%95%B0%E6%8D%AE%E5%BA%93-%E6%9C%AC%E5%9C%B0Apache%E6%9C%8D%E5%8A%A1%E5%99%A8/1.png" class=""> <h5 id="步骤2："><a href="#步骤2：" class="headerlink" title="步骤2："></a>步骤2：</h5><p>修改<code>extension_dir</code>指向绝对路径**(完整路径)，默认是<strong>相对路径</strong>(<code>.\ext</code>)，去掉前面的;</p> <img src="/2023/03/18/Android-studio%E4%B8%AD%E4%BD%BF%E7%94%A8Kotlin%E8%AF%AD%E8%A8%80%E8%BF%9E%E6%8E%A5MySql%E6%95%B0%E6%8D%AE%E5%BA%93-%E6%9C%AC%E5%9C%B0Apache%E6%9C%8D%E5%8A%A1%E5%99%A8/2.png" class=""> <h5 id="查看："><a href="#查看：" class="headerlink" title="查看："></a>查看：</h5><p>新建<code>test.php</code>，运行localhost&#x2F;test.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">phpinfo</span>();<br></code></pre></td></tr></table></figure> <img src="/2023/03/18/Android-studio%E4%B8%AD%E4%BD%BF%E7%94%A8Kotlin%E8%AF%AD%E8%A8%80%E8%BF%9E%E6%8E%A5MySql%E6%95%B0%E6%8D%AE%E5%BA%93-%E6%9C%AC%E5%9C%B0Apache%E6%9C%8D%E5%8A%A1%E5%99%A8/3.png" class=""> <h4 id="php中无法将查询结果转换成-JSON-格式"><a href="#php中无法将查询结果转换成-JSON-格式" class="headerlink" title="php中无法将查询结果转换成 JSON 格式"></a>php中无法将查询结果转换成 JSON 格式</h4><p>如果已经安装了 <code>mysqli</code> 扩展但仍然无法将查询结果转换成 JSON 格式，那么可能是查询结果无法被正确转换为 UTF-8 编码所致。解决：查询之前设置字符集编码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">mysqli_set_charset</span>(<span class="hljs-variable">$connection</span>, <span class="hljs-string">&quot;utf8&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="MainActivity-kt-代码可以正常编译并且运行，但是没有将数据显示在-ListView"><a href="#MainActivity-kt-代码可以正常编译并且运行，但是没有将数据显示在-ListView" class="headerlink" title="MainActivity.kt 代码可以正常编译并且运行，但是没有将数据显示在 ListView"></a><code>MainActivity.kt</code> 代码可以正常编译并且运行，但是没有将数据显示在 ListView</h4><p>原因：处理 JSON 数据时出现了问题</p><p>在 <code>MainActivity.kt</code> 代码中，使用了 <code>JsonArrayRequest</code> 类来发起 JSON 请求，并在响应的回调函数中解析 JSON 数据，并将其添加到 <code>ListView</code> 中显示。因此，如果在这个过程中出现了问题，可能导致数据无法正确显示在 <code>ListView</code> 上。</p><p>以下是一些可能会导致这种情况发生的原因以及解决方法：</p><h5 id="1-检查-PHP-后端代码是否能够正确返回-JSON-数据"><a href="#1-检查-PHP-后端代码是否能够正确返回-JSON-数据" class="headerlink" title="1.检查 PHP 后端代码是否能够正确返回 JSON 数据"></a>1.检查 PHP 后端代码是否能够正确返回 JSON 数据</h5><p>在 PHP 后端代码中，需要确保能够正确地将查询结果转换为 JSON 格式。可以尝试在浏览器中直接访问后端接口，并检查返回的 JSON 数据是否符合预期。</p><p>结果应为 <img src="/2023/03/18/Android-studio%E4%B8%AD%E4%BD%BF%E7%94%A8Kotlin%E8%AF%AD%E8%A8%80%E8%BF%9E%E6%8E%A5MySql%E6%95%B0%E6%8D%AE%E5%BA%93-%E6%9C%AC%E5%9C%B0Apache%E6%9C%8D%E5%8A%A1%E5%99%A8/4.png" class=""> </p><h5 id="2-检查-Android-设备是否可以访问-PHP-后端接口"><a href="#2-检查-Android-设备是否可以访问-PHP-后端接口" class="headerlink" title="2.检查 Android 设备是否可以访问 PHP 后端接口"></a>2.检查 Android 设备是否可以访问 PHP 后端接口</h5><p>如果 Android 设备无法访问 PHP 后端接口，那么在应用中也无法正确地获取数据。可以尝试在浏览器中访问后端接口，并检查是否能够正常地返回数据。</p><p>WAY:使用 Android 设备上的 Web 浏览器来检查是否可以访问 PHP 后端接口。在 Android 设备上打开 Web 浏览器，并输入 PHP 后端接口的 URL 地址，然后尝试加载该页面。</p><p>总结：如果页面成功加载，并且可以看到预期的 JSON 数据，那么说明 Android 设备可以访问 PHP 后端接口，并且应用程序也应该可以获取到数据。如果页面无法加载，或者看到了错误消息，那么说明存在一些与设备或网络相关的问题，需要进一步检查。在检查时，可以尝试以下步骤：</p><ol><li>确认设备是否连接到正确的 Wi-Fi 网络或移动数据网络，并且可以正常访问 Internet。</li><li>检查 PHP 后端接口的 URL 是否正确，包括主机名、端口号和路径等信息。</li><li>如果使用的是本地 PHP 服务器，则需要确保 Android 设备与 PHP 服务器在同一 Wi-Fi 网络中，并且可以通过 IP 地址相互访问。</li></ol><h5 id="细节：在-Android-设备上访问-localhost-通常是不可能的，因为-localhost-指的是本地计算机（电脑），而-Android-设备无法直接访问使用的电脑。但是，通过以下两种方式之一来访问本地-PHP-服务器："><a href="#细节：在-Android-设备上访问-localhost-通常是不可能的，因为-localhost-指的是本地计算机（电脑），而-Android-设备无法直接访问使用的电脑。但是，通过以下两种方式之一来访问本地-PHP-服务器：" class="headerlink" title="细节：在 Android 设备上访问 localhost 通常是不可能的，因为 localhost 指的是本地计算机（电脑），而 Android 设备无法直接访问使用的电脑。但是，通过以下两种方式之一来访问本地 PHP 服务器："></a>细节：在 Android 设备上访问 localhost 通常是不可能的，因为 localhost 指的是本地计算机（电脑），而 Android 设备无法直接访问使用的电脑。但是，通过以下两种方式之一来访问本地 PHP 服务器：</h5><ol><li>使用局域网 IP 地址：将电脑和 Android 设备连接到同一个局域网中，然后使用电脑的 IP 地址来代替 localhost。通过在命令提示符中输入 “ipconfig”（在 Windows 上）或 “ifconfig”（在 macOS 或 Linux 上）来查找电脑的 IP 地址。例如，如果电脑的 IP 地址为 192.168.1.100，则可以在 Android 应用程序中使用 <a href="http://192.168.1.100/myphpscript.php">http://192.168.1.100:80/myphpscript.php</a> 来代替 <a href="http://localhost/myphpscript.php%E3%80%82">http://localhost/myphpscript.php。</a></li><li>使用公共 IP 地址：如果计算机连接到了互联网，并且路由器支持端口转发，则可以使用计算机的公共 IP 地址来代替 localhost。可以在路由器设置中配置端口转发，将外部请求转发到计算机的端口上。例如，如果公共 IP 地址为 123.45.67.89，将端口 80 转发到计算机的端口 80，则可以在 Android 应用程序中使用 <a href="http://123.45.67.89/myphpscript.php">http://123.45.67.89/myphpscript.php</a> 来代替 <a href="http://localhost/myphpscript.php%E3%80%82">http://localhost/myphpscript.php。</a></li></ol><p>无论选择哪种方法，都需要确保计算机上正在运行 PHP 服务器，并且 PHP 脚本可以通过指定的 IP 地址和端口进行访问。另外，还需要确保 Android 应用程序的网络权限已经正确配置，并且可以连接到指定的 IP 地址和端口。</p><h5 id="网络权限的配置：这个问题困扰了很久，才发现是没有给程序相应的网络权限"><a href="#网络权限的配置：这个问题困扰了很久，才发现是没有给程序相应的网络权限" class="headerlink" title="网络权限的配置：这个问题困扰了很久，才发现是没有给程序相应的网络权限"></a>网络权限的配置：这个问题困扰了很久，才发现是没有给程序相应的网络权限</h5><p><em>发现问题：Logcat中报错java.net.SocketException: Permission denied</em></p><p>应用程序试图访问受保护的网络资源，但是系统不允许它这样做。通常是由于应用程序没有请求或获得必要的网络权限所致。</p><p>解决：在 AndroidManifest.xml 文件中添加以下行</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">&lt;uses-permission android:name=<span class="hljs-string">&quot;android.permission.INTERNET&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><h5 id="3-检查-Android-应用是否正确处理-JSON-数据"><a href="#3-检查-Android-应用是否正确处理-JSON-数据" class="headerlink" title="3.检查 Android 应用是否正确处理 JSON 数据"></a>3.检查 Android 应用是否正确处理 JSON 数据</h5><p>在 <code>MainActivity.kt</code> 代码中，需要确保能够正确地解析 PHP 后端返回的 JSON 数据，并将其添加到 <code>ListView</code> 中。可以使用 Android Studio 的调试功能来检查应用程序在运行时的状态，并确定是否有任何错误或异常。</p><ol><li>首先，确保应用程序能够从服务器获取 JSON 数据。可以在浏览器中访问 JSON 数据的 URL，以确保服务器正在正确地返回 JSON 数据。</li><li>在 Android 应用程序中，使用调试工具（例如 Logcat）来检查从服务器接收到的 JSON 数据是否正确。</li></ol><p>在 <code>Response.Listener</code> 和 <code>Response.ErrorListener</code> 两个回调函数中添加一些日志语句来确定是否成功接收到响应或者是否发生了错误</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> request = JsonArrayRequest(<br>    Request.Method.GET, url, <span class="hljs-literal">null</span>,<br>    Response.Listener&lt;JSONArray&gt; &#123; response -&gt;<br>        Log.d(<span class="hljs-string">&quot;MainActivity&quot;</span>, <span class="hljs-string">&quot;Response received: <span class="hljs-variable">$response</span>&quot;</span>)<br>        <span class="hljs-comment">// 处理 JSON 响应</span><br>        ...<br>    &#125;,<br>    Response.ErrorListener &#123; error -&gt;<br>        Log.e(<span class="hljs-string">&quot;MainActivity&quot;</span>, <span class="hljs-string">&quot;Error: <span class="hljs-subst">$&#123;error.message&#125;</span>&quot;</span>)<br>        <span class="hljs-comment">// 处理错误响应</span><br>        ...<br>    &#125;<br>)<br></code></pre></td></tr></table></figure><h4 id="在-Logcat-中查看是否收到了响应或者是否有错误信息。"><a href="#在-Logcat-中查看是否收到了响应或者是否有错误信息。" class="headerlink" title="在 Logcat 中查看是否收到了响应或者是否有错误信息。"></a>在 Logcat 中查看是否收到了响应或者是否有错误信息。</h4><ol><li>在 Logcat 窗口中，查看所有正在运行的 Android 设备和模拟器的日志消息。</li><li>使用过滤器查找消息。使用 Logcat 窗口顶部的搜索栏，或者通过在过滤器栏中输入关键字或过滤器等级来进行过滤。</li></ol> <img src="/2023/03/18/Android-studio%E4%B8%AD%E4%BD%BF%E7%94%A8Kotlin%E8%AF%AD%E8%A8%80%E8%BF%9E%E6%8E%A5MySql%E6%95%B0%E6%8D%AE%E5%BA%93-%E6%9C%AC%E5%9C%B0Apache%E6%9C%8D%E5%8A%A1%E5%99%A8/5.png" class=""> <p><code>Log.d(&quot;MainActivity&quot;, &quot;Response received: $response&quot;)</code> 是在 <code>Response.Listener</code> 回调函数中添加的，所以它的 TAG 是 “MainActivity”，输出的是 “Response received” 字符串和响应的内容。</p><p>日志的 TAG 是用于过滤和识别日志消息的标识符。在应用程序中，使用不同的 TAG 来标记不同的日志消息。</p><p>在 Logcat 中，通过选择过滤器栏中的 TAG 选项来过滤特定的日志消息。因此，通过为不同的日志消息指定不同的 TAG，可以查找和过滤感兴趣的日志消息。</p><p>在示例代码中，使用 “MainActivity” 作为 TAG。</p><h4 id="最后，正常运行的结果："><a href="#最后，正常运行的结果：" class="headerlink" title="最后，正常运行的结果："></a>最后，正常运行的结果：</h4> <img src="/2023/03/18/Android-studio%E4%B8%AD%E4%BD%BF%E7%94%A8Kotlin%E8%AF%AD%E8%A8%80%E8%BF%9E%E6%8E%A5MySql%E6%95%B0%E6%8D%AE%E5%BA%93-%E6%9C%AC%E5%9C%B0Apache%E6%9C%8D%E5%8A%A1%E5%99%A8/6.png" class=""> <div class="note note-info">            <h2 id="使用JDBC直接访问数据库和通过Web服务器调用数据之间的区别："><a href="#使用JDBC直接访问数据库和通过Web服务器调用数据之间的区别：" class="headerlink" title="使用JDBC直接访问数据库和通过Web服务器调用数据之间的区别："></a>使用JDBC直接访问数据库和通过Web服务器调用数据之间的区别：</h2><ol><li>安全性：使用Web服务器可以提供更好的安全性，因为您可以在服务器上实现身份验证和授权。如果您直接使用JDBC连接数据库，则需要在代码中包含用户名和密码，这可能会导致安全问题。</li><li>可伸缩性：使用Web服务器可以更容易地扩展您的应用程序，因为您可以在服务器上添加更多的资源（例如，更多的CPU和内存），以处理更多的请求。如果您直接使用JDBC连接数据库，则可能需要管理多个数据库连接，这可能会导致性能问题。</li><li>兼容性：通过Web服务器调用数据可以提高应用程序的兼容性。不同的客户端可以使用不同的协议（例如，HTTP和HTTPS）与服务器进行通信。如果您直接使用JDBC连接数据库，则需要确保客户端具有正确的JDBC驱动程序。</li><li>可维护性：通过Web服务器调用数据可以更容易地维护应用程序。如果您直接使用JDBC连接数据库，则需要在应用程序中维护数据库连接代码，这可能会导致维护成本高昂。</li></ol><p>总之，通过Web服务器调用数据是一种更安全、更可伸缩、更兼容和更易于维护的方法，而直接使用JDBC连接数据库则可能导致安全性、可伸缩性、兼容性和可维护性方面的问题。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Android studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android studio</tag>
      
      <tag>MySql</tag>
      
      <tag>Apache服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Liunx系统下使用gcc进行程序预处理、编译、汇编和链接</title>
    <link href="/2023/03/16/Liunx%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8gcc%E8%BF%9B%E8%A1%8C%E7%A8%8B%E5%BA%8F%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E5%92%8C%E9%93%BE%E6%8E%A5/"/>
    <url>/2023/03/16/Liunx%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8gcc%E8%BF%9B%E8%A1%8C%E7%A8%8B%E5%BA%8F%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E5%92%8C%E9%93%BE%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="Liunx系统下使用-gcc-进行程序预处理、编译、汇编和链接："><a href="#Liunx系统下使用-gcc-进行程序预处理、编译、汇编和链接：" class="headerlink" title="Liunx系统下使用 gcc 进行程序预处理、编译、汇编和链接："></a>Liunx系统下使用 gcc 进行程序预处理、编译、汇编和链接：</h1><h3 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h3><h4 id="1-生成main-c，sum-c文件"><a href="#1-生成main-c，sum-c文件" class="headerlink" title="1.生成main.c，sum.c文件"></a>1.生成main.c，sum.c文件</h4> <img src="/2023/03/16/Liunx%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8gcc%E8%BF%9B%E8%A1%8C%E7%A8%8B%E5%BA%8F%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E5%92%8C%E9%93%BE%E6%8E%A5/wps1.jpg" class="">   <img src="/2023/03/16/Liunx%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8gcc%E8%BF%9B%E8%A1%8C%E7%A8%8B%E5%BA%8F%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E5%92%8C%E9%93%BE%E6%8E%A5/wps2.jpg" class="">   <img src="/2023/03/16/Liunx%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8gcc%E8%BF%9B%E8%A1%8C%E7%A8%8B%E5%BA%8F%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E5%92%8C%E9%93%BE%E6%8E%A5/wps3.jpg" class="">  <h4 id="2-编译成可重定位的目标文件"><a href="#2-编译成可重定位的目标文件" class="headerlink" title="2.编译成可重定位的目标文件"></a>2.编译成可重定位的目标文件</h4><h5 id="cpp-E-main-c-main-i"><a href="#cpp-E-main-c-main-i" class="headerlink" title="cpp -E main.c main.i"></a>cpp -E main.c main.i</h5> <img src="/2023/03/16/Liunx%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8gcc%E8%BF%9B%E8%A1%8C%E7%A8%8B%E5%BA%8F%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E5%92%8C%E9%93%BE%E6%8E%A5/wps4.jpg" class="">  <h5 id="cc-S-main-i-main-s"><a href="#cc-S-main-i-main-s" class="headerlink" title="cc -S main.i main.s"></a>cc -S main.i main.s</h5> <img src="/2023/03/16/Liunx%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8gcc%E8%BF%9B%E8%A1%8C%E7%A8%8B%E5%BA%8F%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E5%92%8C%E9%93%BE%E6%8E%A5/wps5.jpg" class="">  <h5 id="as-main-s-o-main-o"><a href="#as-main-s-o-main-o" class="headerlink" title="as main.s -o main.o"></a>as main.s -o main.o</h5> <img src="/2023/03/16/Liunx%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8gcc%E8%BF%9B%E8%A1%8C%E7%A8%8B%E5%BA%8F%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E5%92%8C%E9%93%BE%E6%8E%A5/wps6.jpg" class="">  <h4 id="类比出sum"><a href="#类比出sum" class="headerlink" title="类比出sum"></a>类比出sum</h4> <img src="/2023/03/16/Liunx%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8gcc%E8%BF%9B%E8%A1%8C%E7%A8%8B%E5%BA%8F%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E5%92%8C%E9%93%BE%E6%8E%A5/wps7.jpg" class="">   <img src="/2023/03/16/Liunx%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8gcc%E8%BF%9B%E8%A1%8C%E7%A8%8B%E5%BA%8F%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E5%92%8C%E9%93%BE%E6%8E%A5/wps8.jpg" class="">  <h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><h5 id="ld-m-elf-x86-64-main-o-sum-o-x2F-usr-x2F-lib-x2F-x86-64-linux-gnu-x2F-libc-so-6-o-hello-dynamic-linker-x2F-usr-x2F-lib-x2F-x86-64-linux-gnu-x2F-ld-linux-x86-64-so-2-x2F-usr-x2F-lib-x2F-x86-64-linux-gnu-x2F-crt1-o-x2F-usr-x2F-lib-x2F-x86-64-linux-gnu-x2F-crti-o-x2F-usr-x2F-lib-x2F-gcc-x2F-x86-64-linux-gnu-x2F-9-x2F-crtbegin-o-lc-x2F-usr-x2F-lib-x2F-gcc-x2F-x86-64-linux-gnu-x2F-9-x2F-crtend-o-x2F-usr-x2F-lib-x2F-x86-64-linux-gnu-x2F-crtn-o"><a href="#ld-m-elf-x86-64-main-o-sum-o-x2F-usr-x2F-lib-x2F-x86-64-linux-gnu-x2F-libc-so-6-o-hello-dynamic-linker-x2F-usr-x2F-lib-x2F-x86-64-linux-gnu-x2F-ld-linux-x86-64-so-2-x2F-usr-x2F-lib-x2F-x86-64-linux-gnu-x2F-crt1-o-x2F-usr-x2F-lib-x2F-x86-64-linux-gnu-x2F-crti-o-x2F-usr-x2F-lib-x2F-gcc-x2F-x86-64-linux-gnu-x2F-9-x2F-crtbegin-o-lc-x2F-usr-x2F-lib-x2F-gcc-x2F-x86-64-linux-gnu-x2F-9-x2F-crtend-o-x2F-usr-x2F-lib-x2F-x86-64-linux-gnu-x2F-crtn-o" class="headerlink" title="ld -m elf_x86_64 main.o sum.o &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6 -o hello -dynamic-linker &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-linux-x86-64.so.2 &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;crt1.o &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;crti.o &#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;x86_64-linux-gnu&#x2F;9&#x2F;crtbegin.o -lc &#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;x86_64-linux-gnu&#x2F;9&#x2F;crtend.o &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;crtn.o"></a>ld -m elf_x86_64 main.o sum.o &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6 -o hello -dynamic-linker &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-linux-x86-64.so.2 &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;crt1.o &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;crti.o &#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;x86_64-linux-gnu&#x2F;9&#x2F;crtbegin.o -lc &#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;x86_64-linux-gnu&#x2F;9&#x2F;crtend.o &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;crtn.o</h5> <img src="/2023/03/16/Liunx%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8gcc%E8%BF%9B%E8%A1%8C%E7%A8%8B%E5%BA%8F%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E5%92%8C%E9%93%BE%E6%8E%A5/wps9.jpg" class="">  <p>注意 gcc 版本号：<br> <img src="/2023/03/16/Liunx%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8gcc%E8%BF%9B%E8%A1%8C%E7%A8%8B%E5%BA%8F%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E5%92%8C%E9%93%BE%E6%8E%A5/wps11.jpg" class=""> </p><p> 否则报错：</p> <img src="/2023/03/16/Liunx%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8gcc%E8%BF%9B%E8%A1%8C%E7%A8%8B%E5%BA%8F%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E5%92%8C%E9%93%BE%E6%8E%A5/wps17.jpg" class="">  <img src="/2023/03/16/Liunx%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8gcc%E8%BF%9B%E8%A1%8C%E7%A8%8B%E5%BA%8F%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E5%92%8C%E9%93%BE%E6%8E%A5/wps12.jpg" class="">  <h3 id="G"><a href="#G" class="headerlink" title="G++"></a>G++</h3><h4 id="第一步c-E-main-c-o-main-i"><a href="#第一步c-E-main-c-o-main-i" class="headerlink" title="第一步c++ -E main.c -o main.i"></a>第一步c++ -E main.c -o main.i</h4> <img src="/2023/03/16/Liunx%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8gcc%E8%BF%9B%E8%A1%8C%E7%A8%8B%E5%BA%8F%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E5%92%8C%E9%93%BE%E6%8E%A5/wps13.jpg" class="">  <h4 id="第二步c-S-main-i-o-main-s"><a href="#第二步c-S-main-i-o-main-s" class="headerlink" title="第二步c++ -S main.i -o main.s"></a>第二步c++ -S main.i -o main.s</h4><h4 id="第三步as-o-main-o-main-s"><a href="#第三步as-o-main-o-main-s" class="headerlink" title="第三步as -o main.o main.s"></a>第三步as -o main.o main.s</h4> <img src="/2023/03/16/Liunx%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8gcc%E8%BF%9B%E8%A1%8C%E7%A8%8B%E5%BA%8F%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E5%92%8C%E9%93%BE%E6%8E%A5/wps14.jpg" class="">  <h4 id="Sum："><a href="#Sum：" class="headerlink" title="Sum："></a>Sum：</h4> <img src="/2023/03/16/Liunx%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8gcc%E8%BF%9B%E8%A1%8C%E7%A8%8B%E5%BA%8F%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E5%92%8C%E9%93%BE%E6%8E%A5/wps15.jpg" class="">  <h5 id="ld-m-elf-x86-64-main-o-sum-o-x2F-usr-x2F-lib-x2F-x86-64-linux-gnu-x2F-libc-so-6-x2F-lib-x2F-x86-64-linux-gnu-x2F-libstdc-so-6-o-main-dynamic-linker-x2F-usr-x2F-lib-x2F-x86-64-linux-gnu-x2F-ld-linux-x86-64-so-2-x2F-usr-x2F-lib-x2F-x86-64-linux-gnu-x2F-crt1-o-x2F-usr-x2F-lib-x2F-x86-64-linux-gnu-x2F-crti-o-x2F-usr-x2F-lib-x2F-gcc-x2F-x86-64-linux-gnu-x2F-9-x2F-crtbegin-o-lc-x2F-usr-x2F-lib-x2F-gcc-x2F-x86-64-linux-gnu-x2F-9-x2F-crtend-o-x2F-usr-x2F-lib-x2F-x86-64-linux-gnu-x2F-crtn-o"><a href="#ld-m-elf-x86-64-main-o-sum-o-x2F-usr-x2F-lib-x2F-x86-64-linux-gnu-x2F-libc-so-6-x2F-lib-x2F-x86-64-linux-gnu-x2F-libstdc-so-6-o-main-dynamic-linker-x2F-usr-x2F-lib-x2F-x86-64-linux-gnu-x2F-ld-linux-x86-64-so-2-x2F-usr-x2F-lib-x2F-x86-64-linux-gnu-x2F-crt1-o-x2F-usr-x2F-lib-x2F-x86-64-linux-gnu-x2F-crti-o-x2F-usr-x2F-lib-x2F-gcc-x2F-x86-64-linux-gnu-x2F-9-x2F-crtbegin-o-lc-x2F-usr-x2F-lib-x2F-gcc-x2F-x86-64-linux-gnu-x2F-9-x2F-crtend-o-x2F-usr-x2F-lib-x2F-x86-64-linux-gnu-x2F-crtn-o" class="headerlink" title="ld -m elf_x86_64 main.o sum.o &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6 &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libstdc++.so.6 -o main -dynamic-linker &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-linux-x86-64.so.2 &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;crt1.o &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;crti.o &#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;x86_64-linux-gnu&#x2F;9&#x2F;crtbegin.o -lc &#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;x86_64-linux-gnu&#x2F;9&#x2F;crtend.o &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;crtn.o"></a>ld -m elf_x86_64 main.o sum.o &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6 &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libstdc++.so.6 -o main -dynamic-linker &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-linux-x86-64.so.2 &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;crt1.o &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;crti.o &#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;x86_64-linux-gnu&#x2F;9&#x2F;crtbegin.o -lc &#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;x86_64-linux-gnu&#x2F;9&#x2F;crtend.o &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;crtn.o</h5> <img src="/2023/03/16/Liunx%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8gcc%E8%BF%9B%E8%A1%8C%E7%A8%8B%E5%BA%8F%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E5%92%8C%E9%93%BE%E6%8E%A5/wps16.jpg" class="">  ]]></content>
    
    
    <categories>
      
      <category>微机系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Liunx</tag>
      
      <tag>gcc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据的位运算及补码运算[makefile的简答使用]</title>
    <link href="/2023/03/16/%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E5%8F%8A%E8%A1%A5%E7%A0%81%E8%BF%90%E7%AE%97-makefile%E7%9A%84%E7%AE%80%E7%AD%94%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/16/%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E5%8F%8A%E8%A1%A5%E7%A0%81%E8%BF%90%E7%AE%97-makefile%E7%9A%84%E7%AE%80%E7%AD%94%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="数据的位运算及补码运算-makefile的简答使用"><a href="#数据的位运算及补码运算-makefile的简答使用" class="headerlink" title="数据的位运算及补码运算[makefile的简答使用]"></a>数据的位运算及补码运算[makefile的简答使用]</h1><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><h4 id="（1）位操作"><a href="#（1）位操作" class="headerlink" title="（1）位操作"></a>（1）位操作</h4><p>表1-7行出了一组位操作函数。“功能”栏给出函数应实现的输出（即功能），“约束条件”栏指出函数实现必须满足的编码规则，“最多操作符数量”指出设计的函数实现中允许使用的操作符的最大数量。</p><h4 id="（2）补码运算"><a href="#（2）补码运算" class="headerlink" title="（2）补码运算"></a>（2）补码运算</h4><p>表8-11行出了设计的程序中一组使用整数的补码表示的函数。</p><p>表补码运算题目</p><table><thead><tr><th>1</th><th>lsbZero</th><th>将x的最低有效位（LSB）清零</th><th>仅能使用! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</th><th>5</th></tr></thead><tbody><tr><td>2</td><td>byteNot</td><td>将x的第n个字节取反（字节从LSB开始到MSB依次编号为1-4）</td><td>仅能使用! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</td><td>6</td></tr><tr><td>3</td><td>byteXor</td><td>比较x和y的第n个字节（字节从LSB开始到MSB依次编号为1-4），若不同，则返回1；若相同，则返回0</td><td>仅能使用! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</td><td>20</td></tr><tr><td>4</td><td>logicalAnd</td><td>x&amp;&amp; y</td><td>仅能使用! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</td><td>20</td></tr><tr><td>5</td><td>logicalOr</td><td>x|| y</td><td>仅能使用! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</td><td>20</td></tr><tr><td>6</td><td>rotateLeft</td><td>将x循环左移n位</td><td>仅能使用! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</td><td>25</td></tr><tr><td>7</td><td>parityCheck</td><td>若x有奇数个1，则返回1；否则，返回0</td><td>仅能使用! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</td><td>20</td></tr></tbody></table><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h5 id="将x的第n个字节取反（字节从LSB开始到MSB依次编号为0-3）"><a href="#将x的第n个字节取反（字节从LSB开始到MSB依次编号为0-3）" class="headerlink" title="将x的第n个字节取反（字节从LSB开始到MSB依次编号为0-3）"></a>将x的第n个字节取反（字节从LSB开始到MSB依次编号为0-3）</h5><p>对某一位进行取反，就是和 111…0…11 进行异或操作[倒数第n位为0] ；计算这个数的步骤：将0…01左移n-1位 ；因为不能使用 - 操作符，那么就0…01先左移n位，再右移1位；</p><p>1.计算得出111…0…11   [倒数第n位为0]</p><p>2.与x进行异或运算 -&gt; 1^0&#x3D;1,0^0&#x3D;1; 其他位置与1^后不变</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">byteNot</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> n)</span> </span>&#123;<br><span class="hljs-type">int</span> temp = (<span class="hljs-number">1</span> &lt;&lt; n) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-built_in">printbinary</span>(temp);  <span class="hljs-comment">//测试左移后得到的数是否正确</span><br><span class="hljs-type">int</span> result = x ^ temp;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="比较x和y的第n个字节（字节从LSB开始到MSB依次编号为0-3），若不同，则返回1；若相同，则返回0"><a href="#比较x和y的第n个字节（字节从LSB开始到MSB依次编号为0-3），若不同，则返回1；若相同，则返回0" class="headerlink" title="比较x和y的第n个字节（字节从LSB开始到MSB依次编号为0-3），若不同，则返回1；若相同，则返回0"></a>比较x和y的第n个字节（字节从LSB开始到MSB依次编号为0-3），若不同，则返回1；若相同，则返回0</h5><p>将x，y除第n个字节以外的置0：进行与运算，00…1…0[倒数第n位为1]，这样得到的结果就是0…[本来的值]…0，同byteNot函数中的操作<br>最后再进行一次异或比较  注：要使相同为1，不同为0，需要先对计算后的x，y进行一次取反操作</p><p>1.计算得到00…1…0[倒数第n位为1]</p><p>2.与x，y进行与运算</p><p>3.两个结果进行异或比较</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">byteXor</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> n)</span> </span>&#123;<br><span class="hljs-type">int</span> temp_x = (x &lt;&lt; n) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> temp_y = (y &lt;&lt; n) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> result = temp_x ^ temp_y;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>注：两次逻辑非的使用  !!  作用是获得逻辑真&#x2F;假，即1&#x2F;0；   </p><p>例：0010 ^ 0000 结果 0010 ，而结果要的是1，就使用!!</p><p>总结：其他数据类型向bool值的转换。</p><h5 id="后面的代码就不一一分开详述了，思想在注释中"><a href="#后面的代码就不一一分开详述了，思想在注释中" class="headerlink" title="后面的代码就不一一分开详述了，思想在注释中"></a>后面的代码就不一一分开详述了，思想在注释中</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 十进制转二进制</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printbinary</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">16</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>&#123;<br><span class="hljs-keyword">if</span> (x &amp; (<span class="hljs-number">1</span> &lt;&lt; i))<br>cout &lt;&lt; <span class="hljs-string">&quot;1&quot;</span>;<br><span class="hljs-keyword">else</span><br>cout &lt;&lt; <span class="hljs-string">&quot;0&quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><br><br><span class="hljs-comment">//将x的最低有效位（LSB）清零</span><br><span class="hljs-comment">//要将最后一位清零，可以进行与运算是实现： 1 &amp; 0 = 0； 0 &amp; 0 = 0; -&gt; 找一个最后一位为0[ &amp;运算后归0 ]，其余位为1[ &amp;运算后不变 ]； 即 ~1 ；</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lsbZero</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-type">int</span> temp = ~<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> result = x &amp; temp;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">//将x的第n个字节取反（字节从LSB开始到MSB依次编号为0-3）</span><br><span class="hljs-comment">//对某一位进行取反，就是和 111…0…11 进行异或操作[倒数第n位为0] ；计算这个数的步骤：将0…01左移n-1位 ；</span><br><span class="hljs-comment">//因为不能使用 - 操作符，那么就0…01先左移n位，再右移1位；</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">byteNot</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> n)</span> </span>&#123;<br><span class="hljs-type">int</span> temp = (<span class="hljs-number">1</span> &lt;&lt; n) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-built_in">printbinary</span>(temp);  <span class="hljs-comment">//测试左移后得到的数是否正确</span><br><span class="hljs-type">int</span> result = x ^ temp;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">//比较x和y的第n个字节（字节从LSB开始到MSB依次编号为0-3），若不同，则返回1；若相同，则返回0</span><br><span class="hljs-comment">//将x，y除这一位以外的数都置0：进行与运算，00…1…0[倒数第n位为1]，这样得到的结果就是0…[本来的值]…0，同byteNot函数中的操作</span><br><span class="hljs-comment">//最后再进行一次异或比较，要使相同为1，不同为0，需要先对计算后的x，y进行一次取反操作</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">byteXor</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> n)</span> </span>&#123;<br><span class="hljs-type">int</span> temp = (<span class="hljs-number">1</span> &lt;&lt; n) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-comment">//printbinary(temp);</span><br><span class="hljs-type">int</span> temp_x = temp &amp; x;<br><span class="hljs-type">int</span> temp_y = temp &amp; y;<br><span class="hljs-comment">//printbinary(temp_x);</span><br><span class="hljs-comment">//printbinary(temp_y);</span><br><span class="hljs-type">int</span> result = !!(temp_x ^ temp_y);<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">// x &amp;&amp; y</span><br><span class="hljs-comment">// 判断 !!x 是不是 1 ，是的话再判断!!y 是不是1 ，是的话返回1 ，不是返回0</span><br><span class="hljs-comment">// 仅用这些操作符，无法做到部分判断，那么就计算两个值加起来是不是2，是就代表逻辑真</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">logicalAnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br><span class="hljs-type">int</span> temp = !!x + !!y;<br><span class="hljs-type">bool</span> result = !!(temp &amp; <span class="hljs-number">2</span>);<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">//x || y</span><br><span class="hljs-comment">// 判断 !!x 是不是 1 ，是的话直接输出1，否则再判断!!y 是不是1 ，是的话返回1 ，不是返回0</span><br><span class="hljs-comment">// 仅用这些操作符，无法做到部分判断，那么就计算两个值加起来是不是不为0，是就代表逻辑真</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">logicalOr</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span> </span>&#123;<br><span class="hljs-type">int</span> temp = !!x + !!y;<br><span class="hljs-type">bool</span> result = !!(temp);<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">// 将x循环左移n位</span><br><span class="hljs-comment">// 得到x的前n位，用temp记录，取出记录的前n位-&gt;前n位右移至低n位，即移动16-n位，只允许+，[二进制负数=正数值取反加1]则用+代替-，即17+~n</span><br><span class="hljs-comment">// 如果是负数得到结果前面全1，这样最后合并的时候，前面部分就会出现0被1替代的情况</span><br><span class="hljs-comment">// 所以：将右移的结果 &amp; 00…11 [n个1]，即~1 + (1 &lt;&lt; n) + 1</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rotateLeft</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> n)</span> </span>&#123;<br><span class="hljs-type">int</span> temp = x;<br><span class="hljs-type">int</span> temp2 = temp &gt;&gt; (~n + <span class="hljs-number">17</span>);<br><span class="hljs-type">int</span> temp3 =temp2 &amp; (~<span class="hljs-number">1</span> + (<span class="hljs-number">1</span> &lt;&lt; n) + <span class="hljs-number">1</span>);<br><span class="hljs-comment">//printbinary(temp2);</span><br><span class="hljs-comment">//printbinary(temp3);</span><br><span class="hljs-comment">//printbinary(temp);</span><br><span class="hljs-comment">//int result = (x &lt;&lt; n) | ((temp &gt;&gt; (~n + 17)) &amp; (~1 + (1 &lt;&lt; n) + 1));</span><br><span class="hljs-type">int</span> result = (x &lt;&lt; n) | temp3;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">// 若x有奇数个1，则返回1；否则，返回0</span><br><span class="hljs-comment">// 给定二进制数01，它只有两位，那么它的奇偶性可以通过0^1 = 1获得，这里返回1，与它是奇数相符合。</span><br><span class="hljs-comment">// 给定二进制数11，它只有两位，那么它的奇偶性可以通过1^1 = 0获得，这里返回0，与它是偶数相符合。</span><br><span class="hljs-comment">// 总结：异或可以压缩两位上1个数的奇偶性。即压缩奇偶性信息为1或者0.</span><br><span class="hljs-comment">// 二叉树思想异或：每次将最后两位进行压缩； 那么目的就是不断右移，判断最后两位</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">parityCheck</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>x = x ^ (x &gt;&gt; <span class="hljs-number">1</span>);<br>x = x ^ (x &gt;&gt; <span class="hljs-number">2</span>);<br>x = x ^ (x &gt;&gt; <span class="hljs-number">4</span>);<br>x = x ^ (x &gt;&gt; <span class="hljs-number">8</span>);<br>x = x &amp; <span class="hljs-number">1</span>;  <span class="hljs-comment">//最后和1进行与运算,若1则返回1，表示奇数个；若0则返回0，表示偶数个；</span><br><span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-comment">// 计算2*x，如果不溢出，则返回1，否则，返回0</span><br><span class="hljs-comment">// 判断第一位是否相同:与10000…进行与运算，保留第一位，再将这两个数进行异或运算，即符号位相同，没溢出，不同代表溢出了</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">mul2OK</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-type">int</span> x2 = x &lt;&lt; <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> temp_x = x &amp; (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">16</span>);<br><span class="hljs-type">int</span> temp_x2 = x2 &amp; (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">16</span>);<br><span class="hljs-type">bool</span> result = temp_x ^ temp_x2;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><br><span class="hljs-comment">// 计算(x*3)/2，朝零方向取整</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mult3div2</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-comment">// 先计算x*3/2; *3用x+2x表示</span><br><span class="hljs-type">int</span> temp = (x &lt;&lt; <span class="hljs-number">1</span>) + x;<br><span class="hljs-comment">// 如果是负数，取整要加上后一位的值</span><br><span class="hljs-type">int</span> flag = temp &amp; (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">16</span>); <span class="hljs-comment">//同上进行一次与运算即可,得到符号位1000……，然后右移15位</span><br>flag = flag &gt;&gt; <span class="hljs-number">16</span>;<br><span class="hljs-type">int</span> result = temp &gt;&gt; <span class="hljs-number">1</span>; <span class="hljs-comment">//进行除2操作，然后和~flag进行与运算：如果是正数那么还是原值，如果是负数，要再判断一下是否加最后一位的值，向0取整</span><br>result = ((~flag) &amp; result) + (flag &amp; (result + (temp &amp; <span class="hljs-number">1</span>)));<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">// 计算x –y，如果不溢出，则返回1，否则，返回0</span><br><span class="hljs-comment">// 判断是否会溢出：异号相减才会发生 10-(-5)，-10-5，才可能溢出，而10-5两个数都在范围内，相减的绝对值肯定小于任一数的绝对值，不可能溢出</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">subOK</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span> </span>&#123;<br><span class="hljs-type">int</span> flag_x = x &gt;&gt; <span class="hljs-number">16</span>; <span class="hljs-comment">//求x符号位</span><br><span class="hljs-type">int</span> flag_y = y &gt;&gt; <span class="hljs-number">16</span>; <span class="hljs-comment">//求y符号位</span><br><span class="hljs-type">int</span> flag = (~y + x + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">16</span>; <span class="hljs-comment">//x-y 用 ~y + x +1表示 ，然后求符号位</span><br><span class="hljs-comment">//判断x，y是否异号，然后判断flag是否和x符号一致  期望：x,y异号，x,z异号，此时溢出返回0</span><br><span class="hljs-type">bool</span> result = (flag_x ^ flag_y) &amp; (flag_x ^ flag);<br><span class="hljs-keyword">return</span> !result;<br>&#125;<br><br><br><span class="hljs-comment">// 求x的绝对值</span><br><span class="hljs-comment">// 负数的话将第一位修改为0即可 ：和 0111…进行与操作</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">absVal</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-comment">//获得操作数0111…：100…取~值，即将1左移17位再~</span><br><span class="hljs-type">int</span> temp = ~(<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">16</span>);<br><span class="hljs-comment">//取出符号位</span><br><span class="hljs-type">int</span> flag = x &gt;&gt; <span class="hljs-number">16</span>;<br><span class="hljs-comment">//printbinary(temp); //验证是不是0111…</span><br><span class="hljs-comment">//通过符号位控制是否要对原始数据进行改变，原理同 mult3div2 函数</span><br><span class="hljs-comment">//负数的话要取反码+1</span><br><span class="hljs-type">int</span> result = ((~flag) &amp; x) + (flag &amp; ((~x) + <span class="hljs-number">1</span>));<br><span class="hljs-comment">//printbinary(x);</span><br><span class="hljs-comment">//printbinary(result);  //输出二进制表示，验证结果</span><br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>cout&lt;&lt; <span class="hljs-string">&quot; ************** 测试案例1 ****************** &quot;</span>&lt;&lt; endl;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>*));<br><br><span class="hljs-type">int</span> x = <span class="hljs-number">5</span> ;  <span class="hljs-comment">// 0101</span><br><span class="hljs-type">int</span> y = <span class="hljs-number">6</span> ;  <span class="hljs-comment">// 0110</span><br><span class="hljs-type">int</span> z = <span class="hljs-number">7</span> ;  <span class="hljs-comment">// 0111</span><br><span class="hljs-type">int</span> m = <span class="hljs-number">0</span> ;<br><span class="hljs-type">int</span> n = <span class="hljs-number">52222</span> ;<br>cout &lt;&lt; <span class="hljs-string">&quot;-----将x的最低有效位（LSB）清零-----&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br><span class="hljs-built_in">printbinary</span>(<span class="hljs-built_in">lsbZero</span>(x));<br>cout &lt;&lt; <span class="hljs-string">&quot;------将x的第n个字节取反----&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入n值为：&quot;</span>;<br>cin &gt;&gt; n;<br><span class="hljs-built_in">printbinary</span>(<span class="hljs-built_in">byteNot</span>(x,n));<br>cout &lt;&lt; <span class="hljs-string">&quot;-----比较x和y的第n个字节，若不同，则返回1；若相同，则返回0-----&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入y值为：&quot;</span>;<br>cin &gt;&gt; y;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入n值为：&quot;</span>;<br>cin &gt;&gt; n;<br><span class="hljs-built_in">printbinary</span>(<span class="hljs-built_in">byteXor</span>(x,y,n));<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入y值为：&quot;</span>;<br>cin &gt;&gt; y;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入n值为：&quot;</span>;<br>cin &gt;&gt; n;<br><span class="hljs-built_in">printbinary</span>(<span class="hljs-built_in">byteXor</span>(x,y,n));<br>cout &lt;&lt; <span class="hljs-string">&quot;-----x &amp;&amp; -----&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入y值为：&quot;</span>;<br>cin &gt;&gt; y;<br>cout &lt;&lt; <span class="hljs-built_in">logicalAnd</span>(x, y) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;-----x || y-----&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入y值为：&quot;</span>;<br>cin &gt;&gt; y;<br>cout &lt;&lt; <span class="hljs-built_in">logicalOr</span>(x, y) &lt;&lt; endl;<br><span class="hljs-comment">//cout &lt;&lt; &quot;----------&quot; &lt;&lt; endl;</span><br><span class="hljs-comment">//cout &lt;&lt; logicalAnd(x, m) &lt;&lt; endl;</span><br>cout &lt;&lt; <span class="hljs-string">&quot;-----将x循环左移n位-----&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入n值为：&quot;</span>;<br>cin &gt;&gt; n;<br>cout &lt;&lt; <span class="hljs-string">&quot;循环前：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">printbinary</span>(x);<br><span class="hljs-built_in">printbinary</span>(<span class="hljs-built_in">rotateLeft</span>(x, n));<br>cout &lt;&lt; <span class="hljs-string">&quot;-----若x有奇数个1，则返回1；否则，返回0-----&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br>cout &lt;&lt; <span class="hljs-string">&quot;x的二进制表示为:&quot;</span>;<br><span class="hljs-built_in">printbinary</span>(x);<br>cout &lt;&lt; <span class="hljs-string">&quot;结果如下:&quot;</span>;<br>cout &lt;&lt; endl &lt;&lt; <span class="hljs-built_in">parityCheck</span>(x);<br>cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;-----计算2*x，如果不溢出，则返回1，否则，返回0-----&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br>cout &lt;&lt; <span class="hljs-built_in">mul2OK</span>(x);<br>cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;-----计算(x*3)/2，朝零方向取整-----&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br><span class="hljs-comment">//printbinary(50000);</span><br>cout &lt;&lt; <span class="hljs-built_in">mult3div2</span>(x);<br>cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;----计算x –y，如果不溢出，则返回1，否则，返回0------&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入y值为：&quot;</span>;<br>cin &gt;&gt; y;<br>cout &lt;&lt; <span class="hljs-built_in">subOK</span>(x,y);<br>cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;-----求x的绝对值-----&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br>cout &lt;&lt; <span class="hljs-built_in">absVal</span>(x) &lt;&lt;endl ;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在Liunx中用gcc实现"><a href="#在Liunx中用gcc实现" class="headerlink" title="在Liunx中用gcc实现"></a>在Liunx中用gcc实现</h3><p>Makefile文件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++">test: main.o printbinary.o lsbZero.o byteNot.o byteXor.o logicalAnd.o logicalOr.o rotateLeft.o parityCheck.o mul2OK.o mult3div2.o subOK.o absVal.o<br>g++ -o test main.o printbinary.o lsbZero.o byteNot.o byteXor.o logicalAnd.o logicalOr.o rotateLeft.o parityCheck.o mul2OK.o mult3div2.o subOK.o absVal.o<br><br>main.o: main.c test.h<br>g++ -c main.c<br><br>printbinary.o:  printbinary.c test.h<br>g++ -c printbinary.c<br><br>lsbZero.o: lsbZero.c test.h<br>g++ -c lsbZero.c<br><br>byteNot.o: byteNot.c test.h<br>g++ -c byteNot.c<br><br>byteXor.o: byteXor.c test.h<br>g++ -c byteXor.c<br><br>logicalAnd.o: logicalAnd.c test.h<br>g++ -c logicalAnd.c <br><br>logicalOr.o: logicalOr.c test.h<br>g++ -c logicalOr.c<br><br>rotateLeft.o: rotateLeft.c test.h<br>g++ -c rotateLeft.c<br><br>parityCheck.o: parityCheck.c test.h<br>g++ -c parityCheck.c<br><br>mul2OK.o: mul2OK.c test.h<br>g++ -c mul2OK.c<br><br>mult3div2.o: mult3div2.c test.h<br>g++ -c mult3div2.c<br><br>subOK.o: subOK.c test.h<br>g++ -c subOK.c<br><br>absVal.o: absVal.c test.h<br>g++ -c absVal.c<br><br>clean:<br>rm -rf test<br>rm -rf *.o<br></code></pre></td></tr></table></figure><p>test文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _TEST_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _TEST_H</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printbinary</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lsbZero</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">byteNot</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">byteXor</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">logicalAnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">logicalOr</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rotateLeft</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">parityCheck</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">mul2OK</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mult3div2</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">subOK</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">absVal</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;test.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>cout&lt;&lt; <span class="hljs-string">&quot; ************** 测试案例1 ****************** &quot;</span>&lt;&lt; endl;<br><span class="hljs-comment">// cout &lt;&lt; sizeof(int*);</span><br><br><span class="hljs-type">int</span> x = <span class="hljs-number">5</span> ;  <span class="hljs-comment">// 0101</span><br><span class="hljs-type">int</span> y = <span class="hljs-number">6</span> ;  <span class="hljs-comment">// 0110</span><br><span class="hljs-type">int</span> z = <span class="hljs-number">7</span> ;  <span class="hljs-comment">// 0111</span><br><span class="hljs-type">int</span> m = <span class="hljs-number">0</span> ;<br><span class="hljs-type">int</span> n = <span class="hljs-number">52222</span> ;<br>cout &lt;&lt; <span class="hljs-string">&quot;-----将x的最低有效位（LSB）清零-----&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br><span class="hljs-built_in">printbinary</span>(<span class="hljs-built_in">lsbZero</span>(x));<br>cout &lt;&lt; <span class="hljs-string">&quot;------将x的第n个字节取反----&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入n值为：&quot;</span>;<br>cin &gt;&gt; n;<br><span class="hljs-built_in">printbinary</span>(<span class="hljs-built_in">byteNot</span>(x,n));<br>cout &lt;&lt; <span class="hljs-string">&quot;-----比较x和y的第n个字节，若不同，则返回1；若相同，则返回0-----&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入y值为：&quot;</span>;<br>cin &gt;&gt; y;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入n值为：&quot;</span>;<br>cin &gt;&gt; n;<br><span class="hljs-built_in">printbinary</span>(<span class="hljs-built_in">byteXor</span>(x,y,n));<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入y值为：&quot;</span>;<br>cin &gt;&gt; y;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入n值为：&quot;</span>;<br>cin &gt;&gt; n;<br><span class="hljs-built_in">printbinary</span>(<span class="hljs-built_in">byteXor</span>(x,y,n));<br>cout &lt;&lt; <span class="hljs-string">&quot;-----x &amp;&amp; -----&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入y值为：&quot;</span>;<br>cin &gt;&gt; y;<br>cout &lt;&lt; <span class="hljs-built_in">logicalAnd</span>(x, y) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;-----x || y-----&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入y值为：&quot;</span>;<br>cin &gt;&gt; y;<br>cout &lt;&lt; <span class="hljs-built_in">logicalOr</span>(x, y) &lt;&lt; endl;<br><span class="hljs-comment">//cout &lt;&lt; &quot;----------&quot; &lt;&lt; endl;</span><br><span class="hljs-comment">//cout &lt;&lt; logicalAnd(x, m) &lt;&lt; endl;</span><br>cout &lt;&lt; <span class="hljs-string">&quot;-----将x循环左移n位-----&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入n值为：&quot;</span>;<br>cin &gt;&gt; n;<br>cout &lt;&lt; <span class="hljs-string">&quot;循环前：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">printbinary</span>(x);<br><span class="hljs-built_in">printbinary</span>(<span class="hljs-built_in">rotateLeft</span>(x, n));<br>cout &lt;&lt; <span class="hljs-string">&quot;-----若x有奇数个1，则返回1；否则，返回0-----&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br>cout &lt;&lt; <span class="hljs-string">&quot;x的二进制表示为:&quot;</span>;<br><span class="hljs-built_in">printbinary</span>(x);<br>cout &lt;&lt; <span class="hljs-string">&quot;结果如下:&quot;</span>;<br>cout &lt;&lt; endl &lt;&lt; <span class="hljs-built_in">parityCheck</span>(x);<br>cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;-----计算2*x，如果不溢出，则返回1，否则，返回0-----&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br>cout &lt;&lt; <span class="hljs-built_in">mul2OK</span>(x);<br>cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;-----计算(x*3)/2，朝零方向取整-----&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br><span class="hljs-comment">//printbinary(50000);</span><br>cout &lt;&lt; <span class="hljs-built_in">mult3div2</span>(x);<br>cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;----计算x –y，如果不溢出，则返回1，否则，返回0------&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入y值为：&quot;</span>;<br>cin &gt;&gt; y;<br>cout &lt;&lt; <span class="hljs-built_in">subOK</span>(x,y);<br>cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;-----求x的绝对值-----&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入x值为：&quot;</span>;<br>cin &gt;&gt; x;<br>cout &lt;&lt; <span class="hljs-built_in">absVal</span>(x) &lt;&lt;endl ;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="函数示例："><a href="#函数示例：" class="headerlink" title="函数示例："></a>函数示例：</h5> <img src="/2023/03/16/%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E5%8F%8A%E8%A1%A5%E7%A0%81%E8%BF%90%E7%AE%97-makefile%E7%9A%84%E7%AE%80%E7%AD%94%E4%BD%BF%E7%94%A8/wps18.jpg" class="">  <img src="/2023/03/16/%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E5%8F%8A%E8%A1%A5%E7%A0%81%E8%BF%90%E7%AE%97-makefile%E7%9A%84%E7%AE%80%E7%AD%94%E4%BD%BF%E7%94%A8/wps19.jpg" class=""> <h5 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h5> <img src="/2023/03/16/%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E5%8F%8A%E8%A1%A5%E7%A0%81%E8%BF%90%E7%AE%97-makefile%E7%9A%84%E7%AE%80%E7%AD%94%E4%BD%BF%E7%94%A8/a.png" class=""> <h4 id="运行结果1："><a href="#运行结果1：" class="headerlink" title="运行结果1："></a>运行结果1：</h4> <img src="/2023/03/16/%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E5%8F%8A%E8%A1%A5%E7%A0%81%E8%BF%90%E7%AE%97-makefile%E7%9A%84%E7%AE%80%E7%AD%94%E4%BD%BF%E7%94%A8/wps20.jpg" class="">  <img src="/2023/03/16/%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E5%8F%8A%E8%A1%A5%E7%A0%81%E8%BF%90%E7%AE%97-makefile%E7%9A%84%E7%AE%80%E7%AD%94%E4%BD%BF%E7%94%A8/wps21.jpg" class=""> <p>1将x的最低有效位（LSB）清零</p><p>x &#x3D; 5 即 0101 清零后 0100</p><p>2将x的第n个字节取反（字节从LSB开始到MSB依次编号为1-4）</p><p>x &#x3D; 5 n &#x3D; 2； 取反后 0110</p><p>3 比较x和y的第n个字节（字节从LSB开始到MSB依次编号为1-4），若不同，则返回1；若相同，则返回0</p><p>x &#x3D; 5 即0101 ； y &#x3D; 6 即0110 ； n &#x3D; 2； 第二个字节不一样，返回0</p><p>x &#x3D; 6 即0110 ； y &#x3D; 7 即0111 ； n &#x3D; 2; 第二个字节一样，返回1</p><p>4 x&amp;&amp; y</p><p>x &#x3D; 10 ； y &#x3D;-10 ； 都是非0，返回1</p><p>5 x|| y</p><p>x &#x3D; 10 ； y &#x3D;0 ；  不全0，返回1</p><p>6 将x循环左移n位</p><p>x &#x3D; -1002 n &#x3D; 5；</p><p>循环左移前：11111110000010110</p><p>循环左移后：11000001011011111</p><p>7 若x有奇数个1，则返回1；否则，返回0</p><p>x &#x3D; 103 ；即00000000001100111  5个1返回1</p><p>8 计算2*x，如果不溢出，则返回1，否则，返回0</p><p>x &#x3D; 5000； 溢出返回0</p><p>9 计算(x*3)&#x2F;2，朝零方向取整</p><p>x &#x3D; -104 -104*3&#x2F;2 &#x3D; -156  返回-156</p><p>x &#x3D; 105  105*3&#x2F;2 &#x3D; 157.5 返回 157</p><p>10 计算x –y，如果不溢出，则返回1，否则，返回0</p><p>x &#x3D; 50000 y &#x3D; -50000  溢出返回1</p><p>11 求x的绝对值</p><p>x &#x3D; -1900 返回1900</p><h4 id="运行结果2："><a href="#运行结果2：" class="headerlink" title="运行结果2："></a>运行结果2：</h4> <img src="/2023/03/16/%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E5%8F%8A%E8%A1%A5%E7%A0%81%E8%BF%90%E7%AE%97-makefile%E7%9A%84%E7%AE%80%E7%AD%94%E4%BD%BF%E7%94%A8/wps22.jpg" class="">  <img src="/2023/03/16/%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E5%8F%8A%E8%A1%A5%E7%A0%81%E8%BF%90%E7%AE%97-makefile%E7%9A%84%E7%AE%80%E7%AD%94%E4%BD%BF%E7%94%A8/wps23.jpg" class=""> <p>1将x的最低有效位（LSB）清零</p><p>x &#x3D; 13 即 1101 清零后 1100</p><p>2将x的第n个字节取反（字节从LSB开始到MSB依次编号为1-4）</p><p>x &#x3D; 12 即 1100 n &#x3D; 3； 取反后 1000</p><p>3 比较x和y的第n个字节（字节从LSB开始到MSB依次编号为1-4），若不同，则返回1；若相同，则返回0</p><p>x &#x3D; 12 即1100 ； y &#x3D; 13 即1001 ； n &#x3D; 2； 第二个字节一样，返回1</p><p>x &#x3D; 12 即1100 ； y &#x3D; 13 即1001 ； n &#x3D; 1； 第1个字节不一样，返回0</p><p>4 x&amp;&amp; y</p><p>x &#x3D; 10 ； y &#x3D; 0 ； y为0，返回 0 </p><p>5 x|| y</p><p>x &#x3D; 0 ； y &#x3D; 0 ；  x,y全0，返回0</p><p>6 将x循环左移n位</p><p>x &#x3D; 998 n &#x3D; 4；</p><p>循环左移前：11111110000010110</p><p>循环左移后：11000001011011111</p><p>7 若x有奇数个1，则返回1；否则，返回0</p><p>x &#x3D; 120 ；即00000000001100111  4个1返回0</p><p>8 计算2*x，如果不溢出，则返回0，否则，返回1</p><p>x &#x3D; 20； 不溢出返回0</p><p>9 计算(x*3)&#x2F;2，朝零方向取整</p><p>x &#x3D; -105  -105*3&#x2F;2 &#x3D; -157.5 返回-157</p><p>10 计算x–y，如果不溢出，则返回1，否则，返回0</p><p>x &#x3D; 500 y &#x3D; -500  不溢出返回1</p><p>11 求x的绝对值</p><p>x &#x3D; 1900 返回1900</p><p><em>注：第8个求两倍溢出的可能有些逻辑问题需要更改，等有空重新写一个函数</em></p><h4 id="解决的问题："><a href="#解决的问题：" class="headerlink" title="解决的问题："></a>解决的问题：</h4><p>在编写完<a href="https://so.csdn.net/so/search?q=makefile&spm=1001.2101.3001.7020">makefile</a>文件后，在终端输入make命令进行编译，报错：*** 没有规则可制作目标“&#x2F;xxx.c”，由“&#x2F;xxx.o” 需求。 停止。</p> <img src="/2023/03/16/%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E5%8F%8A%E8%A1%A5%E7%A0%81%E8%BF%90%E7%AE%97-makefile%E7%9A%84%E7%AE%80%E7%AD%94%E4%BD%BF%E7%94%A8/wps24.jpg" class="">  <p>解决方案：空格替换Tab ； 成功运行 ；</p>   ]]></content>
    
    
    <categories>
      
      <category>微机系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>位运算</tag>
      
      <tag>补码</tag>
      
      <tag>makefile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>16_常用时间API：时间类，日期类</title>
    <link href="/2023/02/15/16-Java%E5%B8%B8%E7%94%A8%E6%97%B6%E9%97%B4API%EF%BC%9A%E6%97%B6%E9%97%B4%E7%B1%BB%EF%BC%8C%E6%97%A5%E6%9C%9F%E7%B1%BB/"/>
    <url>/2023/02/15/16-Java%E5%B8%B8%E7%94%A8%E6%97%B6%E9%97%B4API%EF%BC%9A%E6%97%B6%E9%97%B4%E7%B1%BB%EF%BC%8C%E6%97%A5%E6%9C%9F%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-常用时间API：时间类，日期类"><a href="#Java-常用时间API：时间类，日期类" class="headerlink" title="Java 常用时间API：时间类，日期类"></a>Java 常用时间API：时间类，日期类</h1><h3 id="JDK8-之前"><a href="#JDK8-之前" class="headerlink" title="JDK8 之前"></a>JDK8 之前</h3><h4 id="Date类-表示日期时间的类"><a href="#Date类-表示日期时间的类" class="headerlink" title="Date类 : 表示日期时间的类"></a>Date类 : 表示日期时间的类</h4><ol><li><p>构造方法 :</p><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public Date()</td><td>创建一个Date对象，代表的是系统当前此刻日期时间。</td></tr><tr><td>public Date(long time)</td><td>把时间毫秒值转换成Date日期对象。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Date</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">0L</span>);<br>System.out.println(d1);<span class="hljs-comment">//Thu Jan 01 00:00:01 GMT+08:00 1970</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">1000L</span>);<br>System.out.println(d2);<span class="hljs-comment">//Thu Jan 01 08:00:01 GMT+08:00 1970</span><br></code></pre></td></tr></table></figure></li><li><p>常见方法 :</p><table><thead><tr><th>常见方法</th><th>说明</th></tr></thead><tbody><tr><td>public long getTime()</td><td>返回从1970年1月1日  00:00:00走到此刻的总的毫秒数</td></tr><tr><td>public void setTime(long time)</td><td>设置日期对象的时间为当前时间毫秒值对应的时间</td></tr></tbody></table></li></ol><h4 id="SimpleDateFormat-类：日期格式化"><a href="#SimpleDateFormat-类：日期格式化" class="headerlink" title="SimpleDateFormat 类：日期格式化"></a>SimpleDateFormat 类：日期格式化</h4><p>1.构造方法 :</p><table><thead><tr><th>构造器</th><th>说明</th></tr></thead><tbody><tr><td>public SimpleDateFormat()</td><td>构造一个SimpleDateFormat日期格式化对象，使用默认格式</td></tr><tr><td>public SimpleDateFormat(String pattern)</td><td>构造一个SimpleDateFormat日期格式化对象，使用指定的格式</td></tr></tbody></table><p>2.常见方法 :</p><table><thead><tr><th>格式化方法</th><th>说明</th></tr></thead><tbody><tr><td>public final String <strong>format(Date date)</strong></td><td>将日期对象格式化成日期时间字符串</td></tr><tr><td>public final Date <strong>parse(String source)</strong></td><td>将日期字符串解析为日期类型</td></tr></tbody></table><h5 id="API中SimpleDateFormat类的指定模式规范："><a href="#API中SimpleDateFormat类的指定模式规范：" class="headerlink" title="API中SimpleDateFormat类的指定模式规范："></a>API中SimpleDateFormat类的指定模式规范：</h5> <img src="/2023/02/15/16-Java%E5%B8%B8%E7%94%A8%E6%97%B6%E9%97%B4API%EF%BC%9A%E6%97%B6%E9%97%B4%E7%B1%BB%EF%BC%8C%E6%97%A5%E6%9C%9F%E7%B1%BB/API-SimpleDateFormat.png" class="">  <img src="/2023/02/15/16-Java%E5%B8%B8%E7%94%A8%E6%97%B6%E9%97%B4API%EF%BC%9A%E6%97%B6%E9%97%B4%E7%B1%BB%EF%BC%8C%E6%97%A5%E6%9C%9F%E7%B1%BB/API-SimpleDateFormat%E4%B8%AD%E6%96%87.png" class=""> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException &#123;       <span class="hljs-comment">//parse 异常</span><br> <span class="hljs-comment">//将日期对象格式化成日期时间字符串   </span><br>    <span class="hljs-comment">// 创建一个使用默认模式的日期格式化对象</span><br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">simpleDateFormat1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>();<br>    <span class="hljs-comment">// 创建一个指定模式的日期格式化对象</span><br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">simpleDateFormat2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日&quot;</span>);  <span class="hljs-comment">//如果只有yy,定义为年份后两位</span><br>    <span class="hljs-comment">// 创建Date对象封装此刻的时间</span><br>    <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-comment">// 将日期对象转换为字符串</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> simpleDateFormat1.format(date);<span class="hljs-comment">//2023/2/15 下午6:46   </span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> simpleDateFormat2.format(date);<span class="hljs-comment">//2023年02月15日</span><br>    <br><span class="hljs-comment">//将日期字符串解析为日期类型 </span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2023年1月1日&quot;</span>;<br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">simpleDateFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日&quot;</span>);<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> simpleDateFormat.parse(today);<span class="hljs-comment">//today必须和simpleDateFormat指定的格式相同才能解析，否则报错</span><br>    System.out.println(date);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建一个日期格式化对象, 使用 [默认模式]</span><br>        <span class="hljs-comment">// SimpleDateFormat simpleDateFormat = new SimpleDateFormat();</span><br><br>        <span class="hljs-comment">// 创建一个日期格式化对象, [手动指定模式]</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">simpleDateFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日&quot;</span>);<br><br>        <span class="hljs-comment">// 创建Date对象, 封装此刻的时间</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br>        <span class="hljs-comment">// 将日期对象, 转换为字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> simpleDateFormat.format(date);<br><br>        System.out.println(result);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="Calendar-类：系统此刻时间对应的日历，用于单独获取、修改时间中的年、月、日、时、分、秒"><a href="#Calendar-类：系统此刻时间对应的日历，用于单独获取、修改时间中的年、月、日、时、分、秒" class="headerlink" title="Calendar 类：系统此刻时间对应的日历，用于单独获取、修改时间中的年、月、日、时、分、秒"></a>Calendar 类：系统此刻时间对应的日历，用于单独获取、修改时间中的年、月、日、时、分、秒</h4><p><strong>创建对象</strong></p><p><strong>注： Calendar是一个抽象类，不能直接创建对象，使用静态方法创建</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static Calendar getInstance()</td><td>获取当前时间的日历对象</td></tr></tbody></table><p><strong>常用方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public int get(int field)</td><td>获取日历中的某个字段信息</td></tr><tr><td>public void set(int field,int value)</td><td>修改日历的某个字段信息</td></tr><tr><td>public void add(int field,int amount)</td><td>为某个字段增加&#x2F;减少指定的值</td></tr><tr><td>public final Date getTime()</td><td>获取日期对象</td></tr><tr><td>public final setTime(Date date)</td><td>给日历设置日期对象</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getMethod</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Calendar c : 抽象类</span><br>        <span class="hljs-comment">// Calendar.getInstance() : 获取的是子类对象</span><br>        <span class="hljs-comment">// 1. 获取当前时间的日历对象</span><br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>     <br>        <span class="hljs-comment">// 2. 调用get方法, 获取指定字段的信息</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> c.get(Calendar.YEAR);<br>        System.out.println(year);<span class="hljs-comment">//年</span><br><br>        <span class="hljs-comment">// 注意Calendar类的月份是 0~11, 常规的月份要 + 1</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> c.get(Calendar.MONTH);<br>        System.out.println(month + <span class="hljs-number">1</span>);<span class="hljs-comment">//月</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> c.get(Calendar.DAY_OF_MONTH);<br>        System.out.println(day);<span class="hljs-comment">//星期</span><br><br><span class="hljs-comment">//这里的星期：星期日为每周第一天，定义一个数组存放，用索引值调用</span><br>        <span class="hljs-type">char</span>[] weeks = &#123;<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;日&#x27;</span>, <span class="hljs-string">&#x27;一&#x27;</span>, <span class="hljs-string">&#x27;二&#x27;</span>, <span class="hljs-string">&#x27;三&#x27;</span>, <span class="hljs-string">&#x27;四&#x27;</span>, <span class="hljs-string">&#x27;五&#x27;</span>, <span class="hljs-string">&#x27;六&#x27;</span>&#125;;<br>        <span class="hljs-comment">//                0     1     2    3     4     5    6    7</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">weekIndex</span> <span class="hljs-operator">=</span> c.get(Calendar.DAY_OF_WEEK);<br>        System.out.println(weeks[weekIndex]);<span class="hljs-comment">//日</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">dayOfYear</span> <span class="hljs-operator">=</span> c.get(Calendar.DAY_OF_YEAR);<br>        System.out.println(dayOfYear);<span class="hljs-comment">//是一年的第一天</span><br>    &#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMethod</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>    c.set(Calendar.YEAR, <span class="hljs-number">2022</span>);<span class="hljs-comment">//设置年为2022</span><br>    c.set(<span class="hljs-number">2000</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">//设置日期为：2000年1月1日，输出月份值为2</span><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMethod</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>    c.add(Calendar.YEAR, -<span class="hljs-number">1</span>);<span class="hljs-comment">//年份-1</span><br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p><strong>注：get方法的参数为Calendar类中的静态常量</strong></p><p>​     Calendar.YEAR : 获取年<br>​     Calendar.MONTH : 月份是0~11, 常规日期要+1<br>​     Calendar.DAY_OF_MONTH : 获取日<br>​     Calendar.DAY_OF_WEEK : 获取星期, 但是1代表周日，7代表周六<br>​     Calendar.DAY_OF_YEAR : 获取一年中的第几天</p>          </div><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>1.判断 2030年3月3日 周几</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();<span class="hljs-comment">// 1. 获取日期对象 (此刻的时间)</span><br>c.set(<span class="hljs-number">2030</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<span class="hljs-comment">// 2. 调用set方法, 将时间设置为 2030年3月3日; 月份设置2</span><br><span class="hljs-type">char</span>[] weeks = &#123;<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;日&#x27;</span>, <span class="hljs-string">&#x27;一&#x27;</span>, <span class="hljs-string">&#x27;二&#x27;</span>, <span class="hljs-string">&#x27;三&#x27;</span>, <span class="hljs-string">&#x27;四&#x27;</span>, <span class="hljs-string">&#x27;五&#x27;</span>, <span class="hljs-string">&#x27;六&#x27;</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">weekIndex</span> <span class="hljs-operator">=</span> c.get(Calendar.DAY_OF_WEEK);<span class="hljs-comment">// 3. 获取星期</span><br></code></pre></td></tr></table></figure><p>2.键盘录入一个日期字符串,  判断是一年的第几天</p><p><em>分析：</em></p><ol><li>使用SimpleDateFormat,  将日期字符串转换为日期对象</li><li>将日期对象, 转换为Calendar对象</li><li>调用get方法, 获取是一年中的第几天</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入:&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">dateContent</span> <span class="hljs-operator">=</span> sc.nextLine();<br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">dateFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日&quot;</span>); <span class="hljs-comment">// 1. 使用SimpleDateFormat将日期字符串转换为日期对象</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> dateFormat.parse(dateContent);<br><span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>c.setTime(date);<span class="hljs-comment">// 2. 将日期对象, 转换为Calendar对象</span><br><span class="hljs-type">int</span> <span class="hljs-variable">dayOfYear</span> <span class="hljs-operator">=</span> c.get(Calendar.DAY_OF_YEAR);<span class="hljs-comment">// 3. 调用get方法, 获取一年中的第几天</span><br></code></pre></td></tr></table></figure><h3 id="前后对比"><a href="#前后对比" class="headerlink" title="前后对比"></a>前后对比</h3><h4 id="JDK8之前的传统的时间API"><a href="#JDK8之前的传统的时间API" class="headerlink" title="JDK8之前的传统的时间API"></a>JDK8之前的传统的时间API</h4><ol><li>设计欠妥，使用不方便，部分已经淘汰</li><li>都是可变对象，修改后会丢失最开始的时间信息      <em>覆盖之前的时间信息</em></li><li>线程不安全</li><li>只能精确到毫秒</li></ol><h4 id="JDK8开始之后新增的时间API"><a href="#JDK8开始之后新增的时间API" class="headerlink" title="JDK8开始之后新增的时间API"></a>JDK8开始之后新增的时间API</h4><ol><li>设计更合理，功能丰富，使用更方便</li><li>都是不可变对象，修改后会返回新的时间对象，不会丢失最开始的时间    <em>每一次修改都返回一个新的对象</em></li><li>线程安全</li><li>能精确到毫秒、纳秒</li></ol><h3 id="JDK8-之后"><a href="#JDK8-之后" class="headerlink" title="JDK8 之后"></a>JDK8 之后</h3><h4 id="日历类"><a href="#日历类" class="headerlink" title="日历类"></a>日历类</h4><p>LocalDate：代表本地日期(年、月、日、星期)<br>LocalTime：代表本地时间(时、分、秒、纳秒)<br>LocalDateTime：代表本地日期、时间(年、月、日、星期、时、分、秒、纳秒)</p><h5 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a>获取对象</h5><table><thead><tr><th>方法名</th><th>示例</th></tr></thead><tbody><tr><td>public static Xxxx now(): 获取系统<strong>当前</strong>时间对应的该对象</td><td>LocaDate ld &#x3D; LocalDate.now();LocalTime lt &#x3D; LocalTime.now();     LocalDateTime ldt &#x3D; LocalDateTime.now();</td></tr><tr><td>public static Xxxx of(…)：获取<strong>指定</strong>时间的对象</td><td>LocalDate localDate1 &#x3D; LocalDate.of(2099 , 11,11);     LocalTime localTime1 &#x3D; LocalTime.of(9, 8, 59);LocalDateTime localDateTime1 &#x3D; LocalDateTime.of(2025, 11, 16, 14, 30, 01);</td></tr></tbody></table><h5 id="获取对象中的年月日时分秒"><a href="#获取对象中的年月日时分秒" class="headerlink" title="获取对象中的年月日时分秒"></a>获取对象中的年月日时分秒</h5><table><thead><tr><th>方法名</th><th>功能</th></tr></thead><tbody><tr><td>int getYear()</td><td>获取年 字段</td></tr><tr><td>Month getMonth()</td><td>使用 Month 枚举获取年份字段</td></tr><tr><td>int getMonthValue()</td><td>获取1到12之间的月份字段</td></tr><tr><td>int getDayOfMonth()</td><td>获取日</td></tr><tr><td>DayOfWeek getDayOfWeek()</td><td>获取星期 字段，即枚举 DayOfWeek</td></tr><tr><td>int getHour()</td><td>获取时</td></tr><tr><td>int getMinute()</td><td>获取分</td></tr><tr><td>int getSecond()</td><td>获取秒</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<span class="hljs-comment">// 获取此刻的时间对象</span><br>System.out.println(now);<br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">2000</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 指定2000年1月1日1时1分</span><br>System.out.println(now.getYear() + <span class="hljs-string">&quot;年&quot;</span>);<br>System.out.println(now.getMonth() + <span class="hljs-string">&quot;月&quot;</span>);<span class="hljs-comment">// 英文字符串月份</span><br>System.out.println(now.getMonthValue() + <span class="hljs-string">&quot;月&quot;</span>);<span class="hljs-comment">// int型月份</span><br>System.out.println(nowDateTime.getMonth().getValue()); <span class="hljs-comment">// 输出同上，不一样的写法</span><br>System.out.println(now.getDayOfMonth() + <span class="hljs-string">&quot;日&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;dayOfYear：&quot;</span> + nowDateTime.getDayOfYear());<span class="hljs-comment">// 年的第几天</span><br>System.out.println(nowDateTime.getDayOfWeek());<span class="hljs-comment">// 星期</span><br>System.out.println(nowDateTime.getDayOfWeek().getValue());<br></code></pre></td></tr></table></figure><h5 id="修改年月日时分秒相关"><a href="#修改年月日时分秒相关" class="headerlink" title="修改年月日时分秒相关"></a>修改年月日时分秒相关</h5><div class="note note-success">            <p><strong>LocalDateTime 、LocalDate 、LocalTime 都是不可变的,  方法返回的是一个新对象</strong></p>          </div><table><thead><tr><th><strong>方法名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>withHour、withMinute、withSecond、withNano</td><td>修改时间，返回新时间对象</td></tr><tr><td>plusHours、plusMinutes、plusSeconds、plusNanos</td><td>把某个信息加多少，返回新时间对象</td></tr><tr><td>minusHours、minusMinutes、minusSeconds、minusNanos</td><td>把某个信息减多少，返回新时间对象</td></tr><tr><td>equals &#x2F; isBefore &#x2F; isAfter</td><td>判断2个时间对象，是否相等，在前还是在后</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">nowTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><span class="hljs-comment">// with : 设置</span><br><span class="hljs-comment">//withYear(年), withMonth(月), withDayOfMonth(日), withHour(时), withMinute(分), withSecond(秒), withNano(纳秒)</span><br>System.out.println(nowTime.withYear(<span class="hljs-number">2000</span>));<span class="hljs-comment">//设置年2000</span><br>System.out.println(nowTime.withMonth(<span class="hljs-number">1</span>));<span class="hljs-comment">//设置月1</span><br>System.out.println(nowTime.withDayOfMonth(<span class="hljs-number">1</span>));<span class="hljs-comment">//设置日1</span><br>System.out.println(nowTime.withHour(<span class="hljs-number">1</span>));<span class="hljs-comment">//设置小时1</span><br>System.out.println(nowTime.withNano(<span class="hljs-number">1</span>));<span class="hljs-comment">//设置纳秒1</span><br><span class="hljs-comment">//修改原日历</span><br>nowTime = LocalDate.of(<span class="hljs-number">2008</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>);<span class="hljs-comment">//上面的设置不改变原先数据，要修改的话用of</span><br><span class="hljs-comment">// minus : 减去</span><br>System.out.println(nowTime.minusHours(<span class="hljs-number">1</span>));   <span class="hljs-comment">//减一小时</span><br>System.out.println(nowTime.minusSeconds(<span class="hljs-number">1</span>));<span class="hljs-comment">//减一秒钟,nowTime对象不变，输出的是新对象</span><br><span class="hljs-comment">// plus : 加</span><br>System.out.println(nowTime.plusMinutes(<span class="hljs-number">1</span>));<span class="hljs-comment">//加一分钟</span><br><br><span class="hljs-comment">//判断两个日期在前/在后/相等 返回true/false</span><br>System.out.println(date1.isBefore(date2));<br>System.out.println(date1.isAfter(date2));<br>System.out.println(date1.equals(date2));<br></code></pre></td></tr></table></figure><h5 id="LocalDateTime-转-LocalDate-和-Local-Time"><a href="#LocalDateTime-转-LocalDate-和-Local-Time" class="headerlink" title="LocalDateTime 转 LocalDate 和 Local Time"></a>LocalDateTime 转 LocalDate 和 Local Time</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public LocalDate toLocalDate()</td><td>转换成一个LocalDate对象</td></tr><tr><td>public LocalTime toLocalTime()</td><td>转换成一个LocalTime对象</td></tr></tbody></table><p>——-&gt;  LocalDateTime拆分两块功能给LocalDate， LocalTime</p><h4 id="日期格式化类"><a href="#日期格式化类" class="headerlink" title="日期格式化类"></a>日期格式化类</h4><p><strong>格式化时间</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>static DateTimeFormatter <strong>ofPattern</strong>(格式)</td><td>获取格式对象</td></tr><tr><td>String <strong>format</strong>(时间对象)</td><td>按照指定方式格式化</td></tr></tbody></table><h5 id="解析时间"><a href="#解析时间" class="headerlink" title="解析时间 :"></a>解析时间 :</h5><p>​        LocalDateTime.parse(“解析字符串”, 格式化对象);<br>​        LocalDate.parse(“解析字符串”, 格式化对象);<br>​        LocalTime.parse(“解析字符串”, 格式化对象);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">nowTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">formatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年M月d日&quot;</span>);<span class="hljs-comment">// 获取格式化对象</span><br><span class="hljs-type">String</span> <span class="hljs-variable">gsltime</span> <span class="hljs-operator">=</span> formatter.format(nowTime);  <span class="hljs-comment">// 格式化</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2000年01月01日&quot;</span>;<br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> LocalDate.parse(time, formatter);  <span class="hljs-comment">// 解析字符串</span><br></code></pre></td></tr></table></figure><div class="note note-info">            <p><code>DateTimeFormatter.ofPattern(&quot;yyyy年MM月dd日&quot;);</code>   ：不能解析2000-1-1</p><p><code>DateTimeFormatter.ofPattern(&quot;yyyy年M月d日&quot;);</code> ：可以解析2000-1-1，也可以解析2000-01-01</p>          </div><h4 id="时间类"><a href="#时间类" class="headerlink" title="时间类"></a>时间类</h4><h5 id="Instant-时间戳：表示时间的类，类似Date类"><a href="#Instant-时间戳：表示时间的类，类似Date类" class="headerlink" title="Instant 时间戳：表示时间的类，类似Date类"></a>Instant 时间戳：表示时间的类，类似Date类</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>static Instant <strong>now</strong>()</td><td>获取当前时间的Instant对象（标准时间）</td></tr><tr><td>static Instant <strong>ofXxxx</strong>(long epochMilli)</td><td>根据（秒&#x2F;毫秒&#x2F;纳秒）获取Instant对象</td></tr><tr><td>ZonedDateTime <strong>atZone</strong>(ZoneId zone)</td><td>指定时区</td></tr><tr><td>boolean <strong>isXxx</strong>(Instant otherInstant)</td><td>判断系列的方法</td></tr><tr><td>Instant <strong>minusXxx</strong>(long millisToSubtract)</td><td>减少时间系列的方法</td></tr><tr><td>Instant <strong>plusXxx</strong>(long millisToSubtract)</td><td>增加时间系列的方法</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取当前时间的Instant对象（标准时间）</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> Instant.now();<br>System.out.println(<span class="hljs-string">&quot;当前时间为(世界标准时间):&quot;</span> + now);<br>System.out.println(<span class="hljs-string">&quot;------------------&quot;</span>);<br><br><span class="hljs-comment">// 根据（秒/毫秒/纳秒）获取Instant对象</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant1</span> <span class="hljs-operator">=</span> Instant.ofEpochMilli(<span class="hljs-number">1000</span>);<br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant2</span> <span class="hljs-operator">=</span> Instant.ofEpochSecond(<span class="hljs-number">5</span>);<br><br>System.out.println(instant1);<br>System.out.println(instant2);<br>System.out.println(<span class="hljs-string">&quot;------------------&quot;</span>);<br><br><span class="hljs-comment">// 指定时区</span><br><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">zonedDateTime</span> <span class="hljs-operator">=</span> Instant.now().atZone(ZoneId.systemDefault());<br>System.out.println(<span class="hljs-string">&quot;带时区的时间:&quot;</span> + zonedDateTime);<br>System.out.println(<span class="hljs-string">&quot;------------------&quot;</span>);<br><br><span class="hljs-comment">// 判断系列的方法</span><br>System.out.println(now.isBefore(instant1));<br>System.out.println(now.isAfter(instant1));<br>System.out.println(<span class="hljs-string">&quot;------------------&quot;</span>);<br><br><span class="hljs-comment">// 减少时间系列的方法</span><br>System.out.println(<span class="hljs-string">&quot;减1000毫秒:&quot;</span> + now.minusMillis(<span class="hljs-number">1000</span>));<br>System.out.println(<span class="hljs-string">&quot;减5秒钟:&quot;</span> + now.minusSeconds(<span class="hljs-number">5</span>));<br>System.out.println(<span class="hljs-string">&quot;------------------&quot;</span>);<br><br><span class="hljs-comment">// 增加时间系列的方法</span><br>System.out.println(<span class="hljs-string">&quot;加1000毫秒:&quot;</span> + now.plusMillis(<span class="hljs-number">1000</span>));<br>System.out.println(<span class="hljs-string">&quot;加5秒钟:&quot;</span> + now.plusSeconds(<span class="hljs-number">5</span>));<br>System.out.println(<span class="hljs-string">&quot;------------------&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="ZonedDateTime：带时区的时间类"><a href="#ZonedDateTime：带时区的时间类" class="headerlink" title="ZonedDateTime：带时区的时间类"></a>ZonedDateTime：带时区的时间类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Instant</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> Instant.now();<br>System.out.println(now);<span class="hljs-comment">//2023-02-15T13:52:18.642164400Z  世界标准时间，有8小时的时区差</span><br><br><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">zonedDateTime</span> <span class="hljs-operator">=</span> Instant.now().atZone(ZoneId.of(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>));<br>System.out.println(zonedDateTime);<span class="hljs-comment">//2023-02-15T21:53:34.572435300+08:00[Asia/Shanghai]</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>static ZonedDateTime <strong>now</strong>()</td><td>获取当前时间的ZonedDateTime对象</td></tr><tr><td>static ZonedDateTime <strong>ofXxxx</strong>(…)</td><td>获取指定时间的ZonedDateTime对象</td></tr><tr><td>ZonedDateTime <strong>withXxx</strong>(时间)</td><td>修改时间系列的方法</td></tr><tr><td>ZonedDateTime <strong>minusXxx</strong>(时间)</td><td>减少时间系列的方法</td></tr><tr><td>ZonedDateTime <strong>plusXxx</strong>(时间)</td><td>增加时间系列的方法</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取当前时间的ZonedDateTime对象</span><br><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> ZonedDateTime.now();<br>System.out.println(now);<br>System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br><br><span class="hljs-comment">// 获取指定时间的ZonedDateTime对象</span><br><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">of</span> <span class="hljs-operator">=</span> ZonedDateTime.of<br>        (<span class="hljs-number">2008</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>,<br>                ZoneId.systemDefault());<br>System.out.println(of);<br>System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br><br><span class="hljs-comment">// 修改时间系列的方法</span><br>System.out.println(now.withYear(<span class="hljs-number">2008</span>));<br>System.out.println(now.withMonth(<span class="hljs-number">8</span>));<br>System.out.println(now.withDayOfMonth(<span class="hljs-number">8</span>));<br>System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br><br><span class="hljs-comment">// 减少时间系列的方法</span><br>System.out.println(now.minusYears(<span class="hljs-number">1</span>));<br>System.out.println(now.minusMonths(<span class="hljs-number">1</span>));<br>System.out.println(now.minusDays(<span class="hljs-number">1</span>));<br>System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br><br><span class="hljs-comment">// 增加时间系列的方法</span><br>System.out.println(now.plusYears(<span class="hljs-number">1</span>));<br>System.out.println(now.plusMonths(<span class="hljs-number">1</span>));<br>System.out.println(now.plusDays(<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><h5 id="ZoneId-类：有关时区设置的类"><a href="#ZoneId-类：有关时区设置的类" class="headerlink" title="ZoneId 类：有关时区设置的类"></a>ZoneId 类：有关时区设置的类</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>static Set<String> getAvailableZoneIds()</td><td>获取Java中支持的所有时区</td></tr><tr><td>static ZoneId systemDefault()</td><td>获取系统默认时区</td></tr><tr><td>static ZoneId of(String zoneId)</td><td>获取一个指定时区</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取Java中支持的所有时区</span><br>Set&lt;String&gt; set = ZoneId.getAvailableZoneIds();<br>System.out.println(set);<span class="hljs-comment">//输出所有时区字符串</span><br>System.out.println(set.size());<span class="hljs-comment">//输出支持的时区数：601</span><br><br><span class="hljs-comment">// 获取系统默认时区</span><br><span class="hljs-type">ZoneId</span> <span class="hljs-variable">zoneId</span> <span class="hljs-operator">=</span> ZoneId.systemDefault();<br><br><span class="hljs-comment">// 获取一个指定时区并使用</span><br><span class="hljs-type">ZoneId</span> <span class="hljs-variable">of</span> <span class="hljs-operator">=</span> ZoneId.of(<span class="hljs-string">&quot;Africa/Nairobi&quot;</span>);<br><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">zonedDateTime</span> <span class="hljs-operator">=</span> Instant.now().atZone(of);<br>System.out.println(zonedDateTime);<br></code></pre></td></tr></table></figure><h4 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h4><h5 id="Duration类：计算两个“时间”间隔"><a href="#Duration类：计算两个“时间”间隔" class="headerlink" title="Duration类：计算两个“时间”间隔"></a>Duration类：计算两个“时间”间隔</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">LocalDateTime对象：data1，data2<br><span class="hljs-type">Duration</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> Duration.between(data1, data2); <span class="hljs-comment">// 第二个参数减第一个参数</span><br>System.out.println(duration.toDays());                  <span class="hljs-comment">// 两个时间差的天数</span><br>System.out.println(duration.toHours());                 <span class="hljs-comment">// 两个时间差的小时数</span><br>System.out.println(duration.toMinutes());               <span class="hljs-comment">// 两个时间差的分钟数</span><br>System.out.println(duration.toMillis());                <span class="hljs-comment">// 两个时间差的毫秒数</span><br>System.out.println(duration.toNanos());                 <span class="hljs-comment">// 两个时间差的纳秒数</span><br></code></pre></td></tr></table></figure><h5 id="Period类：计算两个“日期”间隔"><a href="#Period类：计算两个“日期”间隔" class="headerlink" title="Period类：计算两个“日期”间隔"></a>Period类：计算两个“日期”间隔</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">LocalDate对象：day1, day2<br><span class="hljs-type">Period</span> <span class="hljs-variable">period</span> <span class="hljs-operator">=</span> Period.between(day1, day2);    <span class="hljs-comment">// 第二个参数减第一个参数</span><br>System.out.println(period.getYears());         <span class="hljs-comment">// 间隔多少年</span><br>System.out.println(period.getMonths());        <span class="hljs-comment">// 间隔的月份</span><br>System.out.println(period.getDays());          <span class="hljs-comment">// 间隔的天数</span><br>System.out.println(period.toTotalMonths());    <span class="hljs-comment">// 间隔总月份</span><br></code></pre></td></tr></table></figure><h5 id="ChronoUnit类：计算两个“日期”间隔"><a href="#ChronoUnit类：计算两个“日期”间隔" class="headerlink" title="ChronoUnit类：计算两个“日期”间隔"></a>ChronoUnit类：计算两个“日期”间隔</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">LocalDateTime对象：data1，data2<br>System.out.println(<span class="hljs-string">&quot;相差的年数：&quot;</span> + ChronoUnit.YEARS.between(data1, data2));<span class="hljs-comment">// 第二个参数减第一个参数</span><br>System.out.println(<span class="hljs-string">&quot;相差的月数：&quot;</span> + ChronoUnit.MONTHS.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的周数：&quot;</span> + ChronoUnit.WEEKS.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的天数：&quot;</span> + ChronoUnit.DAYS.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的时数：&quot;</span> + ChronoUnit.HOURS.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的分数：&quot;</span> + ChronoUnit.MINUTES.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的秒数：&quot;</span> + ChronoUnit.SECONDS.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的毫秒数：&quot;</span> + ChronoUnit.MILLIS.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的微秒数：&quot;</span> + ChronoUnit.MICROS.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的纳秒数：&quot;</span> + ChronoUnit.NANOS.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的半天数：&quot;</span> + ChronoUnit.HALF_DAYS.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的十年数：&quot;</span> + ChronoUnit.DECADES.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的世纪（百年）数：&quot;</span> + ChronoUnit.CENTURIES.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的千年数：&quot;</span> + ChronoUnit.MILLENNIA.between(data1，data2));<br>System.out.println(<span class="hljs-string">&quot;相差的纪元数：&quot;</span> + ChronoUnit.ERAS.between(data1，data2));<br></code></pre></td></tr></table></figure><h5 id="实例：-生日→计算年龄"><a href="#实例：-生日→计算年龄" class="headerlink" title="实例： 生日→计算年龄"></a>实例： 生日→计算年龄</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;输入生日: &quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">birthday</span> <span class="hljs-operator">=</span> sc.nextLine();<br><br><span class="hljs-comment">// 1. 日期字符串转换为日期对象</span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">birthdayDate</span> <span class="hljs-operator">=</span> LocalDate.parse(birthday, DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年M月d日&quot;</span>));<br><br><span class="hljs-comment">// 2. 获取今天的日期对象</span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDate.now();<br><br><span class="hljs-comment">// 3. 计算时间间隔</span><br><span class="hljs-type">long</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> ChronoUnit.YEARS.between(birthdayDate, now);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>API</tag>
      
      <tag>Data类</tag>
      
      <tag>Cakendar类</tag>
      
      <tag>LocalDateTime类</tag>
      
      <tag>Instant类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15_冒泡排序，选择排序，二分查找，正则表达式</title>
    <link href="/2023/02/15/15-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%EF%BC%8C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%EF%BC%8C%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/02/15/15-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%EF%BC%8C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%EF%BC%8C%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-SE-冒泡排序-选择排序-二分查找-正则表达式的使用"><a href="#Java-SE-冒泡排序-选择排序-二分查找-正则表达式的使用" class="headerlink" title="Java SE    冒泡排序,选择排序,二分查找,正则表达式的使用"></a>Java SE    冒泡排序,选择排序,二分查找,正则表达式的使用</h1><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><h5 id="思路：比较相邻的两个数-如果第一个比第二个大-交换"><a href="#思路：比较相邻的两个数-如果第一个比第二个大-交换" class="headerlink" title="思路：比较相邻的两个数,  如果第一个比第二个大, 交换"></a>思路：比较相邻的两个数,  如果第一个比第二个大, 交换</h5><p>例：<code>int[] arr = &#123;2 ,  5,  4,  3,  1&#125;;</code> 五个数据</p><p>第一轮 : arr[0]-arr[1]  arr[1]-arr[2] arr[2]-arr[3]  arr[3]-arr[4]  比较4次<br>第二轮 : arr[0]-arr[1]  arr[1]-arr[2] arr[2]-arr[3]  比较3次<br>第三轮 : arr[0]-arr[1]  arr[1]-arr[2] 比较2次<br>第四轮 : arr[0]-arr[1]  比较1次</p><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<span class="hljs-comment">// 内循环: 比较的次数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<span class="hljs-comment">// -1: 避免索引越界   -i: 提升代码效率</span><br>        <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>            arr[j] = arr[j + <span class="hljs-number">1</span>];<br>            arr[j + <span class="hljs-number">1</span>] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h5 id="思路：-从-0-索引开始，拿着索引上的元素跟后一个的元素依次比较，如果小于后一个就交换，一轮结束后，最小的就到最左了。"><a href="#思路：-从-0-索引开始，拿着索引上的元素跟后一个的元素依次比较，如果小于后一个就交换，一轮结束后，最小的就到最左了。" class="headerlink" title="思路： 从 0 索引开始，拿着索引上的元素跟后一个的元素依次比较，如果小于后一个就交换，一轮结束后，最小的就到最左了。"></a><strong>思路： 从 0 索引开始，拿着索引上的元素跟后一个的元素依次比较，如果小于后一个就交换，一轮结束后，最小的就到最左了。</strong></h5> <img src="/2023/02/15/15-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%EF%BC%8C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%EF%BC%8C%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E9%80%89%E6%8B%A9.png" class=""> <p>例：<code>int[] arr = &#123;2 ,  5,  4,  3,  1&#125;;</code> 五个数据</p><p>第一轮 : arr[0]-arr[1]  arr[0]-arr[2] arr[0]-arr[3] arr[0]-arr[4]<br>第二轮 : arr[1]-arr[2]  arr[1]-arr[3] arr[1]-arr[4]<br>第三轮 : arr[2]-arr[3]  arr[2]-arr[4]<br>第四轮 : arr[3]-arr[4]</p><h5 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>        <span class="hljs-keyword">if</span>(arr[i] &gt; arr[j])&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>            arr[i] = arr[j];<br>            arr[j] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二分查找-x2F-折半查找"><a href="#二分查找-x2F-折半查找" class="headerlink" title="二分查找&#x2F;折半查找"></a>二分查找&#x2F;折半查找</h3><p><strong>要求：数组是排好序的</strong></p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5> <img src="/2023/02/15/15-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%EF%BC%8C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%EF%BC%8C%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%8A%98%E5%8D%8A.png" class=""> <ul><li>元素如果大于中间元素 : min &#x3D; mid + 1;</li><li>元素如果小于中间元素 : max &#x3D; mid – 1;</li><li>元素如果等于中间元素 : 将索引返回 (mid)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> num)</span> &#123;<br>    <span class="hljs-comment">// 1. 定义两个变量记录最小索引, 最大索引</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> mid;<span class="hljs-comment">//判断后再赋值</span><br>    <span class="hljs-comment">// 2. 折半的动作不止一次, 使用循环</span><br>    <span class="hljs-keyword">while</span> (min &lt;= max) &#123;<br>        <span class="hljs-comment">// 3. 计算中间索引</span><br>        mid = (min + max) / <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">// 4. 判断</span><br>        <span class="hljs-keyword">if</span> (num &gt; arr[mid]) &#123;<br>            min = mid + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num &lt; arr[mid]) &#123;<br>            max = mid - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 5. 没找到, 返回-1</span><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="正则表达式-Pattern类"><a href="#正则表达式-Pattern类" class="headerlink" title="正则表达式 [Pattern类]"></a>正则表达式 [Pattern类]</h3><p><strong>专门表示正则的类：Pattern</strong></p><p>用来校验字符串是否<strong>满足一定规则</strong>的字符串</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//规则</span><br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;编写规则&quot;</span>;<br><span class="hljs-string">&quot;校验的字符串&quot;</span>.matches(regex));<br><span class="hljs-comment">//示例</span><br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\d&quot;</span>;<br>System.out.println(<span class="hljs-string">&quot;12&quot;</span>.matches(regex));   <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><ul><li>字符类</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[]</span> : 单个字符<br><br><span class="hljs-selector-attr">[abc]</span>          只能是<span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span>, 或<span class="hljs-selector-tag">c</span><br><span class="hljs-selector-attr">[^abc]</span>         除了<span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span>, <span class="hljs-selector-tag">c</span>之外的任何字符<br><span class="hljs-selector-attr">[a-zA-Z]</span>       <span class="hljs-selector-tag">a</span>到<span class="hljs-selector-tag">z</span> <span class="hljs-selector-tag">A</span>到<span class="hljs-selector-tag">Z</span>，包括（范围）<br><span class="hljs-selector-attr">[a-d[m-p]</span>]     <span class="hljs-selector-tag">a</span>到<span class="hljs-selector-tag">d</span>，或<span class="hljs-selector-tag">m</span>通过<span class="hljs-selector-tag">p</span>：（<span class="hljs-selector-attr">[a-dm-p]</span>联合）<br><span class="hljs-selector-attr">[a-z&amp;&amp;[def]</span>]   <span class="hljs-selector-tag">d</span>, <span class="hljs-selector-tag">e</span>, 或<span class="hljs-selector-tag">f</span>(交集)<br><span class="hljs-selector-attr">[a-z&amp;&amp;[^bc]</span>]   <span class="hljs-selector-tag">a</span>到<span class="hljs-selector-tag">z</span>，除了<span class="hljs-selector-tag">b</span>和<span class="hljs-selector-tag">c</span>：（<span class="hljs-selector-attr">[ad-z]</span>减法）<br><span class="hljs-selector-attr">[a-z&amp;&amp;[^m-p]</span>]  <span class="hljs-selector-tag">a</span>到<span class="hljs-selector-tag">z</span>，除了<span class="hljs-selector-tag">m</span>到<span class="hljs-selector-tag">p</span>：（<span class="hljs-selector-attr">[a-lq-z]</span>减法）<br></code></pre></td></tr></table></figure><ul><li>预定义字符类</li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">.  任何字符<br><span class="hljs-string">\</span> 转义字符，对下一个字符分析<br><span class="hljs-string">\d</span> 一个数字： [<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]<br><span class="hljs-string">\D</span> 非数字： [^<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]<br><span class="hljs-string">\s</span> 一个空白字符： [ <span class="hljs-string">\t\n\x0B\f\r]</span><br><span class="hljs-string">\S</span> 非空白字符： [^<span class="hljs-string">\s]</span><br><span class="hljs-string">\w</span> [a-zA-Z_0-<span class="hljs-number">9</span>] 英文、数字、下划线<br><span class="hljs-string">\W</span>  [^<span class="hljs-string">\w]</span> 一个非单词字符<br></code></pre></td></tr></table></figure><ul><li>数量</li></ul><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tp"><span class="hljs-keyword">X</span>?<span class="hljs-keyword">X</span>,  一次或<span class="hljs-number">0</span>次<br><span class="hljs-keyword">X</span>*<span class="hljs-keyword">X</span>,  零次或多次 (任意次数)<br><span class="hljs-keyword">X</span>+<span class="hljs-keyword">X</span>,  一次或多次<br><span class="hljs-keyword">X</span> &#123;n&#125;<span class="hljs-keyword">X</span>，正好n次<br><span class="hljs-keyword">X</span> &#123;n, &#125;<span class="hljs-keyword">X</span>，至少n次<br><span class="hljs-keyword">X</span> &#123;n,m&#125;<span class="hljs-keyword">X</span>，至少n但不超过m次<br></code></pre></td></tr></table></figure><h4 id="具体实例"><a href="#具体实例" class="headerlink" title="具体实例"></a>具体实例</h4><ol><li><p>QQ号正则<br>5~12位的数字，开头不为0<br><code>String regex =&quot;[1-9]\\d&#123;4,11&#125;&quot;;</code></p></li><li><p>手机号正则<br>11位数字；1开头，第2个数字:  3 4 5 6 7 8 9<br><code>String regex =&quot;[1][3-9]\\d&#123;9&#125;&quot;;</code></p></li><li><p>邮箱正则</p><p>​     （数字字母下划线）@ (数字字母) . (2-3个字母) ；最后的可以多个</p><p>如：<a href="mailto:&#x61;&#x62;&#99;&#49;&#50;&#51;&#64;&#49;&#54;&#51;&#46;&#x63;&#x6f;&#109;">&#x61;&#x62;&#99;&#49;&#50;&#51;&#64;&#49;&#54;&#51;&#46;&#x63;&#x6f;&#109;</a> ; <a href="mailto:&#x61;&#x5f;&#98;&#x5f;&#x63;&#x5f;&#x64;&#x40;&#x68;&#x61;&#x70;&#x70;&#x79;&#46;&#x71;&#x71;&#x2e;&#x63;&#111;&#109;">&#x61;&#x5f;&#98;&#x5f;&#x63;&#x5f;&#x64;&#x40;&#x68;&#x61;&#x70;&#x70;&#x79;&#46;&#x71;&#x71;&#x2e;&#x63;&#111;&#109;</a> ；</p><p>​<code>String regex = &quot;\\w+[@][\\w&amp;&amp;[^_]]+(\\.[a-z]&#123;2,3&#125;)+&quot;;</code></p><p><code>(\\.[a-z]&#123;2,3&#125;)+</code>:中间的规则可以出现一次或多次</p></li></ol><h4 id="String-类中与正则有关的常见方法"><a href="#String-类中与正则有关的常见方法" class="headerlink" title="String 类中与正则有关的常见方法"></a>String 类中与正则有关的常见方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public String replaceAll(String regex,String newStr)</td><td>按照正则表达式匹配的内容进行替换</td></tr><tr><td>public String[] split(String regex)</td><td>按照正则表达式匹配的内容进行分割字符串，反回一个字符串数组</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc1efg&quot;</span>;<br>s = s.replaceAll(<span class="hljs-string">&quot;\\d&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);   <span class="hljs-comment">//s = &quot;abcefg&quot;</span><br></code></pre></td></tr></table></figure><h4 id="正则表达式爬取信息"><a href="#正则表达式爬取信息" class="headerlink" title="正则表达式爬取信息"></a>正则表达式爬取信息</h4><h5 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <br>                <span class="hljs-string">&quot;电话：18666668888，18699997777或者联系&quot;</span> +<br>                <span class="hljs-string">&quot;邮箱：boniu@itcast.cn 邮箱：bozai@itcast.cn 邮箱2：dlei0009@163.com&quot;</span> +<br>                <span class="hljs-string">&quot;座机电话：01036517895，010-98951256 &quot;</span> +<br>                <span class="hljs-string">&quot;热线电话：400-618-9090 ，400-618-4000，4006184000，4006189090&quot;</span>;<br></code></pre></td></tr></table></figure><h5 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义爬取的正则表达式</span><br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[1][3-9]\\d&#123;9&#125;|\\w+[@][\\w&amp;&amp;[^_]]+(\\.[a-z]&#123;2,3&#125;)+|[0]\\d&#123;2,3&#125;-?\\d&#123;7,8&#125;|400-?\\d&#123;3&#125;-?\\d&#123;4&#125;&quot;</span>;<br><br><span class="hljs-comment">// 将正则表达式封装为 Pattern 对象</span><br><span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex);<br><br><span class="hljs-comment">// 获取匹配器对象</span><br><span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(data);<br><br><span class="hljs-keyword">while</span> (matcher.find()) &#123;         <span class="hljs-comment">//匹配器查询有没有符合的数据，有就返还true，没有就有false；</span><br>    System.out.println(matcher.group());<span class="hljs-comment">//打印符合的数据</span><br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>注：</p><p><code>matcher.find()</code>：匹配器查询有没有符合规则的数据，有就返还true，没有为false； <strong>然后</strong>指向后面数据，第二次调用就是看后面存不存在，然后<code>matcher.group()</code>获取该数据；</p><p>如果只使用一次<code>matcher.find()</code>，则<code>matcher.group()</code>内的数据始终相同。</p>          </div><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">18666668888</span><br><span class="hljs-number">18699997777</span><br>boniu@itcast.cn<br>bozai@itcast.cn<br>dlei<span class="hljs-number">0009@163</span>.com<br><span class="hljs-number">01036517895</span><br><span class="hljs-number">010</span>-<span class="hljs-number">98951256</span><br><span class="hljs-number">400-618</span>-<span class="hljs-number">9090</span><br><span class="hljs-number">400-618</span>-<span class="hljs-number">4000</span><br><span class="hljs-number">4006184000</span><br><span class="hljs-number">4006189090</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>冒泡排序</tag>
      
      <tag>选择排序</tag>
      
      <tag>二分查找</tag>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14_常用API:Object类,Math类,System类,BigDecimal类,包装类,Arrays 工具类</title>
    <link href="/2023/02/14/%E5%B8%B8%E7%94%A8API/"/>
    <url>/2023/02/14/%E5%B8%B8%E7%94%A8API/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-常用API"><a href="#Java-常用API" class="headerlink" title="Java 常用API"></a>Java 常用API</h1><h2 id="Object-类"><a href="#Object-类" class="headerlink" title="Object 类"></a>Object 类</h2><p><strong>所有的类，都直接或者间接的继承了 Object 类</strong></p><h5 id="public-String-toString"><a href="#public-String-toString" class="headerlink" title="public String toString()"></a>public String toString()</h5><p>默认是返回当前对象在堆内存中的地址信息:类的全限名@内存地址</p><p><strong>存在意义：子类重写后可以返回所需对象的内容，替换原先的地址；</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public String <span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span> &#123;<br>      return get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;@&quot;</span> + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">HexString(<span class="hljs-params">hashCode</span>()</span>);<br>  &#125;<br><br>  get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Name()</span> : 类名称, 全类名(包名 + 类名)<br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">HexString()</span> : 转十六进制<br>  hash<span class="hljs-constructor">Code()</span> : 返回对象内存地址 + 哈希算法, 算出来的整数 (哈希值)<br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>注: 使用打印语句打印对象名时, println()方法在源码层面自动调用该对象的toString方法.</p>          </div><pre><code class="hljs">public static String valueOf(Object obj) &#123;   return (obj == null) ? &quot;null&quot; : obj.toString();&#125;</code></pre><p>toString()示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;A&#123;name = &quot;</span> + name + <span class="hljs-string">&quot;, age = &quot;</span> + age + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br>使用：<br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>System.out.println(a); <span class="hljs-comment">//等价于System.out.println(a.toString());</span><br></code></pre></td></tr></table></figure><h5 id="public-Boolean-equals-Object-o"><a href="#public-Boolean-equals-Object-o" class="headerlink" title="public Boolean equals(Object o)"></a>public Boolean equals(Object o)</h5><p>默认是比较当前对象与另一个对象的地址是否相同，相同返回true，不同返回false</p><p><strong>存在意义：子类重写后定义自己的比较规则</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-keyword">if</span>(obj instancerof A)&#123;   <span class="hljs-comment">//判断是不是父子类的关系</span><br>            <span class="hljs-comment">//向下转型，调用子类特有的成员</span><br>            <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> (A)obj;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age == a.age &amp;&amp; <span class="hljs-built_in">this</span>.name.euals(stu.name);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="IDEA中自带的重写equals-方法分析"><a href="#IDEA中自带的重写equals-方法分析" class="headerlink" title="IDEA中自带的重写equals()方法分析"></a>IDEA中自带的重写equals()方法分析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-comment">// this : stu1</span><br>    <span class="hljs-comment">// o : stu2</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) &#123;<br>        <span class="hljs-comment">// 两个对象做地址值的比较, 如果地址相同, 内容肯定相同</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 代码要是能够走到这里, 代表地址肯定不相同，同时stu1不为null</span><br>    <span class="hljs-comment">// 如果stu2为null, 返回false</span><br>    <span class="hljs-comment">// this.getClass() != o.getClass() : 两个对象的字节码是否相同，如果字节码不同, 代表类型不相同, 返回false</span><br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || <span class="hljs-built_in">this</span>.getClass() != o.getClass()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 代码要是能够走到这里, 类型相同.</span><br>    <span class="hljs-comment">// 则向下转型</span><br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br>    <span class="hljs-comment">// 比较</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age == student.age &amp;&amp; Objects.equals(<span class="hljs-built_in">this</span>.name, student.name);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Objects的常见方法"><a href="#Objects的常见方法" class="headerlink" title="Objects的常见方法"></a>Objects的常见方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object a, Object b)</span><br><span class="hljs-comment">//比较两个对象 特点：底层先进行非空判断，以避免空指针异常，然后再equals()比较;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isNull</span><span class="hljs-params">(Object obj)</span><br><span class="hljs-comment">//判断变量是否为 null   底层逻辑就是判断是否为null，很简单一般不用该方法</span><br></code></pre></td></tr></table></figure><div class="note note-info">            <h6 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h6><ul><li>Objects.equals 和 ***.equals方法的区别：</li></ul><p><strong>实现逻辑: Objects.equals方法, 内部依赖于我们自己所编写的equals</strong><br><strong>优点区别: Objects.equals方法, 内部带有非null判断，避免空指针异常</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">public static boolean equals(Object a, Object b) &#123;return (a == b) || (a != null &amp;&amp; a.equals(b));&#125;<br></code></pre></td></tr></table></figure><p>a &#x3D;&#x3D; b : 如果地址相同, 返回为true；短路 || 功能:如果左边为true, 右边不执行</p><p><strong>即：如果地址相同, 直接返回true</strong></p><p>a !&#x3D; b : 如果地址不相同, 返回false, 短路 || : 左边为false, 右边继续执行.</p><p>a !&#x3D; null : a为null,返回false时，短路 &amp;&amp; : 左边为false, 右边不执行； 则a不调用equals()，避免了空指针异常问题</p><p>a !&#x3D; null : 返回true时a不为null，短路 &amp;&amp; : 左边为true, 右边执行 a.equals(b)</p>          </div><h2 id="Math-类"><a href="#Math-类" class="headerlink" title="Math 类"></a>Math 类</h2><p><em>java.lang___不需要导包，工具类，所有方法都是静态的，私有了构造方法不允许调用</em>                    <strong>Math.—()；调用</strong></p><table><thead><tr><th>常用方法名</th><th>作用</th></tr></thead><tbody><tr><td>public static int abs(int a)</td><td>获取参数绝对值</td></tr><tr><td>public static double ceil(double a)</td><td>向上取整</td></tr><tr><td>public static double floor(double a)</td><td>向下取整</td></tr><tr><td>public static int round(float a)</td><td>四舍五入</td></tr><tr><td>public static int max(int a,int b)</td><td>获取两个int值中的较大值</td></tr><tr><td>public static double pow(double a,double b)</td><td>返回a的b次幂的值</td></tr><tr><td>public static double random()</td><td>返回值为double的随机值，范围[0.0,1.0)</td></tr></tbody></table><h2 id="System-类"><a href="#System-类" class="headerlink" title="System 类"></a>System 类</h2><p><em>同Math类，所有方法都是静态的，类名调用</em></p><table><thead><tr><th>常用方法名</th><th>作用</th></tr></thead><tbody><tr><td>public static void exit(int status)</td><td>终止当前运行的 Java 虚拟机，非零表示异常终止</td></tr><tr><td>public static long currentTimeMillis()</td><td>返回当前系统的时间毫秒值形式，从1970年1月1日0时0分0秒到现在[由于时区不同,中国为8时0分0秒]</td></tr><tr><td>public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</td><td>数组拷贝  参数：(数据源数组, 起始索引, 目的地数组, 起始索引, 拷贝个数&#x2F;长度)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//currentTimeMillis()使用</span><br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>/………………/<span class="hljs-comment">//统计这段代码的运行时间 单位毫秒</span><br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> end - start;<br><br><span class="hljs-comment">// arraycopy(Object src, int srcPos, Object dest, int destPos, int length)使用</span><br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>System.arraycopy(arr, <span class="hljs-number">1</span>, arr2, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<span class="hljs-comment">//arr2：&#123;1,2,3&#125;</span><br></code></pre></td></tr></table></figure><h2 id="BigDecimal-类"><a href="#BigDecimal-类" class="headerlink" title="BigDecimal 类"></a>BigDecimal 类</h2><p>解决小数运算中的不精确问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.2</span>;<br>System.out.println(num1 + num2);  <span class="hljs-comment">//0.300000000000004</span><br></code></pre></td></tr></table></figure><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><table><thead><tr><th>public BigDecimal(double val)                                         不常用：还是会导致精度问题</th></tr></thead><tbody><tr><td>public BigDecimal(String val)</td></tr><tr><td>public static BigDecimal valueOf(double val)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bd1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">1.0</span>);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bd2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;1.0&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>public BigDecimal add(BigDecimal b)</td><td>加法</td></tr><tr><td>public BigDecimal subtract(BigDecimal b)</td><td>减法</td></tr><tr><td>public BigDecimal multiply(BigDecimal b)</td><td>乘法</td></tr><tr><td>public BigDecimal divide(BigDecimal b)</td><td>除法</td></tr><tr><td>public BigDecimal divide (BigDecimal b，精确位数，舍入模式)</td><td>除法[保留几位小数]</td></tr><tr><td>b.doubleValue()</td><td>转成double类型</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bd1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">0.10</span>);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bd2</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">0.03</span>);<br><br>bd1.add(bd2);<span class="hljs-comment">//0.13</span><br>bd1.subtract(bd2);<span class="hljs-comment">//0.07</span><br>bd1.multiply(bd2);<span class="hljs-comment">//0.003</span><br>bd1.divide(bd2);<span class="hljs-comment">//此时会报错，运算错误，除不尽</span><br>bd1.divide(bd2, <span class="hljs-number">2</span>, RoundingMode.HALF_UP);           <span class="hljs-comment">// 3.33</span><br></code></pre></td></tr></table></figure><h5 id="舍入模式"><a href="#舍入模式" class="headerlink" title="舍入模式"></a>舍入模式</h5><ul><li>RoundingMode.UP  进一法</li><li>RoundingMode.DOWN  去尾法</li><li>RoundingMode.HALF_UP 四舍五入</li></ul><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>将基本数据类型, 包装成类 (变成引用数据类型)</p><table><thead><tr><th>基本数据类型</th><th>引用数据类型</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><h4 id="Integer-类"><a href="#Integer-类" class="headerlink" title="Integer 类"></a>Integer 类</h4><h5 id="Integer-和-int-的转换"><a href="#Integer-和-int-的转换" class="headerlink" title="Integer 和 int 的转换"></a>Integer 和 int 的转换</h5><ul><li>手动装箱: 调用方法, 手动将基本数据类型, 包装成类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Integer</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span>     <span class="hljs-comment">//构造方法 </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>   <span class="hljs-comment">//静态方法</span><br></code></pre></td></tr></table></figure><ul><li>手动拆箱: 调用方法, 手动将包装类, 拆成(转换)基本数据类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">intValue</span><span class="hljs-params">()</span>                <span class="hljs-comment">//以 int 类型返回 Integer对象 的值</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> Integer.value(<span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> it.inValue(it);<br></code></pre></td></tr></table></figure><hr><ul><li>JDK5版本开始, 可以自动拆装箱 :</li></ul><p>​自动装箱 : 可以将基本数据类型直接赋值给包装类的变量<br>​自动拆箱 : 可以将包装类的数据直接赋值给基本数据类型变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> num;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> it;<br></code></pre></td></tr></table></figure><h5 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static String toBinaryString(int i)</td><td>转换成二进制</td></tr><tr><td>public static String toOctalString(int i)</td><td>转换成八进制</td></tr><tr><td>public static String toHexString(int i)</td><td>转换成十六进制</td></tr><tr><td>public static int parseInt(String s)</td><td>将字符串类型整数转换成int类型</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;100&quot;</span>;<br>System.out.println(s + <span class="hljs-number">100</span>);          <span class="hljs-comment">// 100100</span><br>System.out.println(Integer.parseInt(s) + <span class="hljs-number">100</span>);        <span class="hljs-comment">// 200</span><br></code></pre></td></tr></table></figure><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>将 String s &#x3D; “1,2,3,4”; 转换为整数并存入数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1,2,3,4&quot;</span>;<br><span class="hljs-comment">// 1. 逗号为分隔符</span><br>String[] arr = s.split(<span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-comment">// 2. 遍历字符串数组转换成int型，存入num[]数组</span><br><span class="hljs-type">int</span>[] num = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    num[i] = Integer.parseInt(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="转换内部逻辑"><a href="#转换内部逻辑" class="headerlink" title="转换内部逻辑"></a>转换内部逻辑</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>System.out.println(i1 == i2);       <span class="hljs-comment">// true</span><br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-number">129</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">i4</span> <span class="hljs-operator">=</span> <span class="hljs-number">129</span>;<br>System.out.println(i3 == i4);       <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p><strong>原因:自动装箱的时候, 如果装箱数据在-128~127之间, &#x3D;&#x3D;比较结果为true, 范围外为false</strong></p><p><strong>自动装箱原理 :</strong> 调用 Integer.valueOf(); 方法</p><h6 id="逻辑代码"><a href="#逻辑代码" class="headerlink" title="逻辑代码"></a>逻辑代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@IntrinsicCandidate</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i);<br>&#125;<br><br>注：<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer[] cache; <span class="hljs-comment">//cache是一个数组</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">low</span> <span class="hljs-operator">=</span> -<span class="hljs-number">128</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">high</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;  <span class="hljs-comment">//静态内部类中h赋值给high</span><br><span class="hljs-comment">// 部分static&#123;&#125;代码</span><br><span class="hljs-keyword">static</span> &#123;<br>            <span class="hljs-comment">// high value may be configured by property</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">integerCacheHighPropValue</span> <span class="hljs-operator">=</span><br>                VM.getSavedProperty(<span class="hljs-string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);<br>            <span class="hljs-keyword">if</span> (integerCacheHighPropValue != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    h = Math.max(parseInt(integerCacheHighPropValue), <span class="hljs-number">127</span>);<br>                    <span class="hljs-comment">// Maximum array size is Integer.MAX_VALUE</span><br>                    h = Math.min(h, Integer.MAX_VALUE - (-low) -<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">catch</span>( NumberFormatException nfe) &#123;<br>                    <span class="hljs-comment">// If the property cannot be parsed into an int, ignore it.</span><br>                &#125;<br>            &#125;<br>            high = h;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;   <span class="hljs-comment">//i = 127</span><br>      <span class="hljs-keyword">if</span> (i &gt;= -<span class="hljs-number">128</span> &amp;&amp; i &lt;= <span class="hljs-number">127</span>) &#123;<br>          <span class="hljs-keyword">return</span> IntegerCache.cache[<span class="hljs-number">255</span>];  <span class="hljs-comment">//i + (-IntegerCache.low) = 255</span><br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i);<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li>​    如果装箱数据不在 -128 ~ 127 , 重新创建新的对象 new Integer(i);  堆中重新开辟内存，此时&#x3D;&#x3D;比较时候是两个不同内存地址的数据</li><li>​    如果装箱数据在 -128 ~ 127 , 不会创建新对象, 从cache数组中, 取出提前创建好的Integer对象返回</li></ul><p><strong>Integer类中, 定义的 Integer[] cache存储了256个Integer对象： -128 ~ 127</strong></p><div class="note note-primary">            <h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>实际比较时，调用qual()方法，包装类重写了父类的equal()方法，就是比较数据的</p>          </div><h2 id="Arrays-工具类"><a href="#Arrays-工具类" class="headerlink" title="Arrays 工具类"></a>Arrays 工具类</h2><p>数组操作工具类</p><table><thead><tr><th>常用方法</th><th>说明</th></tr></thead><tbody><tr><td>public static String toString(类型[] a)</td><td>将数组元素拼接为带有格式的字符串</td></tr><tr><td>public static boolean equals(类型[] a, 类型[] b)</td><td>比较两个数组内容是否相同</td></tr><tr><td>public static int binarySearch(int[] a, int key)</td><td>查找元素在数组中的索引 (二分查找法)</td></tr><tr><td>public static void sort(类型[] a)</td><td>对数组进行默认升序排序</td></tr></tbody></table><div class="note note-info">            <p>注：public static int binarySearch(int[] a, int key)： 如果查找的元素, 在数组中不存在: 返回 (-(插入点) - 1)</p>          </div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span>[] arr2 = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><br>System.out.println(Arrays.toString(arr1));   <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br>System.out.println(Arrays.equals(arr1, arr2));<span class="hljs-comment">// false</span><br>System.out.println(Arrays.binarySearch(arr1, <span class="hljs-number">2</span>));<span class="hljs-comment">// 1</span><br>System.out.println(Arrays.binarySearch(arr1, <span class="hljs-number">6</span>));<span class="hljs-comment">// -(5)-1 = -6</span><br>Arrays.sort(arr2);<br>System.out.println(Arrays.toString(arr2));      <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>包装类</tag>
      
      <tag>BigDecimal类</tag>
      
      <tag>System类</tag>
      
      <tag>Math类</tag>
      
      <tag>Object类</tag>
      
      <tag>Arrays 工具类</tag>
      
      <tag>API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13_窗口使用，华容道</title>
    <link href="/2023/02/14/%E5%8D%8E%E5%AE%B9%E9%81%93/"/>
    <url>/2023/02/14/%E5%8D%8E%E5%AE%B9%E9%81%93/</url>
    
    <content type="html"><![CDATA[<h1 id="华容道小游戏"><a href="#华容道小游戏" class="headerlink" title="华容道小游戏"></a>华容道小游戏</h1><h5 id="绘制界面"><a href="#绘制界面" class="headerlink" title="绘制界面"></a>绘制界面</h5><p>设置窗体大小，居中显示，始终显示在顶层。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initFrame</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 设置窗体大小</span><br>        setSize(<span class="hljs-number">590</span>,<span class="hljs-number">635</span>);<br>        <span class="hljs-comment">// 设置窗体关闭模式</span><br>        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>        <span class="hljs-comment">// 设置窗体标题</span><br>        setTitle(<span class="hljs-string">&quot;华容道&quot;</span>);<br>        <span class="hljs-comment">// 设置窗体置顶</span><br>        setAlwaysOnTop(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 设置窗体居中</span><br>        setLocationRelativeTo(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 取消默认布局</span><br>        setLayout(<span class="hljs-literal">null</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>加载图片：</strong>两层循环，图片用二维数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> data[][] = &#123;<br>        &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>        &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,<br>        &#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;<br>&#125;;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">3</span> ; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; j &lt; <span class="hljs-number">3</span> ; j++)<br>            &#123;<br>                <span class="hljs-type">JLabel</span> <span class="hljs-variable">jLabel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(<span class="hljs-string">&quot;E:\\Desktop\\pic\\&quot;</span>+data[i][j]+<span class="hljs-string">&quot;.png&quot;</span>));<br>                jLabel.setBounds(<span class="hljs-number">30</span>+<span class="hljs-number">175</span>*j,<span class="hljs-number">60</span>+<span class="hljs-number">175</span>*i,<span class="hljs-number">175</span>,<span class="hljs-number">175</span>);<br>                jFrame.getContentPane().add(jLabel);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>使用窗体，但是增加新功能：</p><h5 id="继承改进"><a href="#继承改进" class="headerlink" title="继承改进"></a>继承改进</h5><ol><li>定义 MainFrame 类继承 JFrame</li><li>将代码抽取到一个单独的方法 initFrame()</li><li>将绘制界面的代码, 抽取为一个单独的方法 paintView()</li><li>将二维数组提取到成员变量的位置</li><li>JFrame 类中方法的调用方式, 更换为super或省略</li><li>在构造方法中, 调用 initFrame() 和 paintView()</li><li>在构造方法的最后调用 setVisible(true);</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">MyFrame</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 窗体对象.addKeyListener(KeyListener实现类对象);</span><br>    <span class="hljs-comment">// this : 当前类对象代表</span><br>    <span class="hljs-comment">//          1) 窗体对象</span><br>    <span class="hljs-comment">//          2) KeyListener实现类对象</span><br>    <span class="hljs-built_in">this</span>.addKeyListener(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-comment">// 初始化窗体</span><br>    initFrame();<br>    <span class="hljs-comment">// 初始化数据</span><br>    initData();<br>    <span class="hljs-comment">// 绘制游戏界面</span><br>    paintView();<br>    <span class="hljs-comment">// 设置窗体可见</span><br>    setVisible(<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="初始化九宫格"><a href="#初始化九宫格" class="headerlink" title="初始化九宫格"></a>初始化九宫格</h5><p><strong>核心思路：</strong>遍历二维数组获取每一个元素，和其他元素随机交换</p><p><em><strong>注：二维数组数据覆盖不允许，需要重新new {}</strong></em></p><ol><li>遍历二维数组, 获取到每一个元素     </li><li>在遍历的过程中, 产生两个随机的索引</li><li>让当前元素, 和随机索引所指向的元素进行交换</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initFrame</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;            <span class="hljs-comment">//遍历二维数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; data[i].length; j++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">3</span>);          <span class="hljs-comment">//产生随机索引值，交换数据</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">3</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data[i][j];<br>            data[i][j] = data[x][y];<br>            data[x][y] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="上下左右变位—键盘监听"><a href="#上下左右变位—键盘监听" class="headerlink" title="上下左右变位—键盘监听"></a>上下左右变位—键盘监听</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(keyCode == <span class="hljs-number">37</span> )&#123;                     <span class="hljs-comment">//左按键</span><br>    <span class="hljs-keyword">if</span>(column == <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span>;                         <span class="hljs-comment">//在右边界时，无法移动</span><br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data[row][column];           <span class="hljs-comment">//空白和右边的交换</span><br>    data[row][column] = data[row][column + <span class="hljs-number">1</span>];<br>    data[row][column + <span class="hljs-number">1</span>] = temp;<br>    column++;                               <span class="hljs-comment">//交换后，列值加1</span><br>    count++;                            <span class="hljs-comment">//步数+1</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注：数据在数组中改变之后，界面需要重新刷新</strong></p><ol><li><p>每一次移动之后，调用paintView重新绘制界面</p></li><li><p>paintView方法中，加载图片资源之前，需要将现有的组件移除</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">getContentPane</span>()<span class="hljs-selector-class">.removeAll</span>();<br></code></pre></td></tr></table></figure></li><li><p>加载后，需要刷新界面</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">getContentPane</span>()<span class="hljs-selector-class">.repaint</span>();<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">//到达边界不会再移动的情况<br><span class="hljs-attribute">column</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">3</span> 不允许左移动<br><span class="hljs-attribute">row</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">3</span> 不允许上移动<br><span class="hljs-attribute">column</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">0</span> 不允许右移动<br><span class="hljs-attribute">row</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">0</span> 不允许下移动<br></code></pre></td></tr></table></figure><h5 id="游戏判定胜利"><a href="#游戏判定胜利" class="headerlink" title="游戏判定胜利"></a>游戏判定胜利</h5><ol><li>定义新的二维数组, 存储游戏胜利的数据</li><li>使用现有数组中的元素, 和胜利数组中元素逐个进行比对</li><li>每一次移动后, 都需要调用绘制界面的方法，在该方法中判断是否胜利</li></ol><p>注意：胜利界面出现后，游戏将进入不可移动的状态</p><p>在移动的方法中，再次调用 victory方法，如果为胜利，直接return</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">victory</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; data[i].length; j++) &#123;<br>            <span class="hljs-keyword">if</span> (data[i][j] != victory[i][j]) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;                           <span class="hljs-comment">//数据不一致，还没有胜利</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="统计步数"><a href="#统计步数" class="headerlink" title="统计步数"></a>统计步数</h5><p>添加统计变量 count<br>每次上下左右移动，count ++</p><h5 id="重新游戏"><a href="#重新游戏" class="headerlink" title="重新游戏"></a>重新游戏</h5><p>绑定动作监听 ActionListenter </p><ol><li>步数归零</li><li>重新调用initData()方法</li><li>重新调用paintView()方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">JButton</span> <span class="hljs-variable">btn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;重新开始&quot;</span>);<br>btn.setBounds(<span class="hljs-number">350</span>,<span class="hljs-number">20</span>,<span class="hljs-number">100</span>,<span class="hljs-number">20</span>);<br>getContentPane().add(btn);<br>btn.setFocusable(<span class="hljs-literal">false</span>);                            <span class="hljs-comment">//取消按钮焦点</span><br>btn.addActionListener(e -&gt; &#123;                        <span class="hljs-comment">//初始化游戏数据</span><br>    count = <span class="hljs-number">0</span>;<br>    initData();<br>    paintView();<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><h4 id="Run-java"><a href="#Run-java" class="headerlink" title="Run.java"></a>Run.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Run</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFrame</span>();  <span class="hljs-comment">//调用构造方法即可</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MyFrame-java"><a href="#MyFrame-java" class="headerlink" title="MyFrame.java"></a>MyFrame.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.event.KeyEvent;<br><span class="hljs-keyword">import</span> java.awt.event.KeyListener;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyListener</span> &#123;<br>    <span class="hljs-type">int</span>[][] data = &#123;<br>            &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>            &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,<br>            &#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-type">int</span>[][] victory = &#123;<br>            &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>            &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,<br>            &#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-type">int</span> row;                <span class="hljs-comment">// 空白块 行</span><br>    <span class="hljs-type">int</span> column;             <span class="hljs-comment">// 空白块 列</span><br>    <span class="hljs-type">int</span> count;              <span class="hljs-comment">// 步数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyFrame</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 窗体对象.addKeyListener(KeyListener实现类对象);</span><br>        <span class="hljs-comment">// this : 当前类对象代表</span><br>        <span class="hljs-comment">//          1) 窗体对象</span><br>        <span class="hljs-comment">//          2) KeyListener实现类对象</span><br>        <span class="hljs-built_in">this</span>.addKeyListener(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-comment">// 初始化窗体</span><br>        initFrame();<br>        <span class="hljs-comment">// 初始化数据</span><br>        initData();<br>        <span class="hljs-comment">// 绘制游戏界面</span><br>        paintView();<br>        <span class="hljs-comment">// 设置窗体可见</span><br>        setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化窗体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initFrame</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 设置窗体大小</span><br>        setSize(<span class="hljs-number">590</span>,<span class="hljs-number">635</span>);<br>        <span class="hljs-comment">// 设置窗体关闭模式</span><br>        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>        <span class="hljs-comment">// 设置窗体标题</span><br>        setTitle(<span class="hljs-string">&quot;华容道&quot;</span>);<br>        <span class="hljs-comment">// 设置窗体置顶</span><br>        setAlwaysOnTop(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 设置窗体居中</span><br>        setLocationRelativeTo(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 取消默认布局</span><br>        setLayout(<span class="hljs-literal">null</span>);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化九宫格图片</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;            <span class="hljs-comment">//遍历二维数组</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; data[i].length; j++) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">3</span>);          <span class="hljs-comment">//产生随机索引值，交换数据</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">3</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data[i][j];<br>                data[i][j] = data[x][y];<br>                data[x][y] = temp;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;             <span class="hljs-comment">//找到空白元素所在位置</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; data[i].length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (data[i][j] == <span class="hljs-number">9</span>) &#123;<br>                    row = i;<br>                    column = j;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 绘制华容道界面</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paintView</span><span class="hljs-params">()</span> &#123;<br>        getContentPane().removeAll();                       <span class="hljs-comment">//清空原始配置</span><br><br>        <span class="hljs-keyword">if</span>(victory())&#123;                                      <span class="hljs-comment">//胜利弹窗</span><br>            <span class="hljs-type">JLabel</span> <span class="hljs-variable">win</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(<span class="hljs-string">&quot;E:\\Desktop\\pic\\win.png&quot;</span>));<br>            win.setBounds(<span class="hljs-number">120</span>,<span class="hljs-number">220</span>,<span class="hljs-number">270</span>,<span class="hljs-number">90</span>);<br>            getContentPane().add(win);<br>        &#125;<br><br>        <span class="hljs-type">JButton</span> <span class="hljs-variable">btn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;重新开始&quot;</span>);<br>        btn.setBounds(<span class="hljs-number">350</span>,<span class="hljs-number">20</span>,<span class="hljs-number">100</span>,<span class="hljs-number">20</span>);<br>        getContentPane().add(btn);<br>        btn.setFocusable(<span class="hljs-literal">false</span>);                            <span class="hljs-comment">//取消按钮焦点</span><br>        btn.addActionListener(e -&gt; &#123;                        <span class="hljs-comment">//初始化游戏数据</span><br>            count = <span class="hljs-number">0</span>;<br>            initData();<br>            paintView();<br>        &#125;);<br><br>        <span class="hljs-type">JLabel</span> <span class="hljs-variable">jLabel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-string">&quot;步数：&quot;</span> + count );<br>        jLabel.setBounds(<span class="hljs-number">50</span>,<span class="hljs-number">20</span>,<span class="hljs-number">100</span>,<span class="hljs-number">20</span>);<br>        getContentPane().add(jLabel);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">3</span> ; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; j &lt; <span class="hljs-number">3</span> ; j++)<br>            &#123;<br>                <span class="hljs-type">JLabel</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(<span class="hljs-string">&quot;E:\\Desktop\\pic\\&quot;</span>+data[i][j]+<span class="hljs-string">&quot;.png&quot;</span>));<br>                image.setBounds(<span class="hljs-number">30</span>+<span class="hljs-number">175</span>*j,<span class="hljs-number">60</span>+<span class="hljs-number">175</span>*i,<span class="hljs-number">175</span>,<span class="hljs-number">175</span>);<br>                getContentPane().add(image);<br>            &#125;<br>        &#125;<br><br>        getContentPane().repaint();                           <span class="hljs-comment">//重新安排布局</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断胜利</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">victory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; data[i].length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (data[i][j] != victory[i][j]) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;                           <span class="hljs-comment">//数据不一致，还没有胜利</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 上下左右移动</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">(<span class="hljs-type">int</span> keyCode)</span>&#123;<br>        <span class="hljs-comment">//System.out.println(keyCode);</span><br>        <span class="hljs-keyword">if</span>(victory())&#123;<br>            <span class="hljs-keyword">return</span>;                             <span class="hljs-comment">//游戏胜利，停止移动</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(keyCode == <span class="hljs-number">37</span> )&#123;                     <span class="hljs-comment">//左按键</span><br>            <span class="hljs-keyword">if</span>(column == <span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-keyword">return</span>;                         <span class="hljs-comment">//在右边界时，无法移动</span><br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data[row][column];           <span class="hljs-comment">//空白和右边的交换</span><br>            data[row][column] = data[row][column + <span class="hljs-number">1</span>];<br>            data[row][column + <span class="hljs-number">1</span>] = temp;<br>            column++;                               <span class="hljs-comment">//交换后，列值加1</span><br>            count++;                            <span class="hljs-comment">//步数+1</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(keyCode == <span class="hljs-number">38</span> )&#123;               <span class="hljs-comment">//上按键</span><br>            <span class="hljs-keyword">if</span>(row == <span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-keyword">return</span>;                         <span class="hljs-comment">//在下边界时，无法移动</span><br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data[row][column];           <span class="hljs-comment">//空白和下边的交换</span><br>            data[row][column] = data[row + <span class="hljs-number">1</span>][column];<br>            data[row + <span class="hljs-number">1</span>][column] = temp;<br>            row++;                               <span class="hljs-comment">//交换后，行值加1</span><br>            count++;                             <span class="hljs-comment">//步数+1</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(keyCode == <span class="hljs-number">39</span> )&#123;               <span class="hljs-comment">//右按键</span><br>            <span class="hljs-keyword">if</span>(column == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span>;                         <span class="hljs-comment">//在左边界时，无法移动</span><br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data[row][column];           <span class="hljs-comment">//空白和左边的交换</span><br>            data[row][column] = data[row][column - <span class="hljs-number">1</span>];<br>            data[row][column - <span class="hljs-number">1</span>] = temp;<br>            column--;                               <span class="hljs-comment">//交换后，列值-1</span><br>            count++;                             <span class="hljs-comment">//步数+1</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(keyCode == <span class="hljs-number">40</span> )&#123;               <span class="hljs-comment">//下按键</span><br>            <span class="hljs-keyword">if</span>(row == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span>;                         <span class="hljs-comment">//在下边界时，无法移动</span><br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data[row][column];           <span class="hljs-comment">//空白和上边的交换</span><br>            data[row][column] = data[row - <span class="hljs-number">1</span>][column];<br>            data[row - <span class="hljs-number">1</span>][column] = temp;<br>            row--;                               <span class="hljs-comment">//交换后，行值-1</span><br>            count++;                             <span class="hljs-comment">//步数+1</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (keyCode == <span class="hljs-number">32</span>) &#123;<br>            <span class="hljs-comment">// 测试：如果按空格，直接胜利</span><br>            data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;<br>                    &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>                    &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,<br>                    &#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;<br>            &#125;;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyTyped</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">keyCode</span> <span class="hljs-operator">=</span> e.getKeyCode();<br>        move(keyCode);<br>        <span class="hljs-comment">// 每一次移动之后, 都重新绘制游戏界面</span><br>        paintView();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>main函数中仅有new MyFarme语句，此时调用构造方法，实现类中的各个方法，简化代码；同时，因为继承Farme类，所以调用其中的方法为super.xxx(),而子类也没有重写过该方法，所以super可以省略，直接方法名调用</p>          </div><div class="note note-info">            <p>窗体对象.addKeyListener(KeyListener实现类对象);<br>this.addKeyListener(this);<br>        this : 当前类对象代表<br>                 1) 窗体对象<br>                                   2) KeyListener实现类对象<br>所以可以这样用this;</p>          </div>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>华容道</tag>
      
      <tag>窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12_代码块，内部类，Lambda表达式，窗体的使用，设计模式</title>
    <link href="/2023/02/14/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BB%A3%E7%A0%81%E5%9D%97%EF%BC%8C%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%8CLambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E7%AA%97%E4%BD%93%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/02/14/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BB%A3%E7%A0%81%E5%9D%97%EF%BC%8C%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%8CLambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E7%AA%97%E4%BD%93%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA-SE-代码块，内部类，Lambda表达式，窗体的使用，设计模式"><a href="#JAVA-SE-代码块，内部类，Lambda表达式，窗体的使用，设计模式" class="headerlink" title="JAVA SE   代码块，内部类，Lambda表达式，窗体的使用，设计模式"></a>JAVA SE   代码块，内部类，Lambda表达式，窗体的使用，设计模式</h1><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>在Java类下，使用 { } 括起来的代码被称为代码块</p><p>分类：局部代码块  构造代码块  静态代码块  同步代码块[多态]</p><ul><li>局部代码块</li></ul><p>​位置：方法中定义<br>​作用：限定变量的生命周期，及早释放，提高内存利用率</p><ul><li>构造代码块</li></ul><p>​位置：类中方法外定义<br>​特点：每次构造方法执行的时，都会执行该代码块中的代码，并且在构造方法执行前执行<br>​作用：将多个构造方法中相同的代码，抽取到构造代码块中，提高代码的复用性</p><ul><li>静态代码块</li></ul><p>​位置：类中方法外定义<br>​特点：需要通过static关键字修饰，随着类的加载而加载，并且只执行一次<br>​作用：在类加载的时候做一些数据初始化的操作；加载配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">static</span> String school;<br>    <span class="hljs-keyword">static</span> &#123;<br>        school = <span class="hljs-string">&quot;ABC&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>内部类:定义在一个类里面的类</p><h4 id="创建对象的格式"><a href="#创建对象的格式" class="headerlink" title="创建对象的格式"></a>创建对象的格式</h4><p>外部类名.内部类名 对象名 &#x3D; new 外部类对象().new 内部类对象();</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Outer</span>.<span class="hljs-keyword">Inner</span> <span class="hljs-keyword">in</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">Outer</span>().<span class="hljs-built_in">new</span> <span class="hljs-keyword">Inner</span>();<br></code></pre></td></tr></table></figure><h4 id="成员访问细节"><a href="#成员访问细节" class="headerlink" title="成员访问细节 :"></a>成员访问细节 :</h4><ul><li>内部类中, 访问外部类成员 : 直接访问, 包括私有</li><li>外部类中, 访问内部类成员 : 需要创建对象访问</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        MyOuter.<span class="hljs-type">MyInner</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyOuter</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInner</span>();<br>        a.show();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyOuter</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInner</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>            System.out.println(num);                            <span class="hljs-comment">// 30 输出内部类方法中定义的</span><br>            System.out.println(<span class="hljs-built_in">this</span>.num);                       <span class="hljs-comment">// 20 输出内部类成员变量</span><br>            System.out.println(MyOuter.<span class="hljs-built_in">this</span>.num);               <span class="hljs-comment">// 10 输出外部类成员变量，指定this是MyOuter本类的</span><br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="静态内部类-static-修饰的成员内部类"><a href="#静态内部类-static-修饰的成员内部类" class="headerlink" title="静态内部类 : static 修饰的成员内部类"></a>静态内部类 : static 修饰的成员内部类</h4><p>​    创建对象格式 : 外部类名.内部类名 对象名 &#x3D; new 外部类名.内部类对象();</p><p>​    <em><strong>注意事项 : 静态只能访问静态</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticInnerTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Outer.InnerClass.A();                 <span class="hljs-comment">//静态可以通过类名调用</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClass</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-type">Outer</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>();    <span class="hljs-comment">//非静态成员，需要先创建对象，才能调用</span><br>            System.out.println(o.num1);<br>            System.out.println(num2);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="局部内部类-放在方法、代码块、构造器等执行体中"><a href="#局部内部类-放在方法、代码块、构造器等执行体中" class="headerlink" title="局部内部类: 放在方法、代码块、构造器等执行体中"></a>局部内部类: 放在方法、代码块、构造器等执行体中</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalClassTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        a.show();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;B&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();           <span class="hljs-comment">//要调用方法中的类，需要先在该方法中创建对象，使用内部类要用的方法，最后在主函数中通过调用外部类的该方法才能使用，很麻烦，一般不会使用</span><br>        b.method(); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>概述 : 匿名内部类本质上是一个特殊的局部内部类（定义在方法内部）,匿名内部类可以使代码更加简洁，定义一个类的同时对其进行实例化<br>前提 : 需要存在一个接口或类<br>格式 :<br>                    new 类名\接口名 () {  }</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">new</span> 类名()&#123;&#125;  :  代表继承这个类<br><span class="hljs-keyword">new</span> 接口名()&#123;&#125; : 代表实现这个接口<br>   结论 : 可以让代码变得更加简洁, 在定义类的时候对其进行实例化<br></code></pre></td></tr></table></figure><p><strong>问题: 方法的形参是接口类型, 我们该传入的是什么?</strong><br>                    <em><em>: —–&gt;传入的是该接口的</em><u>实现类对象</u>      要实现的方法多时，就实例化一个接口，方法少时就用匿名内部类</em>**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnonClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        useInter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InterImpl</span>());<br>        useInter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inter</span>()&#123;                                   <span class="hljs-comment">//匿名内部类作实现类对象</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;                                <span class="hljs-comment">//实现接口的方法</span><br>                System.out.println(<span class="hljs-string">&quot;匿名内部类&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useInter</span><span class="hljs-params">(Inter i)</span>&#123;   <span class="hljs-comment">// Inter i = new InterImpl(); 要传入一个实现类对象</span><br>        i.show();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Inter</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>Lambda表达式 : JDK8开始后的一种新语法形式</p><p>   <strong>作用 :</strong> 简化匿名内部类的代码写法。<br>   <strong>格式 :</strong> () -&gt; {}</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-function"><span class="hljs-params">(匿名内部类被重写方法的形参列表)</span> -&gt;</span> &#123;   被重写方法的方法体代码。&#125;<br>注：-&gt; 是语法形式，无实际含义<br></code></pre></td></tr></table></figure><p><strong>注意：Lambda 表达式只能简化函数式接口的匿名内部类的写法形式</strong></p><h5 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h5><ul><li>必须是接口,接口中有且仅有一个抽象方法的形式</li><li>通常会在接口上加上一个@FunctionalInterface注解，标记该接口必须是满足函数式接口。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Inter</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">cx</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">//使用</span><br>useInter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cx</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;cx&quot;</span>);<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><p><em>IDEA简化成Lambda快捷键：alt+回车</em></p><h4 id="Lambda表达式的省略写法"><a href="#Lambda表达式的省略写法" class="headerlink" title="Lambda表达式的省略写法"></a>Lambda表达式的省略写法</h4><ul><li>参数类型可以省略不写。</li><li>如果只有一个参数，参数类型可以省略，同时 () 也可以省略。</li><li>如果Lambda表达式的方法体代码只有一行代码<br>可以省略大括号不写,同时要省略分号<br>此时，如果这行代码是return语句，必须省略return不写，同时也必须省略 “;” 不写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br>&#125;<br><br>Calculator方法：<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> calculator.calc(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br>System.out.println(result);<br><br>Lambda表达实现：<br>Calculator((a, b) -&gt; a - b);<br></code></pre></td></tr></table></figure><h4 id="匿名内部类-amp-Lambda"><a href="#匿名内部类-amp-Lambda" class="headerlink" title="匿名内部类&amp;Lambda"></a>匿名内部类&amp;Lambda</h4><ul><li><h5 id="使用限制不同"><a href="#使用限制不同" class="headerlink" title="使用限制不同"></a>使用限制不同</h5></li></ul><p>匿名内部类 : 可以操作类, 接口<br>Lambda表达式 : 只能操作函数式接口</p><ul><li><h5 id="实现原理不同"><a href="#实现原理不同" class="headerlink" title="实现原理不同"></a>实现原理不同</h5></li></ul><p>匿名内部类：编译之后，产生一个<strong>单独的.class字节码</strong>文件<br>Lambda表达式：编译之后，没有一个单独的.class字节码文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">use(<span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;匿名内部类&quot;</span>);<br>    &#125;<br>&#125;);<br><br>use(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;Lambda&quot;</span>);<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="窗体、组件、事件"><a href="#窗体、组件、事件" class="headerlink" title="窗体、组件、事件"></a>窗体、组件、事件</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>    <span class="hljs-comment">// 创建窗体对象</span><br>    <span class="hljs-title class_">JFrame</span> frame = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>();<br>    <span class="hljs-comment">// 设置窗体大小 单位：像素</span><br>    frame.<span class="hljs-title function_">setSize</span>(<span class="hljs-number">500</span>, <span class="hljs-number">800</span>);    <br>    <span class="hljs-comment">// 修改窗体的关闭模式 </span><br>  frame.<span class="hljs-title function_">setDefaultCloseOperation</span>(<span class="hljs-title class_">WindowConstants</span>.<span class="hljs-property">EXIT_ON_CLOSE</span>);<br>    <span class="hljs-comment">// 设置窗体标题</span><br>    frame.<span class="hljs-title function_">setTitle</span>(<span class="hljs-string">&quot;窗体&quot;</span>);<br>    <span class="hljs-comment">// 设置窗体可见</span><br>    frame.<span class="hljs-title function_">setVisible</span>(<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="组件的添加"><a href="#组件的添加" class="headerlink" title="组件的添加"></a>组件的添加</h4><ol><li><p>窗体对象.setLayout(null); 取消默认布局</p></li><li><p>创建组件对象</p></li><li><p>组件对象.setBounds(x,y,width,height); 设置摆放位置</p></li><li><p>窗体对象.getContentPane().add(组件对象);</p><p><strong>如果相同位置，先来的会显示，优先级高，后设置的被覆盖；</strong></p><h5 id="窗体中添加按钮组件"><a href="#窗体中添加按钮组件" class="headerlink" title="窗体中添加按钮组件"></a>窗体中添加按钮组件</h5></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">JButton构造方法 :<br>      <span class="hljs-number">1.</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_">JButton</span><span class="hljs-params">()</span> : 创建一个空白的按钮<br>      <span class="hljs-number">2.</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_">JButton</span><span class="hljs-params">(String text)</span> : 创建一个带文本的按钮<br> 注: 如果取消窗体的默认布局, 需要手动指定组件的摆放位置<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">JFrame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>();<br>    frame.setSize(<span class="hljs-number">500</span>,<span class="hljs-number">500</span>);<br>   frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>    frame.setLayout(<span class="hljs-literal">null</span>);              <span class="hljs-comment">// 取消窗体默认布局</span><br>     <br>    <span class="hljs-type">JButton</span> <span class="hljs-variable">btn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;Hello World&quot;</span>);<span class="hljs-comment">// 1. 创建按钮对象</span><br>    btn.setBounds(<span class="hljs-number">60</span>,<span class="hljs-number">60</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);          <span class="hljs-comment">//    设置按钮位置 大小</span><br><br>    frame.getContentPane().add(btn);<span class="hljs-comment">// 2. 将按钮添加到窗体的面板对象中</span><br>    frame.setVisible(<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用JLabel展示文本和图片"><a href="#使用JLabel展示文本和图片" class="headerlink" title="使用JLabel展示文本和图片"></a>使用JLabel展示文本和图片</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"> JLabel构造方法 :<br>        JLabel(String text) 使用指定的文本创建一个 JLabel 对象<br>        JLabel(Icon image) 创建一个具有指定图像的 JLabel 对象<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">JFrame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>();<br>    frame.setSize(<span class="hljs-number">500</span>,<span class="hljs-number">500</span>);<br>    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>    frame.setLayout(<span class="hljs-literal">null</span>);<br><br>    <span class="hljs-type">JLabel</span> <span class="hljs-variable">jl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-string">&quot;你好&quot;</span>);   <span class="hljs-comment">// JLabel展示文本</span><br>    jl.setBounds(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br>    frame.getContentPane().add(jl);<br>    <br>    <span class="hljs-type">JLabel</span> <span class="hljs-variable">imgLabel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(<span class="hljs-string">&quot;&lt;图片位置&gt;&quot;</span>));   <span class="hljs-comment">// JLabel展示图片</span><br>    imgLabel.setBounds(<span class="hljs-number">50</span>, <span class="hljs-number">150</span>, <span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br>    frame.getContentPane().add(imgLabel);<br><br>    frame.setVisible(<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="监听器的使用"><a href="#监听器的使用" class="headerlink" title="监听器的使用"></a>监听器的使用</h4><h5 id="动作事件-ActionListener"><a href="#动作事件-ActionListener" class="headerlink" title="动作事件 : ActionListener"></a>动作事件 : ActionListener</h5><ul><li><p>鼠标点击  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">JButton btn = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JButton(<span class="hljs-string">&quot;按钮&quot;</span>)</span>;  <span class="hljs-comment">//按钮点击事件</span><br>btn.set<span class="hljs-constructor">Bounds(0,0,100,100)</span>;<br>frame.get<span class="hljs-constructor">ContentPane()</span>.add(btn);<br><br>btn.add<span class="hljs-constructor">ActionListener(<span class="hljs-params">new</span> ActionListener()</span> &#123;<br>    @Override<br>    public void action<span class="hljs-constructor">Performed(ActionEvent <span class="hljs-params">e</span>)</span> &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;按钮被点击了&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>空格按键</p><p><em>通过打印e.getKeyCode()的值，快速获取需要的按键代码数值</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">frame.addKeyListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyListener</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyTyped</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>        <span class="hljs-comment">//无法监听：fn，ctrl，esc，上下左右  很少用</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123; <span class="hljs-comment">//点击事件</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">keyCode</span> <span class="hljs-operator">=</span> e.getKeyCode();<br>        <span class="hljs-keyword">if</span>(keyCode == <span class="hljs-number">37</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;左&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(keyCode == <span class="hljs-number">38</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;上&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(keyCode == <span class="hljs-number">39</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;右&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(keyCode == <span class="hljs-number">40</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;下&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//适配器模式</span><br>frame.addKeyListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyAdapter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;键盘&quot;</span>);<br>            &#125;   <span class="hljs-comment">//只需要重写这一个方法</span><br>        &#125;);<br><br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> &#123; <span class="hljs-comment">//松开事件</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h5 id="焦点-程序的注意力集中在了某一个组件上"><a href="#焦点-程序的注意力集中在了某一个组件上" class="headerlink" title="焦点: 程序的注意力集中在了某一个组件上"></a>焦点: 程序的注意力集中在了某一个组件上</h5><p>注: 按钮组件比较特殊, 在创建好之后, 程序的焦点, 默认就在按钮组件上</p><p>​<strong>但按钮组件, 其实不需要占用程序的焦点，通过setFocusable(false); 取消焦点；</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">btn.set<span class="hljs-constructor">Focusable(<span class="hljs-params">false</span>)</span>;<br></code></pre></td></tr></table></figure><p><em>否则：监听点击按钮事件和键盘点击事件同时设置后，焦点在按钮上，操作键盘会显示按钮事件发生，自己的键盘事件无法使用。</em></p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p><strong>设计模式（Design pattern）：</strong>一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。<br> <strong>目的：</strong>使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性、程序的重用性。</p><h4 id="适配器设计模式：解决接口与接口实现类之间的矛盾问题"><a href="#适配器设计模式：解决接口与接口实现类之间的矛盾问题" class="headerlink" title="适配器设计模式：解决接口与接口实现类之间的矛盾问题"></a>适配器设计模式：解决接口与接口实现类之间的矛盾问题</h4><h5 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h5><ol><li>编写一个 xxxAdapter 类,  实现对应接口</li><li>重写内部所有抽象方法,  但方法都是空实现</li><li>让自己的类去继承适配器类, 重写自己需要的方法即可</li><li>为了避免其他类创建适配器类的对象,  使用 abstract 进行修饰</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Inter</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">C</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A_Adapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Inter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">C</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NeedC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A_Adapter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">C</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;只需要重写所需的这个方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="模板设计模式：把抽象类整体看做成一个模板，模板中不能决定的东西定义成抽象方法"><a href="#模板设计模式：把抽象类整体看做成一个模板，模板中不能决定的东西定义成抽象方法" class="headerlink" title="模板设计模式：把抽象类整体看做成一个模板，模板中不能决定的东西定义成抽象方法"></a>模板设计模式：把抽象类整体看做成一个模板，模板中不能决定的东西定义成抽象方法</h4><p><strong>让使用模板的类（继承抽象类的类）去重写抽象方法实现需求</strong> </p><p><strong>目的：</strong>模板设计模式的优势，模板已经定义了通用结构，使用者只需要关心自己需要实现的功能即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Template</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">()</span> &#123;    <span class="hljs-comment">//final修饰，防止子类修改</span><br>        System.out.println(<span class="hljs-string">&quot;模板头部固定代码&quot;</span>);<br>        body();<br>        System.out.println(<span class="hljs-string">&quot;模板尾部固定代码&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">body</span><span class="hljs-params">()</span>;   <span class="hljs-comment">//中间设置为抽象方法，供子类实现</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Happy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Template</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">body</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;模板中要实现的代码&quot;</span>);<br>    &#125;<br>&#125;<br><br>使用：<br>    <span class="hljs-type">Happy</span> <span class="hljs-variable">happy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Happy</span>();<br>    happy.write();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>代码块</tag>
      
      <tag>内部类</tag>
      
      <tag>Lambda表达式</tag>
      
      <tag>窗体的使用</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注解</title>
    <link href="/2023/02/13/%E6%B3%A8%E8%A7%A3/"/>
    <url>/2023/02/13/%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>@FunctionalInterface注解: 标记该接口必须是满足函数式接口。</p><h5 id="函数式接口-接口中有且仅有一个抽象方法的形式"><a href="#函数式接口-接口中有且仅有一个抽象方法的形式" class="headerlink" title="函数式接口:接口中有且仅有一个抽象方法的形式"></a>函数式接口:接口中有且仅有一个抽象方法的形式</h5>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>零碎知识点</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>11_Package包，抽象类，接口，多态</title>
    <link href="/2023/02/10/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Package%E5%8C%85%EF%BC%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%EF%BC%8C%E6%8E%A5%E5%8F%A3%EF%BC%8C%E5%A4%9A%E6%80%81/"/>
    <url>/2023/02/10/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Package%E5%8C%85%EF%BC%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%EF%BC%8C%E6%8E%A5%E5%8F%A3%EF%BC%8C%E5%A4%9A%E6%80%81/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-SE-Package包，抽象类，接口，多态"><a href="#Java-SE-Package包，抽象类，接口，多态" class="headerlink" title="Java SE    Package包，抽象类，接口，多态"></a>Java SE    Package包，抽象类，接口，多态</h1><h2 id="Package包"><a href="#Package包" class="headerlink" title="Package包"></a>Package包</h2><p>包本质来说就是文件夹,  用来管理类文件<br>建包的语法格式：package 域名倒写.自定义名称。 通常小写。</p><h4 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h4><ul><li>相同包下的类可以直接访问，不同包下的类必须导包,才可以使用。       <em>格式：import 包名.类名;</em></li><li>假如一个类中需要用到不同类，而这个两个类的名称是一样的，那么默认只能导入一个类，另一个类要带包名访问。</li></ul><h5 id="具体："><a href="#具体：" class="headerlink" title="具体："></a>具体：</h5><p>如果有相同的两个类Student，在不同包下，此时第一次调用会导包，但是如果需要用到另一个***.***.b.Student时，就要用全类名创建对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> ***.***.a.Student;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>    stu.eat();<br>    com.itheima.b.<span class="hljs-type">Student</span> <span class="hljs-variable">stu2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.itheima.b.Student();  <span class="hljs-comment">// 使用全类名创建对象 : 包名 + 类名</span><br>    stu2.sleep();<br>&#125;<br></code></pre></td></tr></table></figure><p>同理，如果创建类名为Scanner的类，和util中的重名，将无法正常导包使用Scanner，需要用下述的  <strong>全类名</strong> 格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Scanner</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        java.util.<span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(System.in);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul><li>抽象方法：将共性的行为（方法）抽取到父类之后，发现该方法的实现逻辑无法在父类中给出具体明确，该方法就可以定义为抽象方法。</li></ul><p>​定义格式：public abstract 返回值类型 方法名(参数列表);</p><ul><li>抽象类：如果一个类中存在抽象方法，那么该类就必须声明为抽象类</li></ul><p>​定义格式：public abstract class 类名{}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;猫&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;狗&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>1.抽象类不能实例化</p><p>​<em>如果抽象类允许创建对象, 就可以调用内部没有方法体的抽象方法,没有意义</em></p><p>2.抽象类存在构造方法</p><p>​<em>交给子类, 通过super进行访问，进行初始化等功能实现</em></p><p>3.抽象类中可以存在普通方法</p><p>​<em>子类继承来使用</em></p><p>4.抽象类的子类<br>        <em>1). 要么重写抽象类中的所有抽象方法</em><br>        <em>2). 要么成为抽象类</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showA</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showA</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showB</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showB</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="abstract-关键字的冲突"><a href="#abstract-关键字的冲突" class="headerlink" title="abstract 关键字的冲突"></a>abstract 关键字的冲突</h4><ul><li>final：被 abstract 修饰的方法，强制要求子类重写，被 final 修饰的方法子类不能重写</li><li>private：被 abstract 修饰的方法，强制要求子类重写，被 private 修饰的方法子类不能重写</li><li>static：被 static 修饰的方法可以类名调用，类名调用抽象方法没有意义</li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>体现的思想是对<strong>规则</strong>的声明</p><p>思路: 如果发现一个类, 所有的组成, 都是抽象方法*[ 没有成员变量，没有普通方法时 ]*</p><p>​            <strong>这种类, 我们通常会设计为Java中的接口, 因为现在这个类存在的唯一价值, 就只是声明规则了</strong></p><hr><h4 id="定义格式-interface-接口名"><a href="#定义格式-interface-接口名" class="headerlink" title="定义格式:    interface 接口名 {}"></a>定义格式:    interface 接口名 {}</h4><p>注意: 接口不允许实例化</p><p>接口和类之间是实现关系, 通过implements关键字来完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">class 类名 implements 接口名 &#123;&#125;<br></code></pre></td></tr></table></figure><p>实现类(接口的子类)的两种方式:</p><pre><code class="hljs">               1. 重写所有抽象方法</code></pre><ol start="2"><li>将实现类变成抽象类  [此时还是不能实例化，要再继承类，一般不用]</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Inter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InterImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Inter</span> &#123;<br>    <span class="hljs-built_in">super</span>()； <span class="hljs-comment">//此时是调用Object的构造方法，不是Inter的</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;A&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;B&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>所有的类都会默认继承Object类;</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">super();  <span class="hljs-comment">// IDEA中ctrl+点击查看方法的具体实现---&gt;Object的构造方法</span><br></code></pre></td></tr></table></figure><h4 id="接口的成员特点"><a href="#接口的成员特点" class="headerlink" title="接口的成员特点"></a>接口的成员特点</h4><p>1.成员变量 :  只能定义常量, 因为系统会默认加入三个关键字<br>                  public static final      <em>这三个关键字没有顺序关系</em></p><p>2.成员方法 :  只能是抽象方法, 因为系统会默认加入两个关键字  <em><strong>注：JDK8 和 JDK9 中有一些新特性</strong></em>  见后续补充<br>                  public abstract</p><p>3.构造方法 :  没有</p><p><strong>即</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyInter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NUM</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;   <span class="hljs-comment">//final命名规则：大写</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="接口和类之间的各种关系"><a href="#接口和类之间的各种关系" class="headerlink" title="接口和类之间的各种关系 :"></a>接口和类之间的各种关系 :</h4><ul><li><p>类和类之间 : 继承关系, 只支持单继承, <strong>不支持多继承</strong>, 但是可以多层继承</p></li><li><p>类和接口之间 : 实现关系, 可以单实现, <strong>多实现</strong>, <strong>同时可以在继承一个类的同时, 实现多个接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fu</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;此时不需要再重写了&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">showA</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">showB</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fu</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A</span>, B &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showA</span><span class="hljs-params">()</span> &#123;  <span class="hljs-comment">//interface A中的方法</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showB</span><span class="hljs-params">()</span> &#123;   <span class="hljs-comment">//interface B中的方法</span><br>    &#125;<br>    <br>    <span class="hljs-comment">//注：A,B接口中show()同名，那么只需要实现一个即可，已经继承fu类了，所以不需要在此再次实现</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>接口和接口之间 : 继承关系, 可以单继承, 也可以<strong>多继承</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">InterA</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">InterB</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">InterC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InterA</span>, InterB &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InterCImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InterC</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;&#125;  <span class="hljs-comment">//同名，实现一个就是实现所有的逻辑了；  如果方法不同名，每一个接口的抽象方法都要实现；</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="抽象类-amp-接口-对比"><a href="#抽象类-amp-接口-对比" class="headerlink" title="抽象类&amp;接口 对比"></a>抽象类&amp;接口 对比</h4><p><strong>抽象类 : 对事物做抽象 (描述事物)</strong><br><strong>接口     : 对行为抽象 (制定规则)</strong></p><ul><li>成员变量 :</li></ul><p>​抽象类 : 可以定义变量, 也可以定义常量<br>​接口 : 只能定义常量 </p><ul><li>成员方法</li></ul><p>​抽象类 : 可以是定义具体方法, 也可以定义抽象方法<br>​接口 : 只能定义抽象方法</p><ul><li>构造方法</li></ul><p>​抽象类 : 有<br>​接口 : 没有</p><p><em>注：接口可以为程序制定规则, 代码更加规范；如果有抽象方法没实现，就无法创建类</em></p> <img src="/2023/02/10/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Package%E5%8C%85%EF%BC%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%EF%BC%8C%E6%8E%A5%E5%8F%A3%EF%BC%8C%E5%A4%9A%E6%80%81/%E6%8E%A5%E5%8F%A3%E7%A4%BA%E4%BE%8B.png" class=""> <h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>同一个行为具有多个不同表现形式或形态的能力</p><h4 id="多态的前提"><a href="#多态的前提" class="headerlink" title="多态的前提 :"></a>多态的前提 :</h4><ul><li>​            有继承 &#x2F; 实现关系</li><li>​            有方法重写</li><li>​            <strong>有父类引用指向子类对象</strong></li></ul><h4 id="多态的好处"><a href="#多态的好处" class="headerlink" title="多态的好处"></a>多态的好处</h4><p><strong>提高了程序的扩展性</strong></p><ol><li><p><strong>对象多态</strong><br>Animal a &#x3D; new Dog();<br>Animal b &#x3D; new Cat();<br>​    <em>好处: 方法的形参定义为父类类型, 这个方法可以接收该父类的任意子类对象</em></p></li><li><p><strong>行为多态</strong><br><em>好处: 同一个方法, 具有多种不同表现形式&#x2F;形态的能力</em></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Polymorphism</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        useAnimal(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>());<br>        useAnimal(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>());<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useAnimal</span><span class="hljs-params">(Animal a)</span> &#123;        <span class="hljs-comment">// Animal a = new Dog()/Cat();</span><br>          a.eat();                                  <span class="hljs-comment">// 行为多态</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;狗&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;猫&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="多态的成员访问特点"><a href="#多态的成员访问特点" class="headerlink" title="多态的成员访问特点"></a>多态的成员访问特点</h4><ul><li>成员变量：编译看左边（父类），执行看左边（父类）</li><li>成员方法：编译看左边（父类），执行看右边（子类）</li></ul><p>​<strong>在编译的时候, 会检查父类中有没有这个方法</strong><br>​        没有 : 编译出错<br>​        有 : 编译通过, 但是运行的时候, 一定会执行子类的方法逻辑</p><p>​                               <strong>原因: 担心你调用的方法, 在父类中是一个抽象方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Inter</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>;<br>&#125;    <span class="hljs-comment">//例如：父类为接口</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Polymorphism</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Fu</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Zi</span>();<br>        System.out.println(f.num);  <span class="hljs-comment">// 10</span><br>        f.show();                   <span class="hljs-comment">// Zi</span><br>        f.print();                  <span class="hljs-comment">// FuStatic</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fu</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Fu&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;FuStatic&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fu</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Zi&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ZiStatic&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>多态创建对象, 调用静态成员时 :  看类名</li></ul><p>​        <em>静态的成员, 推荐类名进行调用</em><br>​        <strong>原因: 静态的成员, 可以使用对象名调用, 但这是一种假象；实际上生成字节码文件后, 会自动将对象名调用, 改成类名调用.</strong></p><h4 id="多态的弊端"><a href="#多态的弊端" class="headerlink" title="多态的弊端"></a>多态的弊端</h4><p>不能使用子类的特有成员</p><h5 id="解决方法——多态中的转型"><a href="#解决方法——多态中的转型" class="headerlink" title="解决方法——多态中的转型"></a>解决方法——多态中的转型</h5><ul><li><p>向上转型</p><p>​从子到父（父类引用指向子类对象）</p></li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">Fu f = <span class="hljs-keyword">new</span> <span class="hljs-type">Zi</span>();   <span class="hljs-comment">//堆内存中开辟空间</span><br></code></pre></td></tr></table></figure><ul><li>向下转型</li></ul><p>​从父到子（将父类引用所指向的对象, 转交给子类类型）</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Zi z <span class="hljs-operator">=</span> (Zi)f<span class="hljs-comment">;      //空间地址赋值给z，加上强转</span><br></code></pre></td></tr></table></figure><p><strong>问题：如果被转的引用类型变量，对应的实际类型和目标类型不是同一种类型，那么在转换的时候就会出现ClassCastException</strong> </p><h6 id="判断工具：关键字-instanceof"><a href="#判断工具：关键字-instanceof" class="headerlink" title="判断工具：关键字 instanceof"></a>判断工具：关键字 instanceof</h6><p><strong>使用格式：  对象名 instanceof 类型</strong><br>判断一个对象是否是一个类的实例<br>即：判断关键字左边的对象，是否是右边的类型，返回boolean类型结果</p><h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><p><strong>实现支付功能，需要支持多种支付方式：支付平台支付、银行卡网银支付、信用卡快捷支付，选择支付方式和输入金额后，输出为：通过—支付了—元。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请选择支付方式:  1. 支付平台支付   2. 银行卡网银支付  3. 信用卡快捷支付&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">choice</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;    <span class="hljs-comment">//重点：引用型先赋null，否则payment.pay(money);会因为没有实例报错</span><br><br>        <span class="hljs-keyword">switch</span> (choice) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> :<br>                payment = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PlatformPaymentImpl</span>();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                payment = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BankCardPaymentImpl</span>();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                payment = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreditCardPaymentImpl</span>();<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;请输入支付金额: &quot;</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> sc.nextDouble();<br>        payment.pay(money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BankCardPaymentImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Payment</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;通过银行卡网银支付了:&quot;</span> + money + <span class="hljs-string">&quot;元!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreditCardPaymentImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Payment</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;通过信用卡快捷支付:&quot;</span> + money + <span class="hljs-string">&quot;元!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PlatformPaymentImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Payment</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;通过支付平台支付了:&quot;</span> + money + <span class="hljs-string">&quot;元!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Payment</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="补充：JDK-8-9对接口的新特性"><a href="#补充：JDK-8-9对接口的新特性" class="headerlink" title="补充：JDK 8,9对接口的新特性"></a>补充：JDK 8,9对接口的新特性</h2><h3 id="JDK8版本接口特性"><a href="#JDK8版本接口特性" class="headerlink" title="JDK8版本接口特性:"></a>JDK8版本接口特性:</h3><h5 id="1-允许定义非抽象方法-需要加入default关键字"><a href="#1-允许定义非抽象方法-需要加入default关键字" class="headerlink" title="1.允许定义非抽象方法, 需要加入default关键字"></a>1.允许定义非抽象方法, 需要加入default关键字</h5><p>​作用: 解决接口的升级问题[ 接口中添加新方法，实现更多功能 ， 不影响之前的 ]</p><p>​注意事项:</p><ol><li>public可以省略, 但是default不能省略</li><li>默认方法, 实现类是允许重写的, 但是需要去掉default关键字</li><li>如果实现了多个接口, <strong>多个接口中存在相同的默认方法</strong>, 实现类必须重写默认方法 [因为不知道要实现哪一个默认方法，必须重写]</li></ol><h5 id="2-允许定义静态方法"><a href="#2-允许定义静态方法" class="headerlink" title="2.允许定义静态方法"></a>2.允许定义静态方法</h5><p>​理解: 既然接口已经允许方法带有方法体了, 干脆也放开静态方法, 可以类名调用</p><p>​注意事项:</p><pre><code class="hljs">        1.public可以省略, 但是static不能省略</code></pre><p>​            2.接口中的静态方法, 只允许接口名进行调用, 不允许实现类通过对象调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span> &#123;<br>    [<span class="hljs-keyword">public</span>] <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    [<span class="hljs-keyword">public</span>] <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">function</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDK9-接口特性"><a href="#JDK9-接口特性" class="headerlink" title="JDK9 接口特性"></a>JDK9 接口特性</h3><p><strong>接口中允许定义 private 私有方法</strong></p><p>接口中静态方法的定义格式：<br>格式1：private 返回值类型 方法名(参数列表) {}<br>范例1：private void show() {}</p><p>格式2：private static 返回值类型 方法名(参数列表) {}<br>范例2：private static void method() {}</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">interface</span> <span class="hljs-title">Inter</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span>()</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">start</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;start方法执行...&quot;</span>);<br>        log();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">end</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;end方法执行...&quot;</span>);<br>        log();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;日志记录&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>好处：抽取log()方法为private static，这样可以在内部静态方法中使用，减少冗余代码并且不被其他调用。</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>Package包</tag>
      
      <tag>抽象类</tag>
      
      <tag>接口</tag>
      
      <tag>多态</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10_JavaSE学习笔记[static，final关键字及继承的使用]</title>
    <link href="/2023/02/09/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-static%EF%BC%8Cfinal%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%8A%E7%BB%A7%E6%89%BF%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/02/09/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-static%EF%BC%8Cfinal%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%8A%E7%BB%A7%E6%89%BF%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-SE-static，final关键字及继承的使用"><a href="#Java-SE-static，final关键字及继承的使用" class="headerlink" title="Java SE    static，final关键字及继承的使用"></a>Java SE    static，final关键字及继承的使用</h1><h2 id="Static关键字"><a href="#Static关键字" class="headerlink" title="Static关键字"></a>Static关键字</h2><p>static 关键字 : 修饰符, 可以修饰成员变量, 成员方法</p><p>static 成员变量：共享数据</p><p>static 成员方法：常用于工具类</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h4><pre><code class="hljs">      1. 被类的所有对象所共享      2. 多了一种调用方式, 可以通过类名进行调用 (推荐使用类名调用)      3. 随着类的加载而加载, 优先于对象存在</code></pre><h4 id="内存图示意："><a href="#内存图示意：" class="headerlink" title="内存图示意："></a>内存图示意：</h4> <img src="/2023/02/09/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-static%EF%BC%8Cfinal%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%8A%E7%BB%A7%E6%89%BF%E7%9A%84%E4%BD%BF%E7%94%A8/1.png" class=""> <p><em>解释：new创建对象的堆内存地址中会链接到静态成员变量区，这样调用该对象时就可以使用 static 成员变量了。</em></p><h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><ul><li>static 方法中,  只能访问静态成员 (直接访问)</li><li>static 中不允许使用 this 关键字</li></ul><p>原因：static是在代码加载时就生成了，不需要生成对象再使用。所以static方法中无法调用还没生成对象的非静态成员，同样this关键字是属于对象的，没创建对象前无法使用。</p><h4 id="static-成员方法"><a href="#static-成员方法" class="headerlink" title="static 成员方法"></a>static 成员方法</h4><ol><li><p>成员方法什么时候加入 static</p><ul><li>常用于制作工具类</li></ul></li><li><p>工具类: 用来实现某种功能，而不是描述事物的类</p></li><li><p>如果一个类中的所有方法都是 static 所修饰的</p><p>则——<strong>私有该类的构造方法</strong>     <em>目的 : 为了不让其他类再创建该类对象，如  System类</em></p></li></ol><p>示例：ArrayTools用来做数组的操作，这里仅写了一个求最大值的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTools</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ArrayTools</span><span class="hljs-params">()</span>&#123;&#125;   <span class="hljs-comment">//私有构造方法</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMax</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; max) &#123;<br>                max = arr[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br><span class="hljs-comment">// 主方法中调用ArrayTools.printArray(arr);</span><br></code></pre></td></tr></table></figure><h4 id="main-方法-详细分析"><a href="#main-方法-详细分析" class="headerlink" title="main 方法  详细分析"></a>main 方法  详细分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>public：被JVM调用，访问权限足够大</p></li><li><p>static： 被JVM调用，不用创建对象</p><p>​<em>注：因为main方法是静态的，故测试类中其他方法也需要是静态的</em></p></li><li><p>void：  被JVM调用，不需要给JVM返回值</p></li><li><p>main：一个通用的名称，虽然不是关键字，但是被JVM识别</p></li><li><p>String[] args: 以前用于接收键盘录入数据的，现在无作用</p></li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承：让类与类之间产生关系（子父类关系），子类可以直接使用父类中非私有的成员；[私有成员变量通过调用公有方法使用，get()，set()]</p><p>格式：public class 子类名 extends 父类名 { }</p><p>使用时机：当类与类之间，存在相同 (共性) 的内容，并且产生了 is a 的关系，就可以考虑使用继承，来优化代码。</p><h4 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h4><p>子父类中, 出现了方法声明一模一样的方法 (方法名, 参数, 返回值)</p><p>​    <strong>在创建子类对象, 调用方法的时候, 会优先使用子类的方法逻辑</strong><br>​            <em>这虽然是就近原则的现象, 但其实是子类的方法, 对父类的方法, 进行了重写操作</em></p><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景:"></a>使用场景:</h5><p>当子类需要父类的方法, 但父类的方法逻辑不合适 (需要进行修改 | 增强)  就需要对父类的方法进行重写</p><ul><li><h4 id="this，super的使用"><a href="#this，super的使用" class="headerlink" title="this，super的使用"></a>this，super的使用</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fu</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fu</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>System.out.println( num  );           <span class="hljs-comment">// 30    </span><br>        System.out.println( <span class="hljs-built_in">this</span>.num );       <span class="hljs-comment">// 20        </span><br>        System.out.println( <span class="hljs-built_in">super</span>.num );      <span class="hljs-comment">// 10    </span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>子类重写父类方法，需要保证方法声明完全一致（方法名，参数，返回值类型需要保持一致）</p><p>@Override：识别出方法是不是重写的</p><h4 id="方法重载-amp-方法重写-比较"><a href="#方法重载-amp-方法重写-比较" class="headerlink" title="方法重载 &amp; 方法重写   比较"></a>方法重载 &amp; 方法重写   比较</h4><ul><li>方法重载(Overload) : 在同一个类中, 方法名相同, 参数不同(类型不同, 个数不同, 顺序不同), 与返回值无关</li><li>方法重写(Override) : 在子父类当中, 出现了方法声明一模一样的方法 (方法名, 参数, 返回值)</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>父类中私有方法不能被重写</li><li>子类重写父类方法时，访问权限必须大于等于父类</li></ul><table><thead><tr><th>private[最高]</th></tr></thead><tbody><tr><td>(default)</td></tr><tr><td>protected</td></tr><tr><td>public</td></tr></tbody></table><h5 id="protected详述："><a href="#protected详述：" class="headerlink" title="protected详述："></a>protected详述：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fu</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;fu&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> ***.Fu;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    和Fu是不同包的</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fu</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">super</span>.show();     <span class="hljs-comment">//用super调用Fu中的protected方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    Zi类 和 Test类是同包下的</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Zi</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Zi</span>();<br>        z.method();      <span class="hljs-comment">//通过调用method()方法，间接调用show()，很麻烦，通常不用</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="继承的特点"><a href="#继承的特点" class="headerlink" title="继承的特点"></a>继承的特点</h4><p><strong>Java只支持单继承，不支持多继承，但支持多层继承</strong></p><p><em>解释：</em></p><p>如果是多继承：  若父类A,B有相同的方法，子类C不知道调用哪个；</p><p>多层继承：有方法重写的机制，继承只有一个，是唯一的；可以实现类似”爷-父-子”的多级继承关系；</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>不能被继承： 构造方法要和类名保持一致，继承下来父类的构造方法名不匹配；</p><p>子类初始化之前，要先完成</p><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><p>除了Object类（最顶层的类）, 在所有构造方法的第一行代码, 都默认隐藏了一句代码——super();<br>&#x2F;&#x2F;    <em>通过这句代码, 访问父类的空参数构造方法</em></p><p>总结： Java当中所有的类, 都直接或者间接的继承到了 Object 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="具体案例实现"><a href="#具体案例实现" class="headerlink" title="具体案例实现"></a>具体案例实现</h4><p>需求:<br>        Person：姓名, 年龄</p><p>​        Teacher: 姓名, 年龄, teach()</p><p>​        Student: 姓名, 年龄, 成绩,study()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, age);   <span class="hljs-comment">//重点：super调用父类</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">teach</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span> + <span class="hljs-built_in">super</span>.getName() + <span class="hljs-string">&quot;, 年龄：&quot;</span> + <span class="hljs-built_in">super</span>.getAge());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, age);     <span class="hljs-comment">//重点：super调用父类</span><br>        <span class="hljs-built_in">this</span>.score = score;   <span class="hljs-comment">// 初始私有成员变量</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span> + <span class="hljs-built_in">super</span>.getName() + <span class="hljs-string">&quot;, 年龄：&quot;</span> + <span class="hljs-built_in">super</span>.getAge() + <span class="hljs-string">&quot;岁, 成绩：&quot;</span> + score );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码的堆内存中的存储情况：</p><p>new一个Student对象时，会同时又父类Person(super)，存放其成员变量；</p> <img src="/2023/02/09/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-static%EF%BC%8Cfinal%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%8A%E7%BB%A7%E6%89%BF%E7%9A%84%E4%BD%BF%E7%94%A8/2.png" class=""> <p><strong>父类的私有成员变量其实是继承到的，只是不能直接访问</strong></p><h4 id="this，super"><a href="#this，super" class="headerlink" title="this，super"></a>this，super</h4><ul><li>this：代表本类对象的引用</li><li>super：代表父类存储空间的标识</li></ul><p>super 调用父类成员的省略规则 :</p><p>​            super.父类成员变量 | super.父类成员方法()   &lt;实际上，是this的使用可以省略，子类继承父类的这些变量&#x2F;方法&gt;</p><p>​            -&gt; 被调用的变量和方法, 在子类中不存在, super.可以直接省略的</p><table><thead><tr><th><strong>关键字</strong></th><th><strong>访问成员变量</strong></th><th><strong>访问成员方法</strong></th><th><strong>访问构造方法</strong></th></tr></thead><tbody><tr><td>this</td><td>this.本类成员变量;</td><td>this.本类成员方法();</td><td>this(); this(…);本类构造方法</td></tr><tr><td>super</td><td>super.父类成员变量;</td><td>super.父类成员方法();</td><td>super(); super(…);父类构造方法</td></tr></tbody></table><p><strong>注意：this() 和 super() 都在争夺构造方法第一行的位置   —&gt;   二者不能共存;</strong></p><p><em>IDEA中的提示：’super()’ &#x2F; ‘this()’   调用必须是构造函数主体中的第一条语句</em></p><h6 id="this-的使用场景"><a href="#this-的使用场景" class="headerlink" title="this()的使用场景"></a>this()的使用场景</h6><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">开闭原则 : 对功能扩展做开放, 对修改代码做关闭<br></code></pre></td></tr></table></figure><p>示例</p><p>项目Version1.0版本 : 有3个成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> &#123;<br>    <span class="hljs-built_in">super</span>();<br>    <span class="hljs-built_in">this</span>.a = a;<br>    <span class="hljs-built_in">this</span>.b = b;<br>    <span class="hljs-built_in">this</span>.c = c;<br>&#125;<br><span class="hljs-comment">// 使用时</span><br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>项目Version1.1版本 : 新增一个成员变量</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//新增构造方法</span><br>public <span class="hljs-constructor">A(<span class="hljs-params">int</span> <span class="hljs-params">a</span>, <span class="hljs-params">int</span> <span class="hljs-params">b</span>, <span class="hljs-params">int</span> <span class="hljs-params">c</span>, <span class="hljs-params">int</span> <span class="hljs-params">d</span>)</span> &#123;<br>    this(a, b, c);<br>    this.d = d;<br>&#125;<br><span class="hljs-comment">//原本代码A a = new A(1, 2, 3);使用不变</span><br>A a = <span class="hljs-keyword">new</span> <span class="hljs-constructor">A(1, 2, 3 , 4)</span>;<br></code></pre></td></tr></table></figure><p>此时内部不掉用super(),因为不能共存，在this(a,b,c)调用的构造方法中使用super();</p><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><p>final 关键字是最终的意思，修饰符，可用于修饰方法，类，变量</p><h4 id="final-修饰的特点"><a href="#final-修饰的特点" class="headerlink" title="final 修饰的特点"></a>final 修饰的特点</h4><ul><li><p>修饰方法：表明该方法是最终方法，不能被重写</p></li><li><p>修饰类：表明该类是最终类，不能被继承（可以有父类）              |  如String类</p></li><li><p>修饰变量：表明该变量是常量，不能再次被赋值</p></li></ul><h4 id="修饰变量的细节"><a href="#修饰变量的细节" class="headerlink" title="修饰变量的细节"></a>修饰变量的细节</h4><ul><li>变量是基本数据类型：数据值不能发生改变</li><li>变量是引用数据类型：引用类型的地址值不能发生改变，但是地址里面的内容是可以发生改变的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-comment">// arr = new int[3];   报错</span><br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>;   <span class="hljs-comment">//成功编译</span><br></code></pre></td></tr></table></figure><ul><li>成员变量如果被 final 修饰，需要在构造方法结束之前完成赋值</li></ul><h4 id="final修饰成员变量的注意事项"><a href="#final修饰成员变量的注意事项" class="headerlink" title="final修饰成员变量的注意事项"></a>final修饰成员变量的注意事项</h4><ol><li><p>final修饰成员变量, 不允许修饰默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> num ;  <span class="hljs-comment">//只有这一条默认值语句的话，会报错； 必须初始化赋值</span><br></code></pre></td></tr></table></figure></li><li><p>final修饰成员变量的初始化时机</p><p>1). 在定义的时候直接赋值<br>2). 在构造方法中完成赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> num ;   <span class="hljs-comment">//final int num = 20;  构造语句中不能再赋值</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span> <span class="hljs-params">()</span>&#123;<br>num = <span class="hljs-number">20</span>；<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="final修饰变量的命名规范"><a href="#final修饰变量的命名规范" class="headerlink" title="final修饰变量的命名规范"></a>final修饰变量的命名规范</h4><p>​      如果变量名是一个单词：所有字母大写  max  MAX<br>​      如果变量名是多个单词：所有字母大写, 中间使用下划线分割   maxValue    MAX_VALUE</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>static</tag>
      
      <tag>final</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9_List集合的使用,学生管理系统的实现</title>
    <link href="/2023/02/07/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B009/"/>
    <url>/2023/02/07/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B009/</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习笔记9"><a href="#Java学习笔记9" class="headerlink" title="Java学习笔记9"></a>Java学习笔记9</h1><h2 id="集合-List"><a href="#集合-List" class="headerlink" title="集合  List"></a>集合  List</h2><h3 id="ArrayList集合的使用"><a href="#ArrayList集合的使用" class="headerlink" title="ArrayList集合的使用:"></a>ArrayList集合的使用:</h3><p>​    创建String, StringBuilder, ArrayList类的对象, 打印对象名, 都没有看到地址值, 而是元素内容</p><h5 id="1-构造方法"><a href="#1-构造方法" class="headerlink" title="1.构造方法 :"></a>1.构造方法 :</h5><p>public ArrayList() : 创建一个空的集合容器</p><h5 id="2-集合容器的创建"><a href="#2-集合容器的创建" class="headerlink" title="2.集合容器的创建 :"></a>2.集合容器的创建 :</h5><p>ArrayList list &#x3D; new ArrayList();<br>可以添加任意类型数据，会导致集合内的数据类型不一致，处理时有问题。</p><p><strong>解决：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">ArrayList<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> list = new ArrayList<span class="hljs-tag">&lt;&gt;</span>();   //jdk7开始右边<span class="hljs-tag">&lt;&gt;</span>内不用写了，自动填入前面<span class="hljs-tag">&lt;&gt;</span>的内容<br></code></pre></td></tr></table></figure><p>​            &lt;&gt; : 泛型<br>​                        使用泛型, 可以对集合中存储的数据, 进行类型限制<br>​                        <strong>泛型中, 不允许编写基本数据类型</strong><br>​                        在集合中, 存储 整数, 小数, 字符… 这些数据,类型的方法：<br>​                                                          ————<strong>使用基本数据类型对应的包装类</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">byte</span>           <span class="hljs-keyword">Byte</span><br><span class="hljs-keyword">short</span>          <span class="hljs-keyword">Short</span><br><span class="hljs-keyword">int</span>            Integer    <br><span class="hljs-keyword">long</span>           <span class="hljs-keyword">Long</span><br><span class="hljs-keyword">float</span>          <span class="hljs-keyword">Float</span><br><span class="hljs-keyword">double</span>         <span class="hljs-keyword">Double</span><br><span class="hljs-keyword">boolean</span>        <span class="hljs-keyword">Boolean</span><br><span class="hljs-keyword">char</span>           Character  <br></code></pre></td></tr></table></figure><p><em>注：没有隐式转换，不需要考虑</em></p><h3 id="ArrayList-常用成员方法"><a href="#ArrayList-常用成员方法" class="headerlink" title="ArrayList 常用成员方法 :"></a>ArrayList 常用成员方法 :</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">ArrayList<span class="hljs-tag">&lt;<span class="hljs-name">E</span>&gt;</span> list<br></code></pre></td></tr></table></figure><h5 id="1-增"><a href="#1-增" class="headerlink" title="1.增 :"></a>1.增 :</h5><p>public boolean add(E e) :    将指定的元素添加到此列表的尾部   &#x2F;&#x2F;永远返回true，一般不用数据接收<br>public void add(int index, E element) : 在指定索引位置, 添加对应的元素 (插队)</p><h5 id="2-删"><a href="#2-删" class="headerlink" title="2.删"></a>2.删</h5><p>public E remove(int index) :   根据索引做删除, 返回被删除掉的元素<br>public boolean remove(Object o) :               根据元素做删除, 删除首次出现的，返回是否删除成功的状态</p><h5 id="3-改"><a href="#3-改" class="headerlink" title="3.改"></a>3.改</h5><p>public E set(int index, E element) :                修改指定索引位置, 为对应的元素, 返回被覆盖掉的元素</p><h5 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h5><p>public E get(int index)  :                                   根据索引, 获取集合中的元素<br>public int size()  :                                               返回集合中元素的个数</p><h5 id="实际使用："><a href="#实际使用：" class="headerlink" title="实际使用："></a>实际使用：</h5><p><em>需求1：创建一个存储字符串的集合, 内部存储字符串元素</em><br>        使用程序实现在控制台遍历该集合, 将字符串长度为3的输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>list.add(<span class="hljs-string">&quot;abcdf&quot;</span>);<br>list.add(<span class="hljs-string">&quot;sanio&quot;</span>);<br>list.add(<span class="hljs-string">&quot;happy&quot;</span>);<br>list.add(<span class="hljs-string">&quot;sad&quot;</span>);<br>list.add(<span class="hljs-string">&quot;try&quot;</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> list.get(i);<br>    <span class="hljs-keyword">if</span>(s.length() == <span class="hljs-number">3</span>)&#123;<br>        System.out.println(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>需求2: 创建一个存储String的集合,内部存储（test,张三,李四,test,test）字符串</em><br>        删除所有的test字符串,删除后,将集合剩余元素打印在控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> list.get(i);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;test&quot;</span>.equals(s))&#123;<br>        list.remove(i);<br>        i--;                     <span class="hljs-comment">//重点，删除后先i-- 再i++ 回来</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结: 在遍历集合的过程中, 有删除操作</p><pre><code class="hljs">           1. 正序遍历 : 不要忘记   --操作           2. 倒序遍历：不需要，正常遍历即可</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> list.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> list.get(i);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;test&quot;</span>.equals(s))&#123;<br>        list.remove(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>注：变量和常量比较</em></p><p><em>要用常量.equals(变量)； 否则变量.equals(常量)可能发生空指针异常；</em></p><h3 id="学生管理系统的搭建——集合的增删改查"><a href="#学生管理系统的搭建——集合的增删改查" class="headerlink" title="学生管理系统的搭建——集合的增删改查"></a>学生管理系统的搭建——集合的增删改查</h3><p>需求：实现学生信息（id, name, age,birthday）的增删改查，学号不允许重复。</p><h5 id="Student类"><a href="#Student类" class="headerlink" title="Student类"></a>Student类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String birthday;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String id, String name, <span class="hljs-type">int</span> age, String birthday)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.birthday = birthday;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBirthday</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> birthday;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBirthday</span><span class="hljs-params">(String birthday)</span> &#123;<br>        <span class="hljs-built_in">this</span>.birthday = birthday;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="StudentManage"><a href="#StudentManage" class="headerlink" title="StudentManage"></a>StudentManage</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;Student&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;--------学生管理系统--------&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;1 添加学生&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;2 删除学生&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;3 修改学生&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;4 查看学生&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;5 退出&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;请输入您的选择:&quot;</span>);<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">choice</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-keyword">switch</span> (choice) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    addStudent(list);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    deleteStudentById(list);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    updateStudentInfoById(list);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                    queryStudentInfos(list);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                    System.out.println(<span class="hljs-string">&quot;感谢您的使用, 再见&quot;</span>);<br>                    System.exit(<span class="hljs-number">0</span>);          <span class="hljs-comment">// 终止正在运行的JVM虚拟机;对应之前的lo标记循环再break</span><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入有误, 请检查&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 键盘录入学生信息, 封装学生对象, 存入集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(ArrayList&lt;Student&gt; list)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入学生学号:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            id = sc.next();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> getIndex(id, list);<br>            <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">// 学号在集合查询-1，代表为空，可以使用</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;您输入的学号已被占用, 请重新输入!&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;请输入学生姓名:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sc.next();<br>        System.out.println(<span class="hljs-string">&quot;请输入学生年龄:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        System.out.println(<span class="hljs-string">&quot;请输入学生生日:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">birthday</span> <span class="hljs-operator">=</span> sc.next();<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(id, name, age, birthday);<br>        list.add(stu);<br>        System.out.println(<span class="hljs-string">&quot;添加成功!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据学号修改集合中的学生信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateStudentInfoById</span><span class="hljs-params">(ArrayList&lt;Student&gt; list)</span> &#123;<br>        <span class="hljs-comment">// 1. 键盘录入要修改的学生学号</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入要修改的学生学号:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">updateId</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-comment">// 2. 调用 getIndex 方法查找学号对应的索引</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> getIndex(updateId, list);<br>        <span class="hljs-comment">// 3. 如果学号不存在, 给出错误提示</span><br>        <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;查无此人, 修改失败!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 4. 如果学号存在, 录入新的学生信息, 完成修改</span><br>            System.out.println(<span class="hljs-string">&quot;请输入新的学生姓名:&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sc.next();<br>            System.out.println(<span class="hljs-string">&quot;请输入新的学生年龄:&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            System.out.println(<span class="hljs-string">&quot;请输入新的学生生日:&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">birthday</span> <span class="hljs-operator">=</span> sc.next();<br><br>            <span class="hljs-comment">// 将新录入的学生信息, 封装为学生对象</span><br>            <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(updateId, name, age, birthday);<br>            list.set(index, stu);<br>            System.out.println(<span class="hljs-string">&quot;修改成功!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据学号删除集合中的学生</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteStudentById</span><span class="hljs-params">(ArrayList&lt;Student&gt; list)</span> &#123;<br>        <span class="hljs-comment">// 1. 键盘录入要删除的学生学号</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入您要删除的学生学号:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-comment">// 2. 调用getIndex方法, 查找学号在集合中的索引</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> getIndex(id, list);<br>        <span class="hljs-comment">// 3. 判断方法的返回值是不是 -1</span><br>        <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 3.1 是-1, 说明学号不存在, 给出错误提示</span><br>            System.out.println(<span class="hljs-string">&quot;查无此人, 删除失败!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 3.2 不是-1, 说明学号存在, 根据索引做删除</span><br>            list.remove(index);<br>            System.out.println(<span class="hljs-string">&quot;删除成功!&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查看学生</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryStudentInfos</span><span class="hljs-params">(ArrayList&lt;Student&gt; list)</span> &#123;<br>        <span class="hljs-keyword">if</span> (list.size() == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;查无信息, 请重试!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;学号\t\t\t姓名\t年龄\t生日&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>                <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> list.get(i);<br>                System.out.println(stu.getId() + <span class="hljs-string">&quot;\t&quot;</span> + stu.getName() + <span class="hljs-string">&quot;\t&quot;</span> + stu.getAge() + <span class="hljs-string">&quot;\t&quot;</span> + stu.getBirthday());<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据学号, 集合中查找对应的索引</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getIndex</span><span class="hljs-params">(String id, ArrayList&lt;Student&gt; list)</span> &#123;<br>        <span class="hljs-comment">// 1. 遍历集合, 获取到每一个学生对象</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> list.get(i);<br>            <span class="hljs-comment">// stu.getId() : 从集合中取出的学生学生</span><br>            <span class="hljs-comment">// id : 要查找的学号</span><br>            <span class="hljs-comment">// 2. 比对</span><br>            <span class="hljs-keyword">if</span> (stu.getId().equals(id)) &#123;<br>                <span class="hljs-comment">// 3. 找到了, 返回正确的索引</span><br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 4. 没找到, 返回-1</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注：System.exit(0);          &#x2F;&#x2F; 终止正在运行的JVM虚拟机， 通常用0表示正常退出</strong></p><p><strong>效果同之前的lo标记循环再break lo；</strong></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>List集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常量优化机制</title>
    <link href="/2023/02/06/%E5%B8%B8%E9%87%8F%E4%BC%98%E5%8C%96%E6%9C%BA%E5%88%B6/"/>
    <url>/2023/02/06/%E5%B8%B8%E9%87%8F%E4%BC%98%E5%8C%96%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>回头总结一下</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>零碎知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>常量优化机制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8_API帮助文档的使用，String类</title>
    <link href="/2023/02/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B008/"/>
    <url>/2023/02/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B008/</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习笔记8"><a href="#Java学习笔记8" class="headerlink" title="Java学习笔记8"></a>Java学习笔记8</h1><h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><h3 id="API帮助文档"><a href="#API帮助文档" class="headerlink" title="API帮助文档"></a>API帮助文档</h3><ol><li><p>在索引位置搜索自己要查看的类</p></li><li><p>看包<br> 目的: 是不是java.lang包(核心包), 是的话不需要编写导包代码(import)<br>                     - 不是java.lang包, 需要编写导包代码</p></li><li><p>看这个类的介绍<br> 目的: 搞清楚这个类的作用</p></li><li><p>看这个类的构造方法<br> 目的: 为了将该类的对象, 创建出来</p></li><li><p>看这个类的成员方法(方法摘要)</p><pre><code class="hljs"> 1. 方法名 2. 参数 3. 返回值 4. 介绍</code></pre><p> 示例：Scanner的使用</p> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Scanner键盘录入字符串 :<br><br>    <span class="hljs-function">String <span class="hljs-title">next</span>() : 遇到了空格, 或者是tab键就不再录入了</span><br><span class="hljs-function">    String <span class="hljs-title">nextLine</span>() : 以回车作为录入的结束标记</span><br><span class="hljs-function"></span><br><span class="hljs-function">    弊端:</span><br><span class="hljs-function">            1. <span class="hljs-title">next</span>() : 数据可能录入不完整</span><br><span class="hljs-function">            2. <span class="hljs-title">nextLine</span>() : 之前调用过<span class="hljs-title">nextInt</span>(), <span class="hljs-title">nextDouble</span>(), <span class="hljs-title">nextFloat</span>()...</span><br><span class="hljs-function">                                <span class="hljs-title">nextLine</span>()方法, 就直接使用上面用剩下的回车键，直接结束</span><br><span class="hljs-function">    解决：  先把<span class="hljs-title">next</span>()的回车键使用掉再调用<span class="hljs-title">nextLint</span>()</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="String类的特点"><a href="#String类的特点" class="headerlink" title="String类的特点 :"></a>String类的特点 :</h3><ul><li><p>Java 程序中所有双引号字符串, 都是String这个类的对象</p></li><li><p>字符串一旦被创建, 就不可更改, 字符串内容不可改变<br>   如果想要更改, 只能使用新的对象, 做替换</p></li><li><p>String字符串虽然不可改变, 但是可以被共享</p><p>   <strong>字符串常量池: 当我们使用双引号创建字符串对象时, 会检查常量池中是否存在该数据</strong><br>         不存在 : 创建      存在 : 复用</p></li></ul><h3 id="String类常见构造方法"><a href="#String类常见构造方法" class="headerlink" title="String类常见构造方法 :"></a>String类常见构造方法 :</h3><ul><li><p>​    public String() : 创建一个空白字符串, 里面不含任何内容</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">String</span> s1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>();<br></code></pre></td></tr></table></figure></li><li><p>​    public String(char[] chs) : 根据传入的字符数组, 创建字符串对象</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">char</span>[] chs = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br><span class="hljs-type">String</span> s2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(chs);<br></code></pre></td></tr></table></figure></li><li><p>​    public String(String original) : 根据传入的字符串, 来创建字符串对象</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">String</span> s3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><hr><ol><li><p>打印对象名, 会看到对象的内存地址；但打印字符串对象, 直接输出内容</p></li><li><p>这三个构造方法, 创建字符串对象, 没有双引号直接创建简便.</p><p> ​    String s &#x3D; “abc”;</p></li></ol><hr><h5 id="字符串对象-两种创建方式的区别"><a href="#字符串对象-两种创建方式的区别" class="headerlink" title="字符串对象, 两种创建方式的区别"></a>字符串对象, 两种创建方式的区别</h5><pre><code class="hljs">       1. 双引号直接创建       2. 通过过构造方法创建</code></pre><h3 id="字符串比较（4种）"><a href="#字符串比较（4种）" class="headerlink" title="字符串比较（4种）"></a>字符串比较（4种）</h3><p><strong>注： &#x3D;&#x3D;判断引用型时，是看地址是否一样</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>    System.out.println(s1 == s2);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：True</p><p>解释：String字符串虽然不可改变, 但是可以被共享；  堆内存中地址一样</p><p> <strong>字符串常量池: 当我们使用双引号创建字符串对象时, 会检查常量池中是否存在该数据</strong></p> <img src="/2023/02/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B008/1.png" class=""> <p><em><strong>jdk7版本之前:StringTable是在方法区中jdk7版本开始:StringTable 被挪到了堆内存中</strong></em></p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>    System.out.println(s1 == s2);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：False</p><p>解释：new String(“abc”)在堆中创建了两个对象，new的一个新地址给s2，所以s1，s2地址不同</p> <img src="/2023/02/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B008/2.png" class=""> <hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ab&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> s2 + (<span class="hljs-string">&quot;c&quot;</span>);<br>    System.out.println(s1 == s3);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：False</p><p>解释：字符串拼接时，调用StringBuilder，在堆中开辟新内存，但此时数据类型不同一个String，一个StringBuilder类型，所以自动调用toString方法，堆中开辟新的内存地址。</p><img src="/2023/02/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B008/3.png" class=""> <p><em>API文档：Java 语言提供对字符串串联符号（”+”）以及将其他对象转换为字符串的特殊支持。字符串串联是通过 <code>StringBuilder</code>（或  <code>StringBuffer</code>）类及其 <code>append</code> 方法实现的。字符串转换是通过  <code>toString</code> 方法实现的，该方法由 <code>Object</code> 类定义，并可被 Java 中的所有类继承。</em></p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span> + <span class="hljs-string">&quot;b&quot;</span> + <span class="hljs-string">&quot;c&quot;</span>;<br>    System.out.println(s1 == s2);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：True</p><p>解释：Java的常量优化机制，反编译.class文件后，”a” + “b” + “c”自动转化为”abc”;</p><h3 id="String类中用于比较的方法"><a href="#String类中用于比较的方法" class="headerlink" title="String类中用于比较的方法 :"></a>String类中用于比较的方法 :</h3><ul><li><p>​        public boolean equals(Object anObject) 将此字符串与指定的对象比较</p></li><li><p>​        public boolean equalsIgnoreCase(String anotherString) 将此 String 与另一个 String 比较，不考虑大小写  [如验证码]</p></li></ul><h3 id="String类用于遍历的方法"><a href="#String类用于遍历的方法" class="headerlink" title="String类用于遍历的方法:"></a>String类用于遍历的方法:</h3><ul><li><p>​    public char[] toCharArray()       将此字符串转换为一个新的字符数组</p></li><li><p>​    public char charAt(int index)    返回指定索引处的 char 值</p></li><li><p>​    public int length()                       返回此字符串的长度</p></li></ul><p><strong>具体实现：</strong></p><p><strong>编写的方法和主方法平级的话，方法前要加static。</strong></p><ul><li><h5 id="字符串的第一种遍历方式"><a href="#字符串的第一种遍历方式" class="headerlink" title="字符串的第一种遍历方式"></a>字符串的第一种遍历方式</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print1</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcd&quot;</span>;<br><span class="hljs-type">char</span>[] chars = s.toCharArray();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chars.length; i++) &#123;<br>    System.out.println(chars[i]);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="字符串的第二种遍历方式"><a href="#字符串的第二种遍历方式" class="headerlink" title="字符串的第二种遍历方式"></a>字符串的第二种遍历方式</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcd&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s.charAt(i);<br>        System.out.println(c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="String方法合集"><a href="#String方法合集" class="headerlink" title="String方法合集"></a>String方法合集</h3><h5 id="String类的截取方法"><a href="#String类的截取方法" class="headerlink" title="String类的截取方法 :"></a>String类的截取方法 :</h5><ul><li>​    public String substring(int beginIndex) :  根据传入的索引开始做截取, 截取到字符串的末尾</li><li>​    public String substring(int beginIndex, int endIndex) :  根据传入的开始和结束索引, 对字符串做截取</li></ul><p>​                                                                             包含头, 不包含尾</p><p>​    <em>注意: 截取出来的内容, 是作为新的字符串返回, 需要找变量接收</em></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">String</span> s = <span class="hljs-string">&quot;abcd&quot;</span>;<br><span class="hljs-attribute">String</span> result = s.substring(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h5 id="String类的替换方法"><a href="#String类的替换方法" class="headerlink" title="String类的替换方法 :"></a>String类的替换方法 :</h5><ul><li>​    public String replace(CharSequence target, CharSequence replacement)  :</li></ul><p>​                                                                                          参数1 : 旧值   参数2 : 新值</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">String</span> s = <span class="hljs-string">&quot;abcd&quot;</span>;<br><span class="hljs-type">String</span> result = s.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&quot;cd&quot;</span>, <span class="hljs-string">&quot;ef&quot;</span>);<br></code></pre></td></tr></table></figure><p>String类的切割方法 :</p><ul><li>​    public String[] split(String regex) : 根据传入的字符串作为规则, 切割当前字符串</li></ul><p><strong>如果切割失败，切割字符前加入\\</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">String s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;111.222.333.444&quot;</span><span class="hljs-comment">;</span><br>String[] sArr <span class="hljs-operator">=</span> s.split(<span class="hljs-string">&quot;\\.&quot;</span>)<span class="hljs-comment">;</span><br>for (int i <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; sArr.length; i++) &#123;</span><br>    System.out.println(sArr[i])<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><em>原因： ‘ .’是通配字符，相当于每个位置切一刀，如果没有\\就代表每个位置一刀，得不到结果；”\\.”表示以’.’作分隔符。</em></p><h3 id="StringBuilder的使用"><a href="#StringBuilder的使用" class="headerlink" title="StringBuilder的使用"></a>StringBuilder的使用</h3><p><strong>StringBuilder的作用 : 提高字符串的操作效率</strong></p><p>示例： 拼接1-10000数字成字符串</p><p>System.currentTimeMillis()：获取1970年1月1日0时0分0秒到现在所经历过的毫秒值 (1秒 &#x3D; 1000毫秒)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">long start = <span class="hljs-keyword">System</span>.currentTimeMillis();<br>String s = &quot;&quot;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100000</span>; i++)&#123;<br>    s += i;<br>&#125;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s);<br>long end = <span class="hljs-keyword">System</span>.currentTimeMillis();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">end</span> - <span class="hljs-keyword">start</span>);            // <span class="hljs-number">3000</span>毫秒<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">long start = <span class="hljs-keyword">System</span>.currentTimeMillis();<br>StringBuilder s = <span class="hljs-built_in">new</span> StringBuilder();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100000</span>; i++)&#123;<br>    sb.append(i);<br>&#125;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s);<br>long end = <span class="hljs-keyword">System</span>.currentTimeMillis();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">end</span> - <span class="hljs-keyword">start</span>);            // <span class="hljs-number">9</span>毫秒<br></code></pre></td></tr></table></figure><h4 id="StringBuilder的介绍"><a href="#StringBuilder的介绍" class="headerlink" title="StringBuilder的介绍 :"></a>StringBuilder的介绍 :</h4><pre><code class="hljs">   1. StringBuilder是一种可变的字符序列   2. StringBuilder是字符串缓冲区, 将其理解是容器, 这个容器可以存储**任意数据类型**, 但是只要进入到这个容器, **全部变成字符串**.</code></pre><h4 id="StringBuilder的构造方法"><a href="#StringBuilder的构造方法" class="headerlink" title="StringBuilder的构造方法 :"></a>StringBuilder的构造方法 :</h4><ul><li>​    public StringBuilder() : 创建一个空白的字符串缓冲区(容器), 其初始容量为16个字符</li><li>​    public StringBuilder(String str) : 创建一个字符串缓冲区(容器), 容器在创建好之后, 就带有参数的内容</li></ul><h4 id="StringBuilder常用成员方法"><a href="#StringBuilder常用成员方法" class="headerlink" title="StringBuilder常用成员方法 :"></a>StringBuilder常用成员方法 :</h4><ul><li>​public StringBuilder append(任意类型) : 添加数据, 并返回对象自己</li><li>​    public StringBuilder reverse() : 将缓冲区中的内容, 进行反转</li><li>​    public int length() : 返回长度</li><li>​    public String toString() : 将缓冲区的内容, 以String字符串类型返回</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">StringBuilder sb = <span class="hljs-built_in">new</span> StringBuilder();<br><span class="hljs-comment">// 链式编程: 调用的方法, 返回的结果是对象, 就可以继续向下调用方法</span><br>sb.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;红色&quot;</span>).<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;绿色&quot;</span>).<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;蓝色&quot;</span>);<br>System.out.<span class="hljs-built_in">println</span>(sb);    <span class="hljs-comment">//红色绿色蓝色蓝色</span><br></code></pre></td></tr></table></figure><p>同理：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">String s = <span class="hljs-string">&quot;abcd&quot;</span>；<br>s.<span class="hljs-keyword">substring</span>(<span class="hljs-number">1</span>).<span class="hljs-keyword">substring</span>(<span class="hljs-number">1</span>)；<span class="hljs-comment">//两次截取</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 情况: 数据在StringBuilder当中, 但是需要调用的方法在StringBuilder中没有, String有<br><span class="hljs-regexp">//</span> 解决: StringBuilder转换为String, 再调用<br>String[] sArr = sb.toString().split(<span class="hljs-string">&quot;色&quot;</span>);  <span class="hljs-regexp">//</span>接着上面的代码<br><span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; sArr.length; i++) &#123;<br>    System.out.println(sArr[i]);            <span class="hljs-regexp">//</span>红 绿 蓝  [省略了回车]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="String-和-StringBuilder-的转换"><a href="#String-和-StringBuilder-的转换" class="headerlink" title="String 和 StringBuilder 的转换"></a>String 和 StringBuilder 的转换</h4><ul><li>​        String —&gt; StringBuilder</li></ul><p>​                        String s &#x3D; “abc”;<br>​                        StringBuilder sb &#x3D; new StringBuilder(s);</p><ul><li>​        StringBuilder —&gt; String</li></ul><p>​                        String s &#x3D; sb.toString();</p><p>需求: 键盘接受一个字符串，程序判断出该字符串是否是对称字符串(回文字符串)，并在控制台打印True&#x2F;False<br>        <em>对称字符串:  123321、111    非对称字符串: 123123</em></p><p>思路: 对拿到的字符串进行反转, 反转后的内容, 如果跟原数据相同, 判定为回文字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入一个对称字符串: &quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> sc.nextLine();<br><br><span class="hljs-comment">// 将String转换为StringBuilder, 调用其内部反转的方法</span><br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(content);<br>sb.reverse();<br><br><span class="hljs-comment">// 判断反转后的内容与原数据是否相同</span><br><span class="hljs-comment">// content : String类型</span><br><span class="hljs-comment">// sb : StringBuilder类型</span><br><span class="hljs-keyword">if</span> (content.equals(sb.toString())) &#123;        <span class="hljs-comment">//重点：如果没有toString()方法，则equal判断的两个数据不是同类型，必定返回false</span><br>    System.out.println(<span class="hljs-string">&quot;True&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;False&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="StringBuilder和StringBuffer"><a href="#StringBuilder和StringBuffer" class="headerlink" title="StringBuilder和StringBuffer"></a>StringBuilder和StringBuffer</h3><p>构造方法，使用完全一样。</p><h5 id="不同："><a href="#不同：" class="headerlink" title="不同："></a>不同：</h5><p>将StrinaBuilder 的实例用于多个线程是不安全的。如果需要这样的同步。则建议使用StringBuffer。</p><p>StringBuffer:线程安全的可变字符序列。</p><p>不安全—&gt;效率往往比较高            安全—&gt;效率比较低</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>String类，API帮助文档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7_面向对象的知识点，设计电影信息系统</title>
    <link href="/2023/02/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/"/>
    <url>/2023/02/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习笔记7"><a href="#Java学习笔记7" class="headerlink" title="Java学习笔记7"></a>Java学习笔记7</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><h3 id="创建Student类的对象进行使用"><a href="#创建Student类的对象进行使用" class="headerlink" title="创建Student类的对象进行使用"></a>创建Student类的对象进行使用</h3><ol><li><p>创建对象的格式<br>类名 对象名 &#x3D; new 类名();</p></li><li><p>使用对象成员变量的格式<br>对象名.成员变量;</p></li><li><p>使用对象成员方法的格式<br>对象名.成员方法();</p></li></ol><hr><p>细节:</p><p>1.打印对象名, 可以看到对象的内存地址</p><p>com.njucm.Student@4eec7777<br>全类名 : 包名 + 类名</p><p>2.成员变量就算没有赋值, 也可以直接用, 使用的是对象的默认值</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>Java当中要想创建对象, 必须现有类的存在</p><p>类 : 一组相关属性和行为的集合, 将其看做为是对象的设计图.<br>对象 : 是根据设计图(类), 创建出来的实体</p><h4 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系:"></a>类和对象的关系:</h4><pre><code class="hljs">依赖关系: 需要根据类, 创建对象量关系: 根据一个类, 可以创建出多个对象</code></pre><p>类的组成:</p><p>​        类的本质 : 就是对事物进行的描述</p><p>​        属性(大多为名词): 在代码中使用成员变量表示, 成员变量跟之前定义变量的格式一样, 只不过位置发生了改变, 类中方法外.</p><p>​        行为(大多为动词): 在代码中使用成员方法表示, 成员方法跟之前定义方法的格式一样, 只不过需要去掉 static 关键字</p><h3 id="对象内存图"><a href="#对象内存图" class="headerlink" title="对象内存图"></a>对象内存图</h3><p><em>具体动画查看对应文件夹下“内存动画.pptx”文件。</em></p><h5 id="单个对象内存图"><a href="#单个对象内存图" class="headerlink" title="单个对象内存图"></a>单个对象内存图</h5> <img src="/2023/02/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/1.png" class=""> <h5 id="两个对象内存图"><a href="#两个对象内存图" class="headerlink" title="两个对象内存图"></a>两个对象内存图</h5> <img src="/2023/02/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/2.png" class=""> <h5 id="两个引用指向相同内存图"><a href="#两个引用指向相同内存图" class="headerlink" title="两个引用指向相同内存图"></a>两个引用指向相同内存图</h5> <img src="/2023/02/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/3.png" class=""> <p><strong>JAVA里的垃圾自动清理，堆中不用的会一定时间内被自动清理，不需要delete</strong></p><h3 id="成员变量和局部变量的区别"><a href="#成员变量和局部变量的区别" class="headerlink" title="成员变量和局部变量的区别"></a>成员变量和局部变量的区别</h3> <img src="/2023/02/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/%E5%8C%BA%E5%88%AB.png" class=""><h3 id="This关键字"><a href="#This关键字" class="headerlink" title="This关键字"></a>This关键字</h3><p><strong>成员变量和局部变量重名的情况, Java使用的是就近原则</strong></p><p>问题: 非要使用成员变量, 怎么办?<br>解决: 使用this关键字进行区分</p><p>this可以区分局部变量和成员变量的重名问题</p><h5 id="this关键字的作用"><a href="#this关键字的作用" class="headerlink" title="this关键字的作用:"></a>this关键字的作用:</h5><p>​        this可以调用本类成员 (变量, 方法)</p><p>​            this.本类成员变量<br>​            this.本类成员方法();</p><p>​        this.的省略规则 :</p><p>​            本类成员方法 : 没有前提条件, this.可以直接省略<br>​            本类成员变量 : 方法中没有出现重名的变量, this.才可以省略</p><hr><h5 id="this-代表当前类对象的引用-地址"><a href="#this-代表当前类对象的引用-地址" class="headerlink" title="this : 代表当前类对象的引用(地址)"></a>this : 代表当前类对象的引用(地址)</h5><ul><li><p>谁调用就代表谁.</p><p>方法中的this, 代表的就是哪一个对象.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">Student stu1 = <span class="hljs-built_in">new</span> Student();<br>System.out.<span class="hljs-built_in">println</span>(stu1);<br>Student stu2 = <span class="hljs-built_in">new</span> Student();<br>System.out.<span class="hljs-built_in">println</span>(stu2);<br>stu1.<span class="hljs-built_in">print</span>()  <span class="hljs-comment">// ----&gt; this ---&gt; stu1的地址</span><br>stu2.<span class="hljs-built_in">print</span>()  <span class="hljs-comment">// ----&gt; this ---&gt; stu2的地址</span><br></code></pre></td></tr></table></figure></li></ul><p>​                </p><h3 id="构造方法-构造器"><a href="#构造方法-构造器" class="headerlink" title="构造方法(构造器)"></a>构造方法(构造器)</h3><p>初始化一个新建的对象<br>构建、创造对象的时候，所调用的方法</p><h5 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h5><p>1.方法名与类名相同，大小写也要一致<br>2.没有返回值类型，连void都没有<br>3.没有具体的返回值（不能由return带回结果数据）</p><h5 id="构造方法的作用"><a href="#构造方法的作用" class="headerlink" title="构造方法的作用 :"></a>构造方法的作用 :</h5><pre><code class="hljs">       1. 本质的作用 : 创建对象       2. 结合执行时机 : 可以创建对象的时候, 给对象中的数据初始化</code></pre><h5 id="构造方法的注意事项"><a href="#构造方法的注意事项" class="headerlink" title="构造方法的注意事项 :"></a>构造方法的注意事项 :</h5><pre><code class="hljs">       1. 一个类中, 没有编写构造方法, 系统将会提供一个 **[默认的] [无参数]** 的构造方法       2. 一个类中, 如果手动编写了构造方法, 系统将不会再提供那个默认的无参构造了       3. 构造方法不允许手动调用          * *建议 : 编写类的时候, 无参构造, 带参构造, 全部手动给出*</code></pre><p><strong>执行完构造方法里的语句后再将地址赋值回来。</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Student stu</span> = new Student(<span class="hljs-string">&quot;你好&quot;</span>,123);<br></code></pre></td></tr></table></figure><p>new在堆内存形成一个地址存放默认数据，栈内存中调用Student的有参构造方法，执行赋值语句，使堆内存中参数值改为你好，123； 最后将堆内存地址值传回来给stu。</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>使用类设计对象时将需要处理的数据以及处理这些数据的方法, 设计到对象中</p><p><strong>封装的设计规范 : 合理隐藏, 合理暴露</strong></p><ul><li>更好的维护数据</li><li>使用者无需关心内部实现, 只要知道如何使用即可</li></ul><h5 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符 :"></a>权限修饰符 :</h5><p>​            private : 同一个类中<br>​            (default) : 同一个类中, 同一个包中<br>​            protected : 同一个类中, 同一个包中, 不同包的子类<br>​            public : 任意位置访问</p><h3 id="标准JavaBean"><a href="#标准JavaBean" class="headerlink" title="标准JavaBean"></a>标准JavaBean</h3><ul><li>这个类中的成员变量都要私有，并且要对外提供相应的getXxx ，setXxx方法</li><li>类中提供无参, 带参构造方法。</li></ul><h5 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h5><p>只负责数据存取，而对数据的处理交给其他类来完成，以实现数据和数据业务处理相分离。</p><p><strong>安装插件JSP：直接获取构造方法，getXxx ，setXxx方法。</strong></p><h3 id="电影信息系统"><a href="#电影信息系统" class="headerlink" title="电影信息系统"></a>电影信息系统</h3><p>需求</p><ul><li>展示系统中的全部电影(每部电影展示：名称、评分)</li><li>允许用户根据电影编号（id）查询出某个电影的详细信息</li></ul> <img src="/2023/02/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/%E5%9B%BE%E7%89%871.png" class=""><p>代码：</p><p>Moive</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Movie</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String time;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br>    <span class="hljs-keyword">private</span> String area;<br>    <span class="hljs-keyword">private</span> String type;<br>    <span class="hljs-keyword">private</span> String director;<br>    <span class="hljs-keyword">private</span> String starring;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String title, String time, <span class="hljs-type">double</span> score, String area, String type, String director, String starring)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.title = title;<br>        <span class="hljs-built_in">this</span>.time = time;<br>        <span class="hljs-built_in">this</span>.score = score;<br>        <span class="hljs-built_in">this</span>.area = area;<br>        <span class="hljs-built_in">this</span>.type = type;<br>        <span class="hljs-built_in">this</span>.director = director;<br>        <span class="hljs-built_in">this</span>.starring = starring;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTitle</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> title;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTitle</span><span class="hljs-params">(String title)</span> &#123;<br>        <span class="hljs-built_in">this</span>.title = title;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> time;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTime</span><span class="hljs-params">(String time)</span> &#123;<br>        <span class="hljs-built_in">this</span>.time = time;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getArea</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> area;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setArea</span><span class="hljs-params">(String area)</span> &#123;<br>        <span class="hljs-built_in">this</span>.area = area;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setType</span><span class="hljs-params">(String type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.type = type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDirector</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> director;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDirector</span><span class="hljs-params">(String director)</span> &#123;<br>        <span class="hljs-built_in">this</span>.director = director;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStarring</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> starring;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStarring</span><span class="hljs-params">(String starring)</span> &#123;<br>        <span class="hljs-built_in">this</span>.starring = starring;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MovieService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MovieService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Movie[] movies;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MovieService</span><span class="hljs-params">(Movie[] movies)</span> &#123;<br>        <span class="hljs-built_in">this</span>.movies = movies;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 启动电影信息管理系统</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br><br>        lo:<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;----------电影信息系统----------&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;请输入您的选择:&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;1. 查询全部电影信息&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;2. 根据id查询电影信息&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;3. 退出&quot;</span>);<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">choice</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>            <span class="hljs-keyword">switch</span> (choice) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    queryMovieInfos();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    queryMovieInfoById();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    System.out.println(<span class="hljs-string">&quot;感谢您的使用, 再见!&quot;</span>);<br>                    <span class="hljs-keyword">break</span> lo;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;您的输入有误, 请检查&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 此方法根据电影编号, 查询电影详情信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryMovieInfoById</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 键盘录入用户输入的编号</span><br>        System.out.println(<span class="hljs-string">&quot;请输入您要查询的电影编号:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-comment">// 2. 遍历数组, 从数组中查询电影信息</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; movies.length; i++) &#123;<br>            <span class="hljs-type">Movie</span> <span class="hljs-variable">movie</span> <span class="hljs-operator">=</span> movies[i];<br>            <span class="hljs-keyword">if</span>(movie.getId() == id)&#123;<br>                <span class="hljs-comment">// 3. 将找到的电影信息, 打印在控制台</span><br>                System.out.println(movie.getId() + <span class="hljs-string">&quot;---&quot;</span> + movie.getTitle() + <span class="hljs-string">&quot;---&quot;</span> + movie.getTime()<br>                        + <span class="hljs-string">&quot;---&quot;</span> + movie.getScore() + <span class="hljs-string">&quot;---&quot;</span> + movie.getArea() + <span class="hljs-string">&quot;---&quot;</span><br>                        + movie.getType() + <span class="hljs-string">&quot;---&quot;</span> + movie.getDirector() + <span class="hljs-string">&quot;---&quot;</span> + movie.getStarring());<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 代码要是走到这里, 说明没找到</span><br>        System.out.println(<span class="hljs-string">&quot;您输入的编号不存在, 请检查!&quot;</span>);<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 展示系统中全部的电影 (名称, 评分)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryMovieInfos</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 遍历数组, 取出每一个电影对象</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; movies.length; i++) &#123;<br>            <span class="hljs-type">Movie</span> <span class="hljs-variable">movie</span> <span class="hljs-operator">=</span> movies[i];<br>            <span class="hljs-comment">// System.out.println(movie);   打印对象名, 会看到内存地址</span><br>            <span class="hljs-comment">// 2. 通过电影对象, 调用内部getXxx方法, 获取信息并打印</span><br>            System.out.println(movie.getTitle() + <span class="hljs-string">&quot;---&quot;</span> + movie.getScore());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MovieTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Movie</span> <span class="hljs-variable">movie1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;东八区的先生们&quot;</span>, <span class="hljs-string">&quot;2022&quot;</span>, <span class="hljs-number">2.1</span>, <span class="hljs-string">&quot;中国大陆&quot;</span>, <span class="hljs-string">&quot;剧情 喜剧&quot;</span>, <span class="hljs-string">&quot;夏睿&quot;</span>, <span class="hljs-string">&quot;张翰 王晓晨&quot;</span>);<br>        <span class="hljs-type">Movie</span> <span class="hljs-variable">movie2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;上海堡垒&quot;</span>, <span class="hljs-string">&quot;2019&quot;</span>, <span class="hljs-number">2.9</span>, <span class="hljs-string">&quot;中国大陆&quot;</span>, <span class="hljs-string">&quot;爱情 战争 科幻&quot;</span>, <span class="hljs-string">&quot;滕华涛&quot;</span>, <span class="hljs-string">&quot;鹿晗 舒淇&quot;</span>);<br>        <span class="hljs-type">Movie</span> <span class="hljs-variable">movie3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;纯洁心灵·逐梦演艺圈&quot;</span>, <span class="hljs-string">&quot;2015&quot;</span>, <span class="hljs-number">2.2</span>, <span class="hljs-string">&quot;中国大陆&quot;</span>, <span class="hljs-string">&quot;剧情 喜剧&quot;</span>, <span class="hljs-string">&quot;毕志飞&quot;</span>, <span class="hljs-string">&quot;朱一文 李彦漫&quot;</span>);<br><br>        Movie[] movies = &#123;movie1, movie2, movie3&#125;;<br><br>        <span class="hljs-comment">// 该如何将一个类中的数据, 传递给另外一个类</span><br>        <span class="hljs-type">MovieService</span> <span class="hljs-variable">movieService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MovieService</span>(movies);<br>        movieService.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>对象</tag>
      
      <tag>this</tag>
      
      <tag>JavaBean</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6_Swap,数组的使用,实现随机产生验证码的功能</title>
    <link href="/2023/02/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006/"/>
    <url>/2023/02/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006/</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习笔记6"><a href="#Java学习笔记6" class="headerlink" title="Java学习笔记6"></a>Java学习笔记6</h1><p>几个案例实现过程中的知识点记录</p><h3 id="x3D-x3D-符号"><a href="#x3D-x3D-符号" class="headerlink" title="&#x3D;&#x3D;符号"></a>&#x3D;&#x3D;符号</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">== :</span><br><span class="hljs-code">        1. 基本数据类型 : 比较数据值</span><br><span class="hljs-code">        2. 引用数据类型 : 比较地址值</span><br></code></pre></td></tr></table></figure><h3 id="查找索引位置，返回类型为数组"><a href="#查找索引位置，返回类型为数组" class="headerlink" title="查找索引位置，返回类型为数组"></a>查找索引位置，返回类型为数组</h3><p><strong>需求: 设计一个方法, 查找元素在数组中的索引位置 (考虑重复元素问题)</strong><br><em>注意: return只能返回一个结果</em></p><p>问题: 当一个方法运行结束后, 有多个结果需要返回, 怎么处理?<br>回答: 可以将多个结果, 存入一个数组容器, 将数组返回.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] getIndex(<span class="hljs-type">int</span> num, <span class="hljs-type">int</span>[] arr) &#123;<br>    <span class="hljs-comment">// 1. 统计要查找的元素, 在数组中出现的个数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span>(arr[i] == num)&#123;<br>            count++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 2. 根据统计出来的个数, 创建数组容器</span><br>    <span class="hljs-type">int</span>[] results = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[count];<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 3. 查找元素在数组中的索引, 将找到的索引, 存入数组容器</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span>(arr[i] == num)&#123;<br>            <span class="hljs-comment">// results[0] = 0;</span><br>            <span class="hljs-comment">// results[1] = 5;</span><br>            <span class="hljs-comment">// results[2] = 6;</span><br>            results[index] = i;<br>            index++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 4. 将装满了索引的数组, 返回</span><br>    <span class="hljs-keyword">return</span> results;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Swap"><a href="#Swap" class="headerlink" title="Swap"></a>Swap</h3><p>思路: 今后只要涉及到数据交换, 联想到第三方的变量</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">int</span> b = <span class="hljs-number">20</span>;<br><br><span class="hljs-built_in">int</span> c = a;<br>a = b;<br>b = c;<br><br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;a=&quot;</span> + a);   <span class="hljs-comment">// 20</span><br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;b=&quot;</span> + b);   <span class="hljs-comment">// 10 </span><br></code></pre></td></tr></table></figure><p><strong>面试题: 实现两个变量的数据交换, 不允许定义第三方变量</strong></p><p> ^ 异或 :</p><pre><code class="hljs">  特点:          1. 相同为false, 不同为true          2. 一个数字, 被另外一个数字异或两次, 该数本身不变</code></pre><p> 异或操作数值的运算过程 :</p><pre><code class="hljs">    1. 将需要运算的数据, 转换为二进制数据            0000 1010       10            0000 0101       5    2. 将二进制数据的0当做为false, 1当做为true, 运算            0000 1010        ^   0000 0101    --------------------            0000 1111    3. 将运算后的二进制数据, 转换为十进制</code></pre><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>a = a ^ b;  <span class="hljs-comment">// a = 10 ^ 20;</span><br>b = a ^ b;  <span class="hljs-comment">// b = 10 ^ 20 ^ 20;            b = 10</span><br>a = a ^ b;  <span class="hljs-comment">// a = 10 ^ 20 ^ 10;            a = 20</span><br></code></pre></td></tr></table></figure><h5 id="前后倒置的解决方法："><a href="#前后倒置的解决方法：" class="headerlink" title="前后倒置的解决方法："></a>前后倒置的解决方法：</h5><h6 id="解决1：i-和-length-1-i"><a href="#解决1：i-和-length-1-i" class="headerlink" title="解决1：i 和 length-1-i"></a>解决1：i 和 length-1-i</h6><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs prolog">确定好谁跟谁换<br><br>        第一个和倒数第一个 :  arr[<span class="hljs-number">0</span>]  arr[arr.length<span class="hljs-number">-1</span><span class="hljs-number">-0</span>]<br>        第二个和倒数第二个 :  arr[<span class="hljs-number">1</span>]  arr[arr.length<span class="hljs-number">-1</span><span class="hljs-number">-1</span>]<br>        第三个和倒数第三个 :  arr[<span class="hljs-number">2</span>]  arr[arr.length<span class="hljs-number">-1</span><span class="hljs-number">-2</span>]<br>        ...<br><br>        arr[i]  arr[arr.length<span class="hljs-number">-1</span>-i]<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseArray1</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length / <span class="hljs-number">2</span>; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>        arr[i] = arr[arr.length-<span class="hljs-number">1</span>-i];<br>        arr[arr.length-<span class="hljs-number">1</span>-i] = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="解决2：前后指针-start-end"><a href="#解决2：前后指针-start-end" class="headerlink" title="解决2：前后指针 start end"></a>解决2：前后指针 start end</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseArray2</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, end = arr.length - <span class="hljs-number">1</span>; start &lt; end; start++, end--)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[start];<br>        arr[start] = arr[end];<br>        arr[end] = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><em><strong>注：for语句的格式，初始化可以定义多个，不用在for循环上方定义了；最后的循环执行语句也可以多条，即不用写在循环体里了。</strong></em></p><h3 id="随机产生验证码"><a href="#随机产生验证码" class="headerlink" title="随机产生验证码"></a>随机产生验证码</h3><p>从26个英文字母（大小写都包含），以及数字0-9中，随机产生一个5位的字符串验证码并打印在控制台<br>效果：uYq8I，3r4Zj</p><p>随机效果的实现：</p><p><strong>从数组中随机取出一个元素根据数组的长度, 产生一个随机数, 拿着这个随机数, 当做索引去数组中获取元素</strong></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] sArr = &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>&#125;;<br>               <span class="hljs-comment">// 0    1    2    3    4</span><br><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> r.nextInt(sArr.length);           <span class="hljs-comment">//  0  1  2  3  4</span><br>System.out.println(i);<br>System.out.println(sArr[i]);<br></code></pre></td></tr></table></figure><p>字符叠加效果的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>s += <span class="hljs-string">&#x27;a&#x27;</span>;<br>s += <span class="hljs-string">&#x27;b&#x27;</span>;<br>s += <span class="hljs-string">&#x27;c&#x27;</span>;<br>System.out.println(s);<br></code></pre></td></tr></table></figure><p><strong>注：打印字符类型数组名, 不会看到地址值, 而是元素的内容</strong>[char类型的print输出语句就是输出其内容]</p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    <span class="hljs-type">char</span>[] chs = getContents();<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">checkCode</span> <span class="hljs-operator">=</span> getCheckCode(chs);<br><br>    System.out.println(<span class="hljs-string">&quot;产生的验证码为:&quot;</span> + checkCode);<br><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getCheckCode</span><span class="hljs-params">(<span class="hljs-type">char</span>[] chs)</span> &#123;<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">checkCode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">randomIndex</span> <span class="hljs-operator">=</span> r.nextInt(chs.length);<br>        checkCode += chs[randomIndex];<br>    &#125;<br>    <span class="hljs-keyword">return</span> checkCode;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span>[] getContents() &#123;<br>    <span class="hljs-type">char</span>[] chs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">26</span> + <span class="hljs-number">26</span> + <span class="hljs-number">10</span>];<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>; c &lt;= <span class="hljs-string">&#x27;z&#x27;</span>; c++)&#123;<br>        chs[index] = c;<br>        index++;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>; c &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>; c++)&#123;<br>        chs[index] = c;<br>        index++;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span>; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>; c++)&#123;<br>        chs[index] = c;<br>        index++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> chs;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>Random</tag>
      
      <tag>数组</tag>
      
      <tag>Swap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5_数组</title>
    <link href="/2023/02/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005/"/>
    <url>/2023/02/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005/</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习笔记5"><a href="#Java学习笔记5" class="headerlink" title="Java学习笔记5"></a>Java学习笔记5</h1><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><p>数组介绍 : 一种容器, 可以存储同种数据类型的多个值</p><p>数组的使用场景 : 发现手里的数据有多个, 并且这多个数据还属于同一组数据, 就可以考虑使用数组容器进行维护.</p><p>初始化 : 在内存中, 为数组容器开辟空间, 并将数据存入容器的过程.</p><hr><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">数组的定义格式 :<br><br>        <span class="hljs-number">1</span>. 数据类型[] 数组名;<br><br>        <span class="hljs-number">2</span>. 数据类型 数组名<span class="hljs-selector-attr">[]</span>;<br></code></pre></td></tr></table></figure><p>​        注意 : 这种定义格式, 定义出来的, 只是数组类型的变量而已, 内存中还没有创建出数组容器.</p><h3 id="数组的静态初始化格式"><a href="#数组的静态初始化格式" class="headerlink" title="数组的静态初始化格式"></a>数组的静态初始化格式</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 完整格式 :<br><span class="hljs-code">            数据类型[] 数组名 = new 数据类型[]&#123;元素1, 元素2, 元素3...&#125;;</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">2.</span> 简化格式 :<br><span class="hljs-code">           数据类型[] 数组名 = &#123;元素1, 元素2, 元素3...&#125;;</span><br></code></pre></td></tr></table></figure><p>打印输出数组名 :System.out.println(array);<br>       示例输出： [I@776ec8df</p><p>@ : 分割符<br>[ : 当前空间, 是数组类型的<br>I : 当前数组类型, 是int类型<br>776ec8df : 数组的十六进制内存地址</p><h3 id="数组元素访问格式"><a href="#数组元素访问格式" class="headerlink" title="数组元素访问格式"></a>数组元素访问格式</h3><p>​        数组名[索引];</p><p>​        索引 : 数组容器中空间所对应的编号, 编号从0开始, 逐个+1增长</p><h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><p>将数中的每一个(所有)的内容, 取出来进行操作</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">数组名.length : 动态获取到数组的长度 (元素的个数)<br></code></pre></td></tr></table></figure><p><em>IDEA中数组遍历快捷键 : 数组名.fori</em></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">注：double a <span class="hljs-operator">=</span> <span class="hljs-number">5</span>/<span class="hljs-number">2</span>     // a<span class="hljs-operator">=</span><span class="hljs-number">2.0</span>，先计算后赋值<br></code></pre></td></tr></table></figure><h3 id="数组的动态初始化"><a href="#数组的动态初始化" class="headerlink" title="数组的动态初始化"></a>数组的动态初始化</h3><p>在初始化的时候, 只需要指定数组的长度, 系统就会分配默认值(初始值)</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ada">格式: 数据类型[] 数组名 = <span class="hljs-keyword">new</span> 数据类型[长度];<br><br>默认值的分类 :<br><br>        整数 : 0<br>        小数 : 0.0<br>        布尔 : <span class="hljs-type">false</span><br>        <span class="hljs-comment">---------------------------</span><br>        字符 : &#x27;\<span class="hljs-type">u0000</span>&#x27;       <span class="hljs-comment">---&gt; Unicode字符  ---&gt; 常见的体现是空白字符</span><br>        引用数据类型 : <span class="hljs-keyword"><span class="hljs-keyword">null</span></span><br><br>        引用数据类型 : 数组, 类, 接口<br>        String : 类<br></code></pre></td></tr></table></figure><p><em>ctrl + alt + M :IDEA中抽取方法的快捷键</em></p><h3 id="数组两种初始化的区别"><a href="#数组两种初始化的区别" class="headerlink" title="数组两种初始化的区别"></a>数组两种初始化的区别</h3><p><strong>初始化：就是在内存中，为数组容器开辟空间，并将数据存入容器中的过程。</strong></p><p>​    动态初始化: 手动指定长度, 系统分配默认初始化值<br>​    静态初始化: 手动指定元素, 系统会根据元素的个数, 计算出数组的长度</p><p>两种初始化的使用选择 :</p><pre><code class="hljs">1. 静态初始化: 如果要操作的数据, 需求中已经明确给出了, 直接静态初始化                需求: 已知班级学生成绩为 100 100 90 20 100, 找出最高分                int[] arr = &#123;100,100,90,20,100&#125;;1. 动态初始化: 只明确元素个数, 不明确具体数值                需求1: 键盘录入5个学生成绩, 找出最高分                需求2: 产生10个1~100之间的随机数, 找出最小值</code></pre><h3 id="JAVA中内存分配"><a href="#JAVA中内存分配" class="headerlink" title="JAVA中内存分配"></a>JAVA中内存分配</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span>[] <span class="hljs-built_in">array</span>1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-built_in">int</span>[] <span class="hljs-built_in">array</span>2 = <span class="hljs-built_in">array</span>1;<br></code></pre></td></tr></table></figure><p><em>解释：array1将地址复制一份给array2</em></p><p>​            <em>操作array2时array一样变</em></p><p><strong>即：两个数组指向相同内存</strong></p> <img src="/2023/02/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.png" class=""> <p>截取了一个实例：</p> <img src="/2023/02/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005/%E5%AE%9E%E4%BE%8B.png" class=""> <p><strong>简化格式只是简化了代码书写，真正运行期间还是按照完整格式运行的int[] arr &#x3D; new int[]{11,22,33};</strong></p><h3 id="方法的参数传递问题"><a href="#方法的参数传递问题" class="headerlink" title="方法的参数传递问题 :"></a>方法的参数传递问题 :</h3><pre><code class="hljs">   1. 基本数据类型: 传递的是数据值   2. 引用数据类型: 传递的是地址值</code></pre><p>​    <em><em>问题: Java到底是值传递, 还是址传递?</em><br>​    答: 值传递, 地址值也是值</em></p><h3 id="数组使用常见问题"><a href="#数组使用常见问题" class="headerlink" title="数组使用常见问题"></a>数组使用常见问题</h3><h4 id="索引越界异常"><a href="#索引越界异常" class="headerlink" title="索引越界异常"></a>索引越界异常</h4><p>ArrayIndexOutOfBoundsException 当访问了数组中不存在的索引，就会引发索引越界异常</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= arr.<span class="hljs-built_in">length</span>; i++)&#123;<br>    System.<span class="hljs-keyword">out</span>.println(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="空指针异常"><a href="#空指针异常" class="headerlink" title="空指针异常"></a>空指针异常</h4><p>当引用数据类型变量被赋值为 null 之后，地址的指向被切断，还继续访问堆内存数据，就会引发空指针异常</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-attribute">arr</span> = null;<br><span class="hljs-attribute">System</span>.out.println(arr[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>二维数组是一种容器，该容器用于存储一维数组</p><p>总结: 二维数组在存储一维数组的时候, 具体存储的是一维数组的地址值</p><h3 id="二维数组的元素访问格式"><a href="#二维数组的元素访问格式" class="headerlink" title="二维数组的元素访问格式"></a>二维数组的元素访问格式</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">数组名[m索引][n索引] :<br><br> <span class="hljs-type">m</span>索引 : 指定访问哪一个一维数组<br> n索引 : 访问一维数组中的哪一个元素<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">打印输出二维数组名和各一维数组名<br>System.<span class="hljs-keyword">out</span>.println(arr);        <span class="hljs-comment">// [[I@776ec8df</span><br><br>System.<span class="hljs-keyword">out</span>.println(arr[<span class="hljs-number">0</span>]);     <span class="hljs-comment">// [I@4eec7777</span><br>System.<span class="hljs-keyword">out</span>.println(arr[<span class="hljs-number">1</span>]);     <span class="hljs-comment">// [I@3b07d329</span><br></code></pre></td></tr></table></figure><h3 id="静态初始化格式"><a href="#静态初始化格式" class="headerlink" title="静态初始化格式"></a>静态初始化格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">完整格式：数据类型[][] 数组名 = <span class="hljs-keyword">new</span> 数据类型[][] &#123;&#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>&#125;,&#123;元素<span class="hljs-number">1</span>, 元素<span class="hljs-number">2</span>&#125;&#125;;<br><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>&#125;,&#123;<span class="hljs-number">33</span>,<span class="hljs-number">44</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">简化格式：数据类型[][] 数组名 = &#123;&#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>&#125;, &#123;元素<span class="hljs-number">1</span>, 元素<span class="hljs-number">2</span>&#125;&#125;;<br><span class="hljs-type">int</span>[][] arr = &#123;&#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>&#125;,&#123;<span class="hljs-number">33</span>,<span class="hljs-number">44</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><h3 id="动态初始化格式"><a href="#动态初始化格式" class="headerlink" title="动态初始化格式"></a>动态初始化格式</h3><p>格式：数据类型[][] 数组名 &#x3D; new 数据类型[m][n];<br>m表示这个二维数组，可以存放多少个一维数组<br>n表示每一个一维数组，可以存放多少个元素</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">int<span class="hljs-comment">[]</span><span class="hljs-comment">[]</span> arr = new int<span class="hljs-comment">[2]</span><span class="hljs-comment">[3]</span>;<br></code></pre></td></tr></table></figure><h3 id="内存存储"><a href="#内存存储" class="headerlink" title="内存存储"></a>内存存储</h3> <img src="/2023/02/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98.png" class=""> <p>解释：栈内存中首先存放main()，然后运行</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">int<span class="hljs-comment">[]</span><span class="hljs-comment">[]</span> arr = new int<span class="hljs-comment">[2]</span><span class="hljs-comment">[3]</span>;<br></code></pre></td></tr></table></figure><p>分配内存地址0x0011,存放length，一维数组0,1的地址（创建二维数组时自动生成0x0022和0x0033两个堆内存地址）；</p><p>运行代码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span>[] arr1 = &#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>&#125;;<br><span class="hljs-attribute">int</span>[] arr2 = &#123;<span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>&#125;;<br></code></pre></td></tr></table></figure><p>堆内存中生成0x00AA和0x00BB地址存放数据</p><p>最后赋值代码，将arr1和arr2的地址0x00AA和0x00BB赋给二维数组在堆中存放的一维数组地址</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4_switch,跳转控制语句,Random,猜数字游戏</title>
    <link href="/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004/"/>
    <url>/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004/</url>
    
    <content type="html"><![CDATA[<h2 id="Java学习笔记4"><a href="#Java学习笔记4" class="headerlink" title="Java学习笔记4"></a>Java学习笔记4</h2><h3 id="switch语句注意事项"><a href="#switch语句注意事项" class="headerlink" title="switch语句注意事项 :"></a>switch语句注意事项 :</h3><ol><li><p>case 后面的值不允许重复</p></li><li><p>case 后面的值, 只能是字面量, 不能是变量</p></li><li><p>switch () 中可以接收的类型</p><p>1). 基本数据类型: byte short char int<br>2). 引用数据类型: <u>jdk5版本开始可以是枚举, jdk7版本开始可以是String字符串</u></p></li></ol><h4 id="if-amp-switch"><a href="#if-amp-switch" class="headerlink" title="if&amp;switch"></a>if&amp;switch</h4><ul><li><strong>if语句：使用与范围性的判断</strong></li><li><strong>switch语句：适用于固定值的匹配</strong></li></ul><h3 id="switch语句的case穿透现象"><a href="#switch语句的case穿透现象" class="headerlink" title="switch语句的case穿透现象"></a>switch语句的case穿透现象</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">    需求: 键盘录入一个数值, <span class="hljs-number">1</span>~<span class="hljs-number">5</span> : 输出工作日  6~7 : 输出休息日<br><br>​    现象: 多个<span class="hljs-keyword">case</span>中存在了重复的代码, 考虑使用<span class="hljs-keyword">case</span>穿透来优化代码<br></code></pre></td></tr></table></figure><p>   jdk14版本开始, case后面允许编写多个数据, 多个数据中间使用逗号分隔</p><p>最简洁：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">switch(week)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> -&gt; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;工作日&quot;);<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>, <span class="hljs-number">7</span> -&gt; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;休息日&quot;);<br>    <span class="hljs-keyword">default</span> -&gt; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;您的输入有误&quot;);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>四种书写格式：</strong></p><p>1.正常switch格式  2.使用case穿透  3.jdk14之后的简化格式  4.LAMBDA表达式</p> <img src="/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004/case%E7%A9%BF%E9%80%8F%E7%8E%B0%E8%B1%A1.png" class=""> <h3 id="Contiune和Break-跳转控制语句"><a href="#Contiune和Break-跳转控制语句" class="headerlink" title="Contiune和Break 跳转控制语句"></a>Contiune和Break 跳转控制语句</h3><p>break   :  终止循环体内容的执行，也就是说结束当前的整个循环<br>continue:  跳过某次循环体内容的执行，继续下一次的执行</p><p><strong>break : 只能在循环, 和 switch 当中进行使用</strong><br><strong>continue : 只能在循环中进行使用</strong></p><h3 id="判断语句执行流程"><a href="#判断语句执行流程" class="headerlink" title="判断语句执行流程"></a>判断语句执行流程</h3><h5 id="if"><a href="#if" class="headerlink" title="if"></a>if</h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">if</span> (判断条件<span class="hljs-number">1</span>) &#123;<br>    语句体<span class="hljs-number">1</span>;<br>&#125; <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(判断条件<span class="hljs-number">2</span>)</span> </span>&#123;<br>    语句体<span class="hljs-number">2</span>;<br>&#125; <br>...<br><span class="hljs-keyword">else</span> &#123;<br>    语句体n+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.首先计算判断条件1的值<br>2.如果值为true就执行语句体1；如果值为false就计算判断条件2的值<br>3.如果值为true就执行语句体2；如果值为false就计算判断条件3的值<br>4….<br>5.如果没有任何判断条件为true，就执行语句体n+1。</p><h5 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">switch</span>(表达式) &#123;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">1</span>：<br>语句体<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">2</span>：<br>语句体<span class="hljs-number">2</span>;<br><span class="hljs-keyword">break</span>;<br>    …<br>    <span class="hljs-keyword">default</span>：<br>语句体n+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.拿着表达式的值，依次和case后面的值进行匹配，匹配成功，就会执行对应的语句，在执行的过程中，遇到break就会结束。<br>2.如果所有的case都不匹配，就会执行default里面的语句体，然后程序结束掉。</p><h3 id="循环语句执行流程"><a href="#循环语句执行流程" class="headerlink" title="循环语句执行流程"></a>循环语句执行流程</h3><h5 id="for循环语句格式"><a href="#for循环语句格式" class="headerlink" title="for循环语句格式 :"></a>for循环语句格式 :</h5><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">for(初始化语句<span class="hljs-comment">; 判断条件; 条件控制语句)&#123;</span><br>    循环体语句<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>执行流程:<br>            1. 执行初始化语句, 在整个循环过程中, 只执行一次<br>            2. 执行判断条件, 看其返回结果是true, false<br>                    false : 循环结束<br>                    true : 执行第三步<br>            3. 执行循环体语句<br>            4. 执行条件控制语句<br>            5. 回到2继续…</p><h5 id="while循环格式"><a href="#while循环格式" class="headerlink" title="while循环格式:"></a>while循环格式:</h5><pre><code class="hljs">    初始化语句;    while(判断条件)&#123;        循环体语句;        条件控制语句;    &#125;</code></pre><p>执行流程:<br>    1. 执行初始化语句<br>    2. 执行判断条件, 看其返回结果是true, false<br>            false : 循环结束<br>            true : 进入第三步<br>    3. 执行循环体语句<br>    4. 执行条件控制语句<br>    5. 回到2继续</p><h5 id="do…while循环格式"><a href="#do…while循环格式" class="headerlink" title="do…while循环格式 :"></a>do…while循环格式 :</h5><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">初始化语句<span class="hljs-comment">;</span><br>do &#123;<br>    循环体语句<span class="hljs-comment">;</span><br>    条件控制语句<span class="hljs-comment">;</span><br>&#125;while(判断条件)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>执行流程:</p><ol><li>执行初始化语句</li><li>执行循环体语句</li><li>执行条件控制语句</li><li>执行判断条件, 看其返回结果是true, false<br> false : 循环结束<br> true : 回到第二步继续</li></ol><h3 id="循环标号"><a href="#循环标号" class="headerlink" title="循环标号"></a>循环标号</h3><p>给循环起名字（标号），这样就可以break这个循环，而不是循环体中的某一层。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mel">flag:  <span class="hljs-comment">// 标号 : 给循环起名字</span><br><span class="hljs-keyword">while</span> (true) &#123;<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">choice</span> = sc.nextInt();<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">choice</span>) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">break</span> flag;   <span class="hljs-comment">//结束这个无限循环</span><br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h3><h5 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> r.nextInt(    );<br></code></pre></td></tr></table></figure><h5 id="使用实例：产生20-80之间的随机数"><a href="#使用实例：产生20-80之间的随机数" class="headerlink" title="使用实例：产生20~80之间的随机数"></a>使用实例：产生20~80之间的随机数</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> num = r.nextInt(<span class="hljs-number">61</span>) + <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><h3 id="猜数字小游戏"><a href="#猜数字小游戏" class="headerlink" title="猜数字小游戏"></a>猜数字小游戏</h3><p>1.使用Random产生一个 20~100 之间的随机数  —&gt; randomNumber</p><p>2.使用Scanner从键盘录入用户猜的数据 —&gt; scNumber</p><p>3.比对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        guessNumber();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">guessNumber</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-comment">// 1. 使用Random产生一个 20~100 之间的随机数  ---&gt; randomNumber</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">randomNumber</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">100</span>) + <span class="hljs-number">20</span>;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 2. 使用Scanner从键盘录入用户猜的数据 ---&gt; scNumber</span><br>            System.out.println(<span class="hljs-string">&quot;请输入:&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">scNumber</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>            <span class="hljs-comment">// 3. 比对</span><br>            <span class="hljs-keyword">if</span> (scNumber &gt; randomNumber) &#123;<br>                System.out.println(<span class="hljs-string">&quot;猜大了&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (scNumber &lt; randomNumber) &#123;<br>                System.out.println(<span class="hljs-string">&quot;猜小了&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;猜对了!&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;恭喜!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IDEA使用的一个技巧"><a href="#IDEA使用的一个技巧" class="headerlink" title="IDEA使用的一个技巧"></a>IDEA使用的一个技巧</h3><div class="note note-success">            <p>生成方法返回值快捷键:<br>      1.  方法名().var + 回车<br>            2.  ctrl + alt + V</p>          </div>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>switch</tag>
      
      <tag>跳转控制语句</tag>
      
      <tag>Random</tag>
      
      <tag>猜数字游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3_运算符,方法</title>
    <link href="/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003/"/>
    <url>/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003/</url>
    
    <content type="html"><![CDATA[<h2 id="Java学习笔记3"><a href="#Java学习笔记3" class="headerlink" title="Java学习笔记3"></a>Java学习笔记3</h2><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">short s = <span class="hljs-number">1</span>;<br><br>s+ = <span class="hljs-number">1</span>;                   <span class="hljs-regexp">//</span> 正确<br>s = s + <span class="hljs-number">1</span>；               <span class="hljs-regexp">//</span> 编译失败<br></code></pre></td></tr></table></figure><p><strong>原因：扩展的赋值运算符隐含了强制类型转换</strong></p><p><em>再来看一个实例：</em></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">double</span> a = <span class="hljs-number">12.3</span> ;<br><br><span class="hljs-built_in">int</span> b = <span class="hljs-number">10</span> ;<br><br>b+ = a ;<br><br>System.<span class="hljs-keyword">out</span>.println(b)；    <span class="hljs-comment">// 22</span><br></code></pre></td></tr></table></figure><h4 id="短路逻辑运算符-amp-amp-和"><a href="#短路逻辑运算符-amp-amp-和" class="headerlink" title="短路逻辑运算符 &amp;&amp;和||"></a>短路逻辑运算符 &amp;&amp;和||</h4><ul><li><p>逻辑与 &amp;，无论左边 true false，右边都要执行。</p><p>​    短路与 &amp;&amp;，如果左边为 true，右边执行；如果左边为 false，右边不执行。</p></li><li><p>逻辑或 |，无论左边 true false，右边都要执行。</p><p>​    短路或 ||，如果左边为 false，右边执行；如果左边为 true，右边不执行。</p></li></ul><p>一般使用&amp;&amp;，||，提高运算效率（如果前面判断结束，后面就不执行）</p><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4> <img src="/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.png" class=""> <h4 id="方法调用与内存的关系"><a href="#方法调用与内存的关系" class="headerlink" title="方法调用与内存的关系"></a>方法调用与内存的关系</h4><p>方法没有被调用的时候，在方法区中的字节码文件中存放<br>方法被调用的时候，需要进入到栈内存中运行</p> <img src="/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003/%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8.png" class=""> <h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><ul><li>在同一个类中，定义了多个同名的方法，但每个方法具有不同的参数类型或参数个数，这些同名的方法，就构成了重载关系</li><li>简单记：同一个类中，方法名相同，参数不同的方法<br>参数不同：个数不同、类型不同、<strong>顺序不同</strong></li><li><em>注意：识别方法之间是否是重载关系，只看方法名和参数，跟返回值无关。</em></li></ul>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
      <tag>运算符</tag>
      
      <tag>方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2_标识符,基本数据类型,Scanner,类型转换,二进制原码</title>
    <link href="/2023/02/01/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/"/>
    <url>/2023/02/01/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习笔记2"><a href="#Java学习笔记2" class="headerlink" title="Java学习笔记2"></a>Java学习笔记2</h1><p><em>南山的风吹散了谷堆,北海的水淹没了墓碑.</em><br><em>不是每个人，在蓦然茴首时，都可以看得到灯火阑珊处的那个人</em></p><hr><h3 id="Debug-工具"><a href="#Debug-工具" class="headerlink" title="Debug 工具"></a>Debug 工具</h3><p>Debug调试，又被称为断点调试，断点其实是一个标记，告诉Debug从标记的地方开始查看；</p><p>可以运行两个断点之间的代码</p><h3 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h3><ul><li>由数字、字母、下划线(_)和美元符($)组成</li><li>不能以数字开头</li><li>不能是关键字</li><li>区分大小写</li></ul><h3 id="标识符命名规范"><a href="#标识符命名规范" class="headerlink" title="标识符命名规范"></a>标识符命名规范</h3><p><strong>小驼峰命名法：变量</strong></p><p>规范1：标识符是一个单词的时候，所有字母小写    name</p><p>规范2：标识符由多个单词组成的时候，从第二个单词开始，首字母大写      firstName</p><p><strong>大驼峰命名法：类</strong></p><p>规范1：标识符是一个单词的时候，首字母大写    Student</p><p>规范2：标识符由多个单词组成的时候，每个单词的首字母大写        GoodStudent</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>整数默认是int                   当long时数据尾部加L</p><p>浮点数默认是double        当float时数据尾部加F</p><p>byte型数据取值范围-128~127</p><h4 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h4><p>输入字符串是scanner.next()</p><p>整数浮点数是scanner.nextInt;scanner.nextDouble；</p><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>当   +   操作中，遇到了字符串，这时 + 就是字符串连接符，而不是算术运算。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">System</span>.out.println(<span class="hljs-string">&quot;1+1=&quot;</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>输出：1+1&#x3D;11</p><p>原因：逐个分析数据，先+1，然后整体再+1；就是”1+1&#x3D;1“+1，结果1+1&#x3D;11</p><h3 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h3><p>只操作变量。（常量不行）</p><ul><li>如果放在变量的后边，在变量的后面，先拿变量的值进行运算，再对变量的值进行+1、-1 </li><li>如果放在变量的前边，先对变量进行+1、-1，再拿变量的值进行运算。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">int</span> a = <span class="hljs-number">3</span>;<br><span class="hljs-built_in">int</span> b = (++a) + (a++) + (a*<span class="hljs-number">10</span>);<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;a=&quot;</span> + a);       <span class="hljs-comment">//a=5</span><br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;b=&quot;</span> + b);       <span class="hljs-comment">//b=58</span><br></code></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h5 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h5><p>介绍: 将取值范围小的数据或变量, 给取值范围大的变量赋值, 可以直接赋值<br>         取值范围从小到大</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">byte</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">short</span>（char） -&gt;</span> <span class="hljs-function"><span class="hljs-title">int</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">long</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">float</span> -&gt;</span> double<br></code></pre></td></tr></table></figure><p><em>问题: float占用4个字节, 为什么放在了</em>long(8个字节)的后面*<br><em>解释: 虽然float占用4个字节, 但是 [取值范围] 要比8个字节的long 更大</em><br>                        - <strong>小数的二进制存储形式, 更加节省内存</strong>*</p><p>基本的隐式转换：<br>把一个取值范围小的数值或者变量，赋值给另一个取值范围大的变量</p><p>运算中的隐式转换：<br>取值范围小的数据，和取值范围大的数据进行运算，小的会先提升为大的之后，再进行运算<br>byte short char 三种数据在运算的时候，都会提升为int，然后再进行运算</p><h5 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h5><p>介绍 : 将取值范围大的数据或变量, 给取值范围小的变量赋值, 不允许直接赋值, 需要加入强转</p><p><em>注意 : 强制转换 <strong>[有可能]</strong> 会出现精度损失</em></p><h6 id="强转中的精度损失"><a href="#强转中的精度损失" class="headerlink" title="强转中的精度损失"></a>强转中的精度损失</h6><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int a <span class="hljs-operator">=</span> <span class="hljs-number">130</span><span class="hljs-comment">;</span><br>byte b<span class="hljs-operator">=</span> (byte) a<span class="hljs-comment">;</span><br>System.out.println(b)<span class="hljs-comment">;     //-126</span><br></code></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>1.整数130 ：默认为int，int占用4个字节，也就是4组8个二进制位</p><p>00000000 00000000 00000000 10000010‬</p><p>2.强转到byte：4个字节，强制转换为1个字节，就是砍掉前3组8位</p><p>10000010‬</p><p>3.根据运算后的补码，反向推原码</p><p>11111110    即-126</p><h3 id="计算机中进制的分类∶"><a href="#计算机中进制的分类∶" class="headerlink" title="计算机中进制的分类∶"></a>计算机中进制的分类∶</h3><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">计算机中进制的分类 </span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br>        <span class="hljs-attribute">十进制</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">默认</span><br>        <span class="hljs-attribute">二进制</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">0b开头</span><br>        <span class="hljs-attribute">八进制</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">0开头</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">编写数值, 尽量不要以0开头&#123;09就是错误的&#125;</span><br>        <span class="hljs-attribute">十六进制</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">0x开头</span><br></code></pre></td></tr></table></figure><h3 id="类型转换两种实例："><a href="#类型转换两种实例：" class="headerlink" title="类型转换两种实例："></a>类型转换两种实例：</h3><p><em>类型转换面试题 : 下列代码是否存在错误, 如果有, 请指出说明, 并改正</em></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">byte </span><span class="hljs-keyword">b1 </span>= <span class="hljs-number">3</span>;<br><span class="hljs-keyword">byte </span><span class="hljs-keyword">b2 </span>= <span class="hljs-number">4</span>;<br><span class="hljs-keyword">byte </span><span class="hljs-keyword">b3 </span>= <span class="hljs-keyword">b1 </span>+ <span class="hljs-keyword">b2;</span><br></code></pre></td></tr></table></figure><p>错误原因:<br>                b1和b2是两个byte类型, 在运算的时候, 会提升为int类型<br>                提升之后, 就是两个int在运算了, 运算的结果还是int.<br>                将int类型的结果, 赋值给byte类型的变量, 属于大给小, 不能直接给.</p><p>修改后：    </p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">byte </span><span class="hljs-keyword">b1 </span>= <span class="hljs-number">3</span>;<br>   <span class="hljs-keyword">byte </span><span class="hljs-keyword">b2 </span>= <span class="hljs-number">4</span>;<br>   <span class="hljs-keyword">byte </span><span class="hljs-keyword">b3 </span>= (<span class="hljs-keyword">byte)(b1 </span>+ <span class="hljs-keyword">b2);</span><br></code></pre></td></tr></table></figure><p><em>下面代码是否能编译通过：</em></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">byte</span> b = <span class="hljs-number">3</span> + <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><p><strong>可以解释：Java存在常量优化机制 : 在编译的时候 (javac) 就会将3和4这两个字面量进行运算.</strong><br><strong>产生的字节码文件 :  byte b &#x3D; 7;</strong></p><h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><p>可以将编译好的.class文件拖到IDEA中（或者直接jdk工具），查看编译后的文件变化。</p><p>如上述：byte b &#x3D; 3+4 ；</p><p>反编译后 ：byte b &#x3D; 7；</p><h3 id="反码-原码-补码"><a href="#反码-原码-补码" class="headerlink" title="反码 原码 补码"></a>反码 原码 补码</h3><p>计组中的知识点，简单汇总</p><p><strong>原码</strong><br>数据的二进制体现形式，一个字节由 8 个二进制位组成<br>高位：二进制数据中，最左侧的数据，通过高位代表符号位<br>    0 代表正数<br>    1 代表负数<br>    其余位，表示数值大小<br>弊端：遇到负数运算，可能会出现错误</p><p><strong>反码</strong><br>正数的反码与其原码相同<br>负数的反码是对其原码逐位取反，但符号位除外</p><p><strong>补码</strong><br>正数的补码与其原码相同<br>负数的补码是在其反码的末位加1</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE，标识符</tag>
      
      <tag>基本数据类型</tag>
      
      <tag>Scanner</tag>
      
      <tag>类型转换</tag>
      
      <tag>二进制原码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1_JAVA配置知识</title>
    <link href="/2023/02/01/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/"/>
    <url>/2023/02/01/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</url>
    
    <content type="html"><![CDATA[<h2 id="Java学习笔记1"><a href="#Java学习笔记1" class="headerlink" title="Java学习笔记1"></a>Java学习笔记1</h2><h4 id="人机交互方式"><a href="#人机交互方式" class="headerlink" title="人机交互方式"></a>人机交互方式</h4><ul><li>图形化界面</li><li>命令行</li></ul><p><strong>图形化界面消耗内存，运行速度慢。</strong></p><h4 id="Path环境变量"><a href="#Path环境变量" class="headerlink" title="Path环境变量"></a>Path环境变量</h4><p>系统中的一个大管家, 帮我们记录了很多软件的完整路径<br>当我们要运行一个程序，而没有告诉它程序所在的完整路径时<br>系统除了在当前目录下面寻找此程序外，还会到path中指定的路径去找</p><p><em>注：在之前的Java以及各种软件的环境变量配置中，配置Path路径的次数很多，但是为什么要配置，是这次学习中了解到的，简单理解来说就是可以在任何情况下使用软件，正常来说jdk安装完后要在该目录下运行java.exe,javac.exe才能编译运行代码，所以要将编写好的.java文件放在这里才可。但当把需要的java.exe等配置在Path目录时，就可以在别的文件目录中直接运行了。</em></p><h6 id=""><a href="#" class="headerlink" title=""></a></h6><h4 id="Java-SE-Java-ME-Java-EE"><a href="#Java-SE-Java-ME-Java-EE" class="headerlink" title="Java SE     Java ME     Java EE"></a>Java SE     Java ME     Java EE</h4><ul><li>Java SE : Java 语言的（标准版），用于桌面应用的开发，是其他两个版本的基础。</li></ul><p><em>桌面应用 ：用户只要打开程序，程序的界面会让用户在最短的时间内找到他们需要的功能，同时主动带领用户完成他们的工作并得到最好的体验。</em></p><ul><li>Java ME : Java 语言的（小型版），用于嵌入式消费类电子设备     [现在基本不用]</li><li>Java EE : Java 语言的（企业版），用于 Web 方向的网站开发。</li></ul><h4 id="JVM、JRE、JDK"><a href="#JVM、JRE、JDK" class="headerlink" title="JVM、JRE、JDK"></a>JVM、JRE、JDK</h4><ul><li>JVM（Java Virtual Machine）：Java虚拟机, 真正运行Java程序的地方</li><li>核心类库：Java自己写好的程序，给程序员自己的程序调用的</li><li>JRE（Java Runtime Environment）: Java的运行环境</li><li>JDK（Java Development Kit）: Java开发工具包（包括上面所有）</li></ul><p>JRE包括JVM和核心类库   JDK包括JRE和开发工具(Java,Javac……)</p><h4 id="Java-跨平台性"><a href="#Java-跨平台性" class="headerlink" title="Java 跨平台性"></a>Java 跨平台性</h4><p><strong>Java 程序可以在任意操作系统上运行</strong></p><p>在需要运行 Java 应用程序的操作系统上，安装一个与操作系统对应的Java虚拟机(JVM Java Virtual Machine)即可。</p><p><em>注：JVM 虚拟机本身不允许跨平台，允许跨平台的是 Java 程序</em></p><h4 id="一些JAVA基础知识"><a href="#一些JAVA基础知识" class="headerlink" title="一些JAVA基础知识"></a>一些JAVA基础知识</h4><p>JAVA_HOME使用原因：其他软件配合使用，所以名称不能变</p><p><em>注：如果电脑重启后环境变量失效的解决方案</em><br><em>1.重新打开path环境变量，无需做任何改动，点击确定</em><br><em>2.不使用JAVA_HOME将bin目录的完整路径配置到path中</em></p><p>JDK 11开始支持java直接运行源代码文件，但是最好不要用，因为打包等情况时必须要.class文件，不编译成class文件无法使用</p><p>对于public的暂时理解:限制类名称和文件名需要保持一致</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>JAVA SE学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA SE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客说明</title>
    <link href="/2023/01/30/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/"/>
    <url>/2023/01/30/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h2 id="本站文章内容说明"><a href="#本站文章内容说明" class="headerlink" title="本站文章内容说明"></a>本站文章内容说明</h2><h3 id="内容概要"><a href="#内容概要" class="headerlink" title="内容概要"></a>内容概要</h3><p>本博客主要记录作者的学习笔记，平时会遇到的一些问题总结，欢迎阅读者在评论中讨论，看到会回复。</p><p><em><strong>注：采用无后端的valine评论系统，如需删除评论可追加评论告知</strong></em></p><h3 id="后续内容再补充"><a href="#后续内容再补充" class="headerlink" title="后续内容再补充"></a>后续内容再补充</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>你好</title>
    <link href="/2023/01/30/%E4%BD%A0%E5%A5%BD/"/>
    <url>/2023/01/30/%E4%BD%A0%E5%A5%BD/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p> <img src="/2023/01/30/%E4%BD%A0%E5%A5%BD/test.png" class="" title="图片引用方法一"> ]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/30/hello-world/"/>
    <url>/2023/01/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
