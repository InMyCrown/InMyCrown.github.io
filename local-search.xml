<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JAVA学习笔记07</title>
    <link href="/2023/02/05/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/"/>
    <url>/2023/02/05/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习笔记7"><a href="#Java学习笔记7" class="headerlink" title="Java学习笔记7"></a>Java学习笔记7</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><h3 id="创建Student类的对象进行使用"><a href="#创建Student类的对象进行使用" class="headerlink" title="创建Student类的对象进行使用"></a>创建Student类的对象进行使用</h3><ol><li><p>创建对象的格式<br>类名 对象名 &#x3D; new 类名();</p></li><li><p>使用对象成员变量的格式<br>对象名.成员变量;</p></li><li><p>使用对象成员方法的格式<br>对象名.成员方法();</p></li></ol><hr><p>细节:</p><p>1.打印对象名, 可以看到对象的内存地址</p><p>com.njucm.Student@4eec7777<br>全类名 : 包名 + 类名</p><p>2.成员变量就算没有赋值, 也可以直接用, 使用的是对象的默认值</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>Java当中要想创建对象, 必须现有类的存在</p><p>类 : 一组相关属性和行为的集合, 将其看做为是对象的设计图.<br>对象 : 是根据设计图(类), 创建出来的实体</p><h4 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系:"></a>类和对象的关系:</h4><pre><code class="hljs">依赖关系: 需要根据类, 创建对象量关系: 根据一个类, 可以创建出多个对象</code></pre><p>类的组成:</p><p>​        类的本质 : 就是对事物进行的描述</p><p>​        属性(大多为名词): 在代码中使用成员变量表示, 成员变量跟之前定义变量的格式一样, 只不过位置发生了改变, 类中方法外.</p><p>​        行为(大多为动词): 在代码中使用成员方法表示, 成员方法跟之前定义方法的格式一样, 只不过需要去掉 static 关键字</p><h3 id="对象内存图"><a href="#对象内存图" class="headerlink" title="对象内存图"></a>对象内存图</h3><p><em>具体动画查看对应文件夹下“内存动画.pptx”文件。</em></p><h5 id="单个对象内存图"><a href="#单个对象内存图" class="headerlink" title="单个对象内存图"></a>单个对象内存图</h5> <img src="/2023/02/05/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/1.png" class=""> <h5 id="两个对象内存图"><a href="#两个对象内存图" class="headerlink" title="两个对象内存图"></a>两个对象内存图</h5> <img src="/2023/02/05/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/2.png" class=""> <h5 id="两个引用指向相同内存图"><a href="#两个引用指向相同内存图" class="headerlink" title="两个引用指向相同内存图"></a>两个引用指向相同内存图</h5> <img src="/2023/02/05/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/3.png" class=""> <p><strong>JAVA里的垃圾自动清理，堆中不用的会一定时间内被自动清理，不需要delete</strong></p><h3 id="成员变量和局部变量的区别"><a href="#成员变量和局部变量的区别" class="headerlink" title="成员变量和局部变量的区别"></a>成员变量和局部变量的区别</h3> <img src="/2023/02/05/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/%E5%8C%BA%E5%88%AB.png" class=""><h3 id="This关键字"><a href="#This关键字" class="headerlink" title="This关键字"></a>This关键字</h3><p><strong>成员变量和局部变量重名的情况, Java使用的是就近原则</strong></p><p>问题: 非要使用成员变量, 怎么办?<br>解决: 使用this关键字进行区分</p><p>this可以区分局部变量和成员变量的重名问题</p><h5 id="this关键字的作用"><a href="#this关键字的作用" class="headerlink" title="this关键字的作用:"></a>this关键字的作用:</h5><p>​        this可以调用本类成员 (变量, 方法)</p><p>​            this.本类成员变量<br>​            this.本类成员方法();</p><p>​        this.的省略规则 :</p><p>​            本类成员方法 : 没有前提条件, this.可以直接省略<br>​            本类成员变量 : 方法中没有出现重名的变量, this.才可以省略</p><hr><h5 id="this-代表当前类对象的引用-地址"><a href="#this-代表当前类对象的引用-地址" class="headerlink" title="this : 代表当前类对象的引用(地址)"></a>this : 代表当前类对象的引用(地址)</h5><ul><li><p>谁调用就代表谁.</p><p>方法中的this, 代表的就是哪一个对象.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">Student stu1 = <span class="hljs-built_in">new</span> Student();<br>System.out.<span class="hljs-built_in">println</span>(stu1);<br>Student stu2 = <span class="hljs-built_in">new</span> Student();<br>System.out.<span class="hljs-built_in">println</span>(stu2);<br>stu1.<span class="hljs-built_in">print</span>()  <span class="hljs-comment">// ----&gt; this ---&gt; stu1的地址</span><br>stu2.<span class="hljs-built_in">print</span>()  <span class="hljs-comment">// ----&gt; this ---&gt; stu2的地址</span><br></code></pre></td></tr></table></figure></li></ul><p>​                </p><h3 id="构造方法-构造器"><a href="#构造方法-构造器" class="headerlink" title="构造方法(构造器)"></a>构造方法(构造器)</h3><p>初始化一个新建的对象<br>构建、创造对象的时候，所调用的方法</p><h5 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h5><p>1.方法名与类名相同，大小写也要一致<br>2.没有返回值类型，连void都没有<br>3.没有具体的返回值（不能由return带回结果数据）</p><h5 id="构造方法的作用"><a href="#构造方法的作用" class="headerlink" title="构造方法的作用 :"></a>构造方法的作用 :</h5><pre><code class="hljs">       1. 本质的作用 : 创建对象       2. 结合执行时机 : 可以创建对象的时候, 给对象中的数据初始化</code></pre><h5 id="构造方法的注意事项"><a href="#构造方法的注意事项" class="headerlink" title="构造方法的注意事项 :"></a>构造方法的注意事项 :</h5><pre><code class="hljs">       1. 一个类中, 没有编写构造方法, 系统将会提供一个 **[默认的] [无参数]** 的构造方法       2. 一个类中, 如果手动编写了构造方法, 系统将不会再提供那个默认的无参构造了       3. 构造方法不允许手动调用          * *建议 : 编写类的时候, 无参构造, 带参构造, 全部手动给出*</code></pre><p><strong>执行完构造方法里的语句后再将地址赋值回来。</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Student stu</span> = new Student(<span class="hljs-string">&quot;你好&quot;</span>,123);<br></code></pre></td></tr></table></figure><p>new在堆内存形成一个地址存放默认数据，栈内存中调用Student的有参构造方法，执行赋值语句，使堆内存中参数值改为你好，123； 最后将堆内存地址值传回来给stu。</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>使用类设计对象时将需要处理的数据以及处理这些数据的方法, 设计到对象中</p><p><strong>封装的设计规范 : 合理隐藏, 合理暴露</strong></p><ul><li>更好的维护数据</li><li>使用者无需关心内部实现, 只要知道如何使用即可</li></ul><h5 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符 :"></a>权限修饰符 :</h5><p>​            private : 同一个类中<br>​            (default) : 同一个类中, 同一个包中<br>​            protected : 同一个类中, 同一个包中, 不同包的子类<br>​            public : 任意位置访问</p><h3 id="标准JavaBean"><a href="#标准JavaBean" class="headerlink" title="标准JavaBean"></a>标准JavaBean</h3><ul><li>这个类中的成员变量都要私有，并且要对外提供相应的getXxx ，setXxx方法</li><li>类中提供无参, 带参构造方法。</li></ul><h5 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h5><p>只负责数据存取，而对数据的处理交给其他类来完成，以实现数据和数据业务处理相分离。</p><p><strong>安装插件JSP：直接获取构造方法，getXxx ，setXxx方法。</strong></p><h3 id="电影信息系统"><a href="#电影信息系统" class="headerlink" title="电影信息系统"></a>电影信息系统</h3><p>需求</p><ul><li>展示系统中的全部电影(每部电影展示：名称、评分)</li><li>允许用户根据电影编号（id）查询出某个电影的详细信息</li></ul> <img src="/2023/02/05/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007/%E5%9B%BE%E7%89%871.png" class=""><p>代码：</p><p>Moive</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Movie</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String time;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br>    <span class="hljs-keyword">private</span> String area;<br>    <span class="hljs-keyword">private</span> String type;<br>    <span class="hljs-keyword">private</span> String director;<br>    <span class="hljs-keyword">private</span> String starring;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String title, String time, <span class="hljs-type">double</span> score, String area, String type, String director, String starring)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.title = title;<br>        <span class="hljs-built_in">this</span>.time = time;<br>        <span class="hljs-built_in">this</span>.score = score;<br>        <span class="hljs-built_in">this</span>.area = area;<br>        <span class="hljs-built_in">this</span>.type = type;<br>        <span class="hljs-built_in">this</span>.director = director;<br>        <span class="hljs-built_in">this</span>.starring = starring;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTitle</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> title;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTitle</span><span class="hljs-params">(String title)</span> &#123;<br>        <span class="hljs-built_in">this</span>.title = title;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> time;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTime</span><span class="hljs-params">(String time)</span> &#123;<br>        <span class="hljs-built_in">this</span>.time = time;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getArea</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> area;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setArea</span><span class="hljs-params">(String area)</span> &#123;<br>        <span class="hljs-built_in">this</span>.area = area;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setType</span><span class="hljs-params">(String type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.type = type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDirector</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> director;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDirector</span><span class="hljs-params">(String director)</span> &#123;<br>        <span class="hljs-built_in">this</span>.director = director;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStarring</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> starring;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStarring</span><span class="hljs-params">(String starring)</span> &#123;<br>        <span class="hljs-built_in">this</span>.starring = starring;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MovieService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MovieService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Movie[] movies;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MovieService</span><span class="hljs-params">(Movie[] movies)</span> &#123;<br>        <span class="hljs-built_in">this</span>.movies = movies;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 启动电影信息管理系统</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br><br>        lo:<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;----------电影信息系统----------&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;请输入您的选择:&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;1. 查询全部电影信息&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;2. 根据id查询电影信息&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;3. 退出&quot;</span>);<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">choice</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>            <span class="hljs-keyword">switch</span> (choice) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    queryMovieInfos();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    queryMovieInfoById();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    System.out.println(<span class="hljs-string">&quot;感谢您的使用, 再见!&quot;</span>);<br>                    <span class="hljs-keyword">break</span> lo;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;您的输入有误, 请检查&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 此方法根据电影编号, 查询电影详情信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryMovieInfoById</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 键盘录入用户输入的编号</span><br>        System.out.println(<span class="hljs-string">&quot;请输入您要查询的电影编号:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-comment">// 2. 遍历数组, 从数组中查询电影信息</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; movies.length; i++) &#123;<br>            <span class="hljs-type">Movie</span> <span class="hljs-variable">movie</span> <span class="hljs-operator">=</span> movies[i];<br>            <span class="hljs-keyword">if</span>(movie.getId() == id)&#123;<br>                <span class="hljs-comment">// 3. 将找到的电影信息, 打印在控制台</span><br>                System.out.println(movie.getId() + <span class="hljs-string">&quot;---&quot;</span> + movie.getTitle() + <span class="hljs-string">&quot;---&quot;</span> + movie.getTime()<br>                        + <span class="hljs-string">&quot;---&quot;</span> + movie.getScore() + <span class="hljs-string">&quot;---&quot;</span> + movie.getArea() + <span class="hljs-string">&quot;---&quot;</span><br>                        + movie.getType() + <span class="hljs-string">&quot;---&quot;</span> + movie.getDirector() + <span class="hljs-string">&quot;---&quot;</span> + movie.getStarring());<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 代码要是走到这里, 说明没找到</span><br>        System.out.println(<span class="hljs-string">&quot;您输入的编号不存在, 请检查!&quot;</span>);<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 展示系统中全部的电影 (名称, 评分)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryMovieInfos</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 遍历数组, 取出每一个电影对象</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; movies.length; i++) &#123;<br>            <span class="hljs-type">Movie</span> <span class="hljs-variable">movie</span> <span class="hljs-operator">=</span> movies[i];<br>            <span class="hljs-comment">// System.out.println(movie);   打印对象名, 会看到内存地址</span><br>            <span class="hljs-comment">// 2. 通过电影对象, 调用内部getXxx方法, 获取信息并打印</span><br>            System.out.println(movie.getTitle() + <span class="hljs-string">&quot;---&quot;</span> + movie.getScore());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MovieTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Movie</span> <span class="hljs-variable">movie1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;东八区的先生们&quot;</span>, <span class="hljs-string">&quot;2022&quot;</span>, <span class="hljs-number">2.1</span>, <span class="hljs-string">&quot;中国大陆&quot;</span>, <span class="hljs-string">&quot;剧情 喜剧&quot;</span>, <span class="hljs-string">&quot;夏睿&quot;</span>, <span class="hljs-string">&quot;张翰 王晓晨&quot;</span>);<br>        <span class="hljs-type">Movie</span> <span class="hljs-variable">movie2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;上海堡垒&quot;</span>, <span class="hljs-string">&quot;2019&quot;</span>, <span class="hljs-number">2.9</span>, <span class="hljs-string">&quot;中国大陆&quot;</span>, <span class="hljs-string">&quot;爱情 战争 科幻&quot;</span>, <span class="hljs-string">&quot;滕华涛&quot;</span>, <span class="hljs-string">&quot;鹿晗 舒淇&quot;</span>);<br>        <span class="hljs-type">Movie</span> <span class="hljs-variable">movie3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;纯洁心灵·逐梦演艺圈&quot;</span>, <span class="hljs-string">&quot;2015&quot;</span>, <span class="hljs-number">2.2</span>, <span class="hljs-string">&quot;中国大陆&quot;</span>, <span class="hljs-string">&quot;剧情 喜剧&quot;</span>, <span class="hljs-string">&quot;毕志飞&quot;</span>, <span class="hljs-string">&quot;朱一文 李彦漫&quot;</span>);<br><br>        Movie[] movies = &#123;movie1, movie2, movie3&#125;;<br><br>        <span class="hljs-comment">// 该如何将一个类中的数据, 传递给另外一个类</span><br>        <span class="hljs-type">MovieService</span> <span class="hljs-variable">movieService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MovieService</span>(movies);<br>        movieService.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA 对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA学习笔记06</title>
    <link href="/2023/02/05/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006/"/>
    <url>/2023/02/05/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006/</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习笔记6"><a href="#Java学习笔记6" class="headerlink" title="Java学习笔记6"></a>Java学习笔记6</h1><p>几个案例实现过程中的知识点记录</p><h3 id="x3D-x3D-符号"><a href="#x3D-x3D-符号" class="headerlink" title="&#x3D;&#x3D;符号"></a>&#x3D;&#x3D;符号</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">== :</span><br><span class="hljs-code">        1. 基本数据类型 : 比较数据值</span><br><span class="hljs-code">        2. 引用数据类型 : 比较地址值</span><br></code></pre></td></tr></table></figure><h3 id="查找索引位置，返回类型为数组"><a href="#查找索引位置，返回类型为数组" class="headerlink" title="查找索引位置，返回类型为数组"></a>查找索引位置，返回类型为数组</h3><p><strong>需求: 设计一个方法, 查找元素在数组中的索引位置 (考虑重复元素问题)</strong><br><em>注意: return只能返回一个结果</em></p><p>问题: 当一个方法运行结束后, 有多个结果需要返回, 怎么处理?<br>回答: 可以将多个结果, 存入一个数组容器, 将数组返回.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] getIndex(<span class="hljs-type">int</span> num, <span class="hljs-type">int</span>[] arr) &#123;<br>    <span class="hljs-comment">// 1. 统计要查找的元素, 在数组中出现的个数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span>(arr[i] == num)&#123;<br>            count++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 2. 根据统计出来的个数, 创建数组容器</span><br>    <span class="hljs-type">int</span>[] results = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[count];<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 3. 查找元素在数组中的索引, 将找到的索引, 存入数组容器</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span>(arr[i] == num)&#123;<br>            <span class="hljs-comment">// results[0] = 0;</span><br>            <span class="hljs-comment">// results[1] = 5;</span><br>            <span class="hljs-comment">// results[2] = 6;</span><br>            results[index] = i;<br>            index++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 4. 将装满了索引的数组, 返回</span><br>    <span class="hljs-keyword">return</span> results;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Swap"><a href="#Swap" class="headerlink" title="Swap"></a>Swap</h3><p>思路: 今后只要涉及到数据交换, 联想到第三方的变量</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">int</span> b = <span class="hljs-number">20</span>;<br><br><span class="hljs-built_in">int</span> c = a;<br>a = b;<br>b = c;<br><br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;a=&quot;</span> + a);   <span class="hljs-comment">// 20</span><br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;b=&quot;</span> + b);   <span class="hljs-comment">// 10 </span><br></code></pre></td></tr></table></figure><p><strong>面试题: 实现两个变量的数据交换, 不允许定义第三方变量</strong></p><p> ^ 异或 :</p><pre><code class="hljs">  特点:          1. 相同为false, 不同为true          2. 一个数字, 被另外一个数字异或两次, 该数本身不变</code></pre><p> 异或操作数值的运算过程 :</p><pre><code class="hljs">    1. 将需要运算的数据, 转换为二进制数据            0000 1010       10            0000 0101       5    2. 将二进制数据的0当做为false, 1当做为true, 运算            0000 1010        ^   0000 0101    --------------------            0000 1111    3. 将运算后的二进制数据, 转换为十进制</code></pre><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>a = a ^ b;  <span class="hljs-comment">// a = 10 ^ 20;</span><br>b = a ^ b;  <span class="hljs-comment">// b = 10 ^ 20 ^ 20;            b = 10</span><br>a = a ^ b;  <span class="hljs-comment">// a = 10 ^ 20 ^ 10;            a = 20</span><br></code></pre></td></tr></table></figure><h5 id="前后倒置的解决方法："><a href="#前后倒置的解决方法：" class="headerlink" title="前后倒置的解决方法："></a>前后倒置的解决方法：</h5><h6 id="解决1：i-和-length-1-i"><a href="#解决1：i-和-length-1-i" class="headerlink" title="解决1：i 和 length-1-i"></a>解决1：i 和 length-1-i</h6><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs prolog">确定好谁跟谁换<br><br>        第一个和倒数第一个 :  arr[<span class="hljs-number">0</span>]  arr[arr.length<span class="hljs-number">-1</span><span class="hljs-number">-0</span>]<br>        第二个和倒数第二个 :  arr[<span class="hljs-number">1</span>]  arr[arr.length<span class="hljs-number">-1</span><span class="hljs-number">-1</span>]<br>        第三个和倒数第三个 :  arr[<span class="hljs-number">2</span>]  arr[arr.length<span class="hljs-number">-1</span><span class="hljs-number">-2</span>]<br>        ...<br><br>        arr[i]  arr[arr.length<span class="hljs-number">-1</span>-i]<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseArray1</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length / <span class="hljs-number">2</span>; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>        arr[i] = arr[arr.length-<span class="hljs-number">1</span>-i];<br>        arr[arr.length-<span class="hljs-number">1</span>-i] = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="解决2：前后指针-start-end"><a href="#解决2：前后指针-start-end" class="headerlink" title="解决2：前后指针 start end"></a>解决2：前后指针 start end</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseArray2</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, end = arr.length - <span class="hljs-number">1</span>; start &lt; end; start++, end--)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[start];<br>        arr[start] = arr[end];<br>        arr[end] = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><em><strong>注：for语句的格式，初始化可以定义多个，不用在for循环上方定义了；最后的循环执行语句也可以多条，即不用写在循环体里了。</strong></em></p><h3 id="随机产生验证码"><a href="#随机产生验证码" class="headerlink" title="随机产生验证码"></a>随机产生验证码</h3><p>从26个英文字母（大小写都包含），以及数字0-9中，随机产生一个5位的字符串验证码并打印在控制台<br>效果：uYq8I，3r4Zj</p><p>随机效果的实现：</p><p><strong>从数组中随机取出一个元素根据数组的长度, 产生一个随机数, 拿着这个随机数, 当做索引去数组中获取元素</strong></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] sArr = &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>&#125;;<br>               <span class="hljs-comment">// 0    1    2    3    4</span><br><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> r.nextInt(sArr.length);           <span class="hljs-comment">//  0  1  2  3  4</span><br>System.out.println(i);<br>System.out.println(sArr[i]);<br></code></pre></td></tr></table></figure><p>字符叠加效果的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>s += <span class="hljs-string">&#x27;a&#x27;</span>;<br>s += <span class="hljs-string">&#x27;b&#x27;</span>;<br>s += <span class="hljs-string">&#x27;c&#x27;</span>;<br>System.out.println(s);<br></code></pre></td></tr></table></figure><p><strong>注：打印字符类型数组名, 不会看到地址值, 而是元素的内容</strong>[char类型的print输出语句就是输出其内容]</p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    <span class="hljs-type">char</span>[] chs = getContents();<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">checkCode</span> <span class="hljs-operator">=</span> getCheckCode(chs);<br><br>    System.out.println(<span class="hljs-string">&quot;产生的验证码为:&quot;</span> + checkCode);<br><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getCheckCode</span><span class="hljs-params">(<span class="hljs-type">char</span>[] chs)</span> &#123;<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">checkCode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">randomIndex</span> <span class="hljs-operator">=</span> r.nextInt(chs.length);<br>        checkCode += chs[randomIndex];<br>    &#125;<br>    <span class="hljs-keyword">return</span> checkCode;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span>[] getContents() &#123;<br>    <span class="hljs-type">char</span>[] chs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">26</span> + <span class="hljs-number">26</span> + <span class="hljs-number">10</span>];<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>; c &lt;= <span class="hljs-string">&#x27;z&#x27;</span>; c++)&#123;<br>        chs[index] = c;<br>        index++;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>; c &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>; c++)&#123;<br>        chs[index] = c;<br>        index++;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span>; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>; c++)&#123;<br>        chs[index] = c;<br>        index++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> chs;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA学习笔记05</title>
    <link href="/2023/02/04/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005/"/>
    <url>/2023/02/04/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005/</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习笔记5"><a href="#Java学习笔记5" class="headerlink" title="Java学习笔记5"></a>Java学习笔记5</h1><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><p>数组介绍 : 一种容器, 可以存储同种数据类型的多个值</p><p>数组的使用场景 : 发现手里的数据有多个, 并且这多个数据还属于同一组数据, 就可以考虑使用数组容器进行维护.</p><p>初始化 : 在内存中, 为数组容器开辟空间, 并将数据存入容器的过程.</p><hr><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">数组的定义格式 :<br><br>        <span class="hljs-number">1</span>. 数据类型[] 数组名;<br><br>        <span class="hljs-number">2</span>. 数据类型 数组名<span class="hljs-selector-attr">[]</span>;<br></code></pre></td></tr></table></figure><p>​        注意 : 这种定义格式, 定义出来的, 只是数组类型的变量而已, 内存中还没有创建出数组容器.</p><h3 id="数组的静态初始化格式"><a href="#数组的静态初始化格式" class="headerlink" title="数组的静态初始化格式"></a>数组的静态初始化格式</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 完整格式 :<br><span class="hljs-code">            数据类型[] 数组名 = new 数据类型[]&#123;元素1, 元素2, 元素3...&#125;;</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">2.</span> 简化格式 :<br><span class="hljs-code">           数据类型[] 数组名 = &#123;元素1, 元素2, 元素3...&#125;;</span><br></code></pre></td></tr></table></figure><p>打印输出数组名 :System.out.println(array);<br>       示例输出： [I@776ec8df</p><p>@ : 分割符<br>[ : 当前空间, 是数组类型的<br>I : 当前数组类型, 是int类型<br>776ec8df : 数组的十六进制内存地址</p><h3 id="数组元素访问格式"><a href="#数组元素访问格式" class="headerlink" title="数组元素访问格式"></a>数组元素访问格式</h3><p>​        数组名[索引];</p><p>​        索引 : 数组容器中空间所对应的编号, 编号从0开始, 逐个+1增长</p><h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><p>将数中的每一个(所有)的内容, 取出来进行操作</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">数组名.length : 动态获取到数组的长度 (元素的个数)<br></code></pre></td></tr></table></figure><p><em>IDEA中数组遍历快捷键 : 数组名.fori</em></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">注：double a <span class="hljs-operator">=</span> <span class="hljs-number">5</span>/<span class="hljs-number">2</span>     // a<span class="hljs-operator">=</span><span class="hljs-number">2.0</span>，先计算后赋值<br></code></pre></td></tr></table></figure><h3 id="数组的动态初始化"><a href="#数组的动态初始化" class="headerlink" title="数组的动态初始化"></a>数组的动态初始化</h3><p>在初始化的时候, 只需要指定数组的长度, 系统就会分配默认值(初始值)</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ada">格式: 数据类型[] 数组名 = <span class="hljs-keyword">new</span> 数据类型[长度];<br><br>默认值的分类 :<br><br>        整数 : 0<br>        小数 : 0.0<br>        布尔 : <span class="hljs-type">false</span><br>        <span class="hljs-comment">---------------------------</span><br>        字符 : &#x27;\<span class="hljs-type">u0000</span>&#x27;       <span class="hljs-comment">---&gt; Unicode字符  ---&gt; 常见的体现是空白字符</span><br>        引用数据类型 : <span class="hljs-keyword"><span class="hljs-keyword">null</span></span><br><br>        引用数据类型 : 数组, 类, 接口<br>        String : 类<br></code></pre></td></tr></table></figure><p><em>ctrl + alt + M :IDEA中抽取方法的快捷键</em></p><h3 id="数组两种初始化的区别"><a href="#数组两种初始化的区别" class="headerlink" title="数组两种初始化的区别"></a>数组两种初始化的区别</h3><p><strong>初始化：就是在内存中，为数组容器开辟空间，并将数据存入容器中的过程。</strong></p><p>​    动态初始化: 手动指定长度, 系统分配默认初始化值<br>​    静态初始化: 手动指定元素, 系统会根据元素的个数, 计算出数组的长度</p><p>两种初始化的使用选择 :</p><pre><code class="hljs">1. 静态初始化: 如果要操作的数据, 需求中已经明确给出了, 直接静态初始化                需求: 已知班级学生成绩为 100 100 90 20 100, 找出最高分                int[] arr = &#123;100,100,90,20,100&#125;;1. 动态初始化: 只明确元素个数, 不明确具体数值                需求1: 键盘录入5个学生成绩, 找出最高分                需求2: 产生10个1~100之间的随机数, 找出最小值</code></pre><h3 id="JAVA中内存分配"><a href="#JAVA中内存分配" class="headerlink" title="JAVA中内存分配"></a>JAVA中内存分配</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span>[] <span class="hljs-built_in">array</span>1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-built_in">int</span>[] <span class="hljs-built_in">array</span>2 = <span class="hljs-built_in">array</span>1;<br></code></pre></td></tr></table></figure><p><em>解释：array1将地址复制一份给array2</em></p><p>​            <em>操作array2时array一样变</em></p><p><strong>即：两个数组指向相同内存</strong></p> <img src="/2023/02/04/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.png" class=""> <p>截取了一个实例：</p> <img src="/2023/02/04/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005/%E5%AE%9E%E4%BE%8B.png" class=""> <p><strong>简化格式只是简化了代码书写，真正运行期间还是按照完整格式运行的int[] arr &#x3D; new int[]{11,22,33};</strong></p><h3 id="方法的参数传递问题"><a href="#方法的参数传递问题" class="headerlink" title="方法的参数传递问题 :"></a>方法的参数传递问题 :</h3><pre><code class="hljs">   1. 基本数据类型: 传递的是数据值   2. 引用数据类型: 传递的是地址值</code></pre><p>​    <em><em>问题: Java到底是值传递, 还是址传递?</em><br>​    答: 值传递, 地址值也是值</em></p><h3 id="数组使用常见问题"><a href="#数组使用常见问题" class="headerlink" title="数组使用常见问题"></a>数组使用常见问题</h3><h4 id="索引越界异常"><a href="#索引越界异常" class="headerlink" title="索引越界异常"></a>索引越界异常</h4><p>ArrayIndexOutOfBoundsException 当访问了数组中不存在的索引，就会引发索引越界异常</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= arr.<span class="hljs-built_in">length</span>; i++)&#123;<br>    System.<span class="hljs-keyword">out</span>.println(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="空指针异常"><a href="#空指针异常" class="headerlink" title="空指针异常"></a>空指针异常</h4><p>当引用数据类型变量被赋值为 null 之后，地址的指向被切断，还继续访问堆内存数据，就会引发空指针异常</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-attribute">arr</span> = null;<br><span class="hljs-attribute">System</span>.out.println(arr[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>二维数组是一种容器，该容器用于存储一维数组</p><p>总结: 二维数组在存储一维数组的时候, 具体存储的是一维数组的地址值</p><h3 id="二维数组的元素访问格式"><a href="#二维数组的元素访问格式" class="headerlink" title="二维数组的元素访问格式"></a>二维数组的元素访问格式</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">数组名[m索引][n索引] :<br><br> <span class="hljs-type">m</span>索引 : 指定访问哪一个一维数组<br> n索引 : 访问一维数组中的哪一个元素<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">打印输出二维数组名和各一维数组名<br>System.<span class="hljs-keyword">out</span>.println(arr);        <span class="hljs-comment">// [[I@776ec8df</span><br><br>System.<span class="hljs-keyword">out</span>.println(arr[<span class="hljs-number">0</span>]);     <span class="hljs-comment">// [I@4eec7777</span><br>System.<span class="hljs-keyword">out</span>.println(arr[<span class="hljs-number">1</span>]);     <span class="hljs-comment">// [I@3b07d329</span><br></code></pre></td></tr></table></figure><h3 id="静态初始化格式"><a href="#静态初始化格式" class="headerlink" title="静态初始化格式"></a>静态初始化格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">完整格式：数据类型[][] 数组名 = <span class="hljs-keyword">new</span> 数据类型[][] &#123;&#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>&#125;,&#123;元素<span class="hljs-number">1</span>, 元素<span class="hljs-number">2</span>&#125;&#125;;<br><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>&#125;,&#123;<span class="hljs-number">33</span>,<span class="hljs-number">44</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">简化格式：数据类型[][] 数组名 = &#123;&#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>&#125;, &#123;元素<span class="hljs-number">1</span>, 元素<span class="hljs-number">2</span>&#125;&#125;;<br><span class="hljs-type">int</span>[][] arr = &#123;&#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>&#125;,&#123;<span class="hljs-number">33</span>,<span class="hljs-number">44</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><h3 id="动态初始化格式"><a href="#动态初始化格式" class="headerlink" title="动态初始化格式"></a>动态初始化格式</h3><p>格式：数据类型[][] 数组名 &#x3D; new 数据类型[m][n];<br>m表示这个二维数组，可以存放多少个一维数组<br>n表示每一个一维数组，可以存放多少个元素</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">int<span class="hljs-comment">[]</span><span class="hljs-comment">[]</span> arr = new int<span class="hljs-comment">[2]</span><span class="hljs-comment">[3]</span>;<br></code></pre></td></tr></table></figure><h3 id="内存存储"><a href="#内存存储" class="headerlink" title="内存存储"></a>内存存储</h3> <img src="/2023/02/04/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98.png" class=""> <p>解释：栈内存中首先存放main()，然后运行</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">int<span class="hljs-comment">[]</span><span class="hljs-comment">[]</span> arr = new int<span class="hljs-comment">[2]</span><span class="hljs-comment">[3]</span>;<br></code></pre></td></tr></table></figure><p>分配内存地址0x0011,存放length，一维数组0,1的地址（创建二维数组时自动生成0x0022和0x0033两个堆内存地址）；</p><p>运行代码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span>[] arr1 = &#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>&#125;;<br><span class="hljs-attribute">int</span>[] arr2 = &#123;<span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>&#125;;<br></code></pre></td></tr></table></figure><p>堆内存中生成0x00AA和0x00BB地址存放数据</p><p>最后赋值代码，将arr1和arr2的地址0x00AA和0x00BB赋给二维数组在堆中存放的一维数组地址</p>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习笔记04</title>
    <link href="/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004/"/>
    <url>/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004/</url>
    
    <content type="html"><![CDATA[<h2 id="Java学习笔记4"><a href="#Java学习笔记4" class="headerlink" title="Java学习笔记4"></a>Java学习笔记4</h2><h3 id="switch语句注意事项"><a href="#switch语句注意事项" class="headerlink" title="switch语句注意事项 :"></a>switch语句注意事项 :</h3><ol><li><p>case 后面的值不允许重复</p></li><li><p>case 后面的值, 只能是字面量, 不能是变量</p></li><li><p>switch () 中可以接收的类型</p><p>1). 基本数据类型: byte short char int<br>2). 引用数据类型: <u>jdk5版本开始可以是枚举, jdk7版本开始可以是String字符串</u></p></li></ol><h4 id="if-amp-switch"><a href="#if-amp-switch" class="headerlink" title="if&amp;switch"></a>if&amp;switch</h4><ul><li><strong>if语句：使用与范围性的判断</strong></li><li><strong>switch语句：适用于固定值的匹配</strong></li></ul><h3 id="switch语句的case穿透现象"><a href="#switch语句的case穿透现象" class="headerlink" title="switch语句的case穿透现象"></a>switch语句的case穿透现象</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">    需求: 键盘录入一个数值, <span class="hljs-number">1</span>~<span class="hljs-number">5</span> : 输出工作日  6~7 : 输出休息日<br><br>​    现象: 多个<span class="hljs-keyword">case</span>中存在了重复的代码, 考虑使用<span class="hljs-keyword">case</span>穿透来优化代码<br></code></pre></td></tr></table></figure><p>   jdk14版本开始, case后面允许编写多个数据, 多个数据中间使用逗号分隔</p><p>最简洁：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">switch(week)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> -&gt; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;工作日&quot;);<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>, <span class="hljs-number">7</span> -&gt; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;休息日&quot;);<br>    <span class="hljs-keyword">default</span> -&gt; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;您的输入有误&quot;);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>四种书写格式：</strong></p><p>1.正常switch格式  2.使用case穿透  3.jdk14之后的简化格式  4.LAMBDA表达式</p> <img src="/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004/case%E7%A9%BF%E9%80%8F%E7%8E%B0%E8%B1%A1.png" class=""> <h3 id="Contiune和Break-跳转控制语句"><a href="#Contiune和Break-跳转控制语句" class="headerlink" title="Contiune和Break 跳转控制语句"></a>Contiune和Break 跳转控制语句</h3><p>break   :  终止循环体内容的执行，也就是说结束当前的整个循环<br>continue:  跳过某次循环体内容的执行，继续下一次的执行</p><p><strong>break : 只能在循环, 和 switch 当中进行使用</strong><br><strong>continue : 只能在循环中进行使用</strong></p><h3 id="判断语句执行流程"><a href="#判断语句执行流程" class="headerlink" title="判断语句执行流程"></a>判断语句执行流程</h3><h5 id="if"><a href="#if" class="headerlink" title="if"></a>if</h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">if</span> (判断条件<span class="hljs-number">1</span>) &#123;<br>    语句体<span class="hljs-number">1</span>;<br>&#125; <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(判断条件<span class="hljs-number">2</span>)</span> </span>&#123;<br>    语句体<span class="hljs-number">2</span>;<br>&#125; <br>...<br><span class="hljs-keyword">else</span> &#123;<br>    语句体n+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.首先计算判断条件1的值<br>2.如果值为true就执行语句体1；如果值为false就计算判断条件2的值<br>3.如果值为true就执行语句体2；如果值为false就计算判断条件3的值<br>4….<br>5.如果没有任何判断条件为true，就执行语句体n+1。</p><h5 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">switch</span>(表达式) &#123;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">1</span>：<br>语句体<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">2</span>：<br>语句体<span class="hljs-number">2</span>;<br><span class="hljs-keyword">break</span>;<br>    …<br>    <span class="hljs-keyword">default</span>：<br>语句体n+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.拿着表达式的值，依次和case后面的值进行匹配，匹配成功，就会执行对应的语句，在执行的过程中，遇到break就会结束。<br>2.如果所有的case都不匹配，就会执行default里面的语句体，然后程序结束掉。</p><h3 id="循环语句执行流程"><a href="#循环语句执行流程" class="headerlink" title="循环语句执行流程"></a>循环语句执行流程</h3><h5 id="for循环语句格式"><a href="#for循环语句格式" class="headerlink" title="for循环语句格式 :"></a>for循环语句格式 :</h5><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">for(初始化语句<span class="hljs-comment">; 判断条件; 条件控制语句)&#123;</span><br>    循环体语句<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>执行流程:<br>            1. 执行初始化语句, 在整个循环过程中, 只执行一次<br>            2. 执行判断条件, 看其返回结果是true, false<br>                    false : 循环结束<br>                    true : 执行第三步<br>            3. 执行循环体语句<br>            4. 执行条件控制语句<br>            5. 回到2继续…</p><h5 id="while循环格式"><a href="#while循环格式" class="headerlink" title="while循环格式:"></a>while循环格式:</h5><pre><code class="hljs">    初始化语句;    while(判断条件)&#123;        循环体语句;        条件控制语句;    &#125;</code></pre><p>执行流程:<br>    1. 执行初始化语句<br>    2. 执行判断条件, 看其返回结果是true, false<br>            false : 循环结束<br>            true : 进入第三步<br>    3. 执行循环体语句<br>    4. 执行条件控制语句<br>    5. 回到2继续</p><h5 id="do…while循环格式"><a href="#do…while循环格式" class="headerlink" title="do…while循环格式 :"></a>do…while循环格式 :</h5><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">初始化语句<span class="hljs-comment">;</span><br>do &#123;<br>    循环体语句<span class="hljs-comment">;</span><br>    条件控制语句<span class="hljs-comment">;</span><br>&#125;while(判断条件)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>执行流程:</p><ol><li>执行初始化语句</li><li>执行循环体语句</li><li>执行条件控制语句</li><li>执行判断条件, 看其返回结果是true, false<br> false : 循环结束<br> true : 回到第二步继续</li></ol><h3 id="循环标号"><a href="#循环标号" class="headerlink" title="循环标号"></a>循环标号</h3><p>给循环起名字（标号），这样就可以break这个循环，而不是循环体中的某一层。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mel">flag:  <span class="hljs-comment">// 标号 : 给循环起名字</span><br><span class="hljs-keyword">while</span> (true) &#123;<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">choice</span> = sc.nextInt();<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">choice</span>) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">break</span> flag;   <span class="hljs-comment">//结束这个无限循环</span><br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h3><h5 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> r.nextInt(    );<br></code></pre></td></tr></table></figure><h5 id="使用实例：产生20-80之间的随机数"><a href="#使用实例：产生20-80之间的随机数" class="headerlink" title="使用实例：产生20~80之间的随机数"></a>使用实例：产生20~80之间的随机数</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> num = r.nextInt(<span class="hljs-number">61</span>) + <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><h3 id="猜数字小游戏"><a href="#猜数字小游戏" class="headerlink" title="猜数字小游戏"></a>猜数字小游戏</h3><p>1.使用Random产生一个 20~100 之间的随机数  —&gt; randomNumber</p><p>2.使用Scanner从键盘录入用户猜的数据 —&gt; scNumber</p><p>3.比对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        guessNumber();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">guessNumber</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-comment">// 1. 使用Random产生一个 20~100 之间的随机数  ---&gt; randomNumber</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">randomNumber</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">100</span>) + <span class="hljs-number">20</span>;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 2. 使用Scanner从键盘录入用户猜的数据 ---&gt; scNumber</span><br>            System.out.println(<span class="hljs-string">&quot;请输入:&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">scNumber</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>            <span class="hljs-comment">// 3. 比对</span><br>            <span class="hljs-keyword">if</span> (scNumber &gt; randomNumber) &#123;<br>                System.out.println(<span class="hljs-string">&quot;猜大了&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (scNumber &lt; randomNumber) &#123;<br>                System.out.println(<span class="hljs-string">&quot;猜小了&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;猜对了!&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;恭喜!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IDEA使用的一个技巧"><a href="#IDEA使用的一个技巧" class="headerlink" title="IDEA使用的一个技巧"></a>IDEA使用的一个技巧</h3><p>生成方法返回值快捷键:<br>      1.  方法名().var + 回车<br>            2.  ctrl + alt + V</p>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习笔记03</title>
    <link href="/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003/"/>
    <url>/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003/</url>
    
    <content type="html"><![CDATA[<h2 id="Java学习笔记3"><a href="#Java学习笔记3" class="headerlink" title="Java学习笔记3"></a>Java学习笔记3</h2><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">short s = <span class="hljs-number">1</span>;<br><br>s+ = <span class="hljs-number">1</span>;                   <span class="hljs-regexp">//</span> 正确<br>s = s + <span class="hljs-number">1</span>；               <span class="hljs-regexp">//</span> 编译失败<br></code></pre></td></tr></table></figure><p><strong>原因：扩展的赋值运算符隐含了强制类型转换</strong></p><p><em>再来看一个实例：</em></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">double</span> a = <span class="hljs-number">12.3</span> ;<br><br><span class="hljs-built_in">int</span> b = <span class="hljs-number">10</span> ;<br><br>b+ = a ;<br><br>System.<span class="hljs-keyword">out</span>.println(b)；    <span class="hljs-comment">// 22</span><br></code></pre></td></tr></table></figure><h4 id="短路逻辑运算符-amp-amp-和"><a href="#短路逻辑运算符-amp-amp-和" class="headerlink" title="短路逻辑运算符 &amp;&amp;和||"></a>短路逻辑运算符 &amp;&amp;和||</h4><ul><li><p>逻辑与 &amp;，无论左边 true false，右边都要执行。</p><p>​    短路与 &amp;&amp;，如果左边为 true，右边执行；如果左边为 false，右边不执行。</p></li><li><p>逻辑或 |，无论左边 true false，右边都要执行。</p><p>​    短路或 ||，如果左边为 false，右边执行；如果左边为 true，右边不执行。</p></li></ul><p>一般使用&amp;&amp;，||，提高运算效率（如果前面判断结束，后面就不执行）</p><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4> <img src="/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.png" class=""> <h4 id="方法调用与内存的关系"><a href="#方法调用与内存的关系" class="headerlink" title="方法调用与内存的关系"></a>方法调用与内存的关系</h4><p>方法没有被调用的时候，在方法区中的字节码文件中存放<br>方法被调用的时候，需要进入到栈内存中运行</p> <img src="/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003/%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8.png" class=""> <h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><ul><li>在同一个类中，定义了多个同名的方法，但每个方法具有不同的参数类型或参数个数，这些同名的方法，就构成了重载关系</li><li>简单记：同一个类中，方法名相同，参数不同的方法<br>参数不同：个数不同、类型不同、<strong>顺序不同</strong></li><li><em>注意：识别方法之间是否是重载关系，只看方法名和参数，跟返回值无关。</em></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习笔记02</title>
    <link href="/2023/02/01/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/"/>
    <url>/2023/02/01/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习笔记2"><a href="#Java学习笔记2" class="headerlink" title="Java学习笔记2"></a>Java学习笔记2</h1><p><em>南山的风吹散了谷堆,北海的水淹没了墓碑.</em><br><em>不是每个人，在蓦然茴首时，都可以看得到灯火阑珊处的那个人</em></p><hr><p>很基础的内容，简单记录一下。</p><h3 id="Debug-工具"><a href="#Debug-工具" class="headerlink" title="Debug 工具"></a>Debug 工具</h3><p>Debug调试，又被称为断点调试，断点其实是一个标记，告诉Debug从标记的地方开始查看；</p><p>可以运行两个断点之间的代码</p><h3 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h3><ul><li>由数字、字母、下划线(_)和美元符($)组成</li><li>不能以数字开头</li><li>不能是关键字</li><li>区分大小写</li></ul><h3 id="标识符命名规范"><a href="#标识符命名规范" class="headerlink" title="标识符命名规范"></a>标识符命名规范</h3><p><strong>小驼峰命名法：变量</strong></p><p>规范1：标识符是一个单词的时候，所有字母小写    name</p><p>规范2：标识符由多个单词组成的时候，从第二个单词开始，首字母大写      firstName</p><p><strong>大驼峰命名法：类</strong></p><p>规范1：标识符是一个单词的时候，首字母大写    Student</p><p>规范2：标识符由多个单词组成的时候，每个单词的首字母大写        GoodStudent</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>整数默认是int                   当long时数据尾部加L</p><p>浮点数默认是double        当float时数据尾部加F</p><p>byte型数据取值范围-128~127</p><h4 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h4><p>输入字符串是scanner.next()</p><p>整数浮点数是scanner.nextInt;scanner.nextDouble；</p><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>当   +   操作中，遇到了字符串，这时 + 就是字符串连接符，而不是算术运算。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">System</span>.out.println(<span class="hljs-string">&quot;1+1=&quot;</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>输出：1+1&#x3D;11</p><p>原因：逐个分析数据，先+1，然后整体再+1；就是”1+1&#x3D;1“+1，结果1+1&#x3D;11</p><h3 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h3><p>只操作变量。（常量不行）</p><ul><li>如果放在变量的后边，在变量的后面，先拿变量的值进行运算，再对变量的值进行+1、-1 </li><li>如果放在变量的前边，先对变量进行+1、-1，再拿变量的值进行运算。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">int</span> a = <span class="hljs-number">3</span>;<br><span class="hljs-built_in">int</span> b = (++a) + (a++) + (a*<span class="hljs-number">10</span>);<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;a=&quot;</span> + a);       <span class="hljs-comment">//a=5</span><br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;b=&quot;</span> + b);       <span class="hljs-comment">//b=58</span><br></code></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h5 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h5><p>介绍: 将取值范围小的数据或变量, 给取值范围大的变量赋值, 可以直接赋值<br>         取值范围从小到大</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">byte</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">short</span>（char） -&gt;</span> <span class="hljs-function"><span class="hljs-title">int</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">long</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">float</span> -&gt;</span> double<br></code></pre></td></tr></table></figure><p><em>问题: float占用4个字节, 为什么放在了</em>long(8个字节)的后面*<br><em>解释: 虽然float占用4个字节, 但是 [取值范围] 要比8个字节的long 更大</em><br>                        - <strong>小数的二进制存储形式, 更加节省内存</strong>*</p><p>基本的隐式转换：<br>把一个取值范围小的数值或者变量，赋值给另一个取值范围大的变量</p><p>运算中的隐式转换：<br>取值范围小的数据，和取值范围大的数据进行运算，小的会先提升为大的之后，再进行运算<br>byte short char 三种数据在运算的时候，都会提升为int，然后再进行运算</p><h5 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h5><p>介绍 : 将取值范围大的数据或变量, 给取值范围小的变量赋值, 不允许直接赋值, 需要加入强转</p><p><em>注意 : 强制转换 <strong>[有可能]</strong> 会出现精度损失</em></p><h6 id="强转中的精度损失"><a href="#强转中的精度损失" class="headerlink" title="强转中的精度损失"></a>强转中的精度损失</h6><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int a <span class="hljs-operator">=</span> <span class="hljs-number">130</span><span class="hljs-comment">;</span><br>byte b<span class="hljs-operator">=</span> (byte) a<span class="hljs-comment">;</span><br>System.out.println(b)<span class="hljs-comment">;     //-126</span><br></code></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>1.整数130 ：默认为int，int占用4个字节，也就是4组8个二进制位</p><p>00000000 00000000 00000000 10000010‬</p><p>2.强转到byte：4个字节，强制转换为1个字节，就是砍掉前3组8位</p><p>10000010‬</p><p>3.根据运算后的补码，反向推原码</p><p>11111110    即-126</p><h3 id="计算机中进制的分类∶"><a href="#计算机中进制的分类∶" class="headerlink" title="计算机中进制的分类∶"></a>计算机中进制的分类∶</h3><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">计算机中进制的分类 </span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br>        <span class="hljs-attribute">十进制</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">默认</span><br>        <span class="hljs-attribute">二进制</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">0b开头</span><br>        <span class="hljs-attribute">八进制</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">0开头</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">编写数值, 尽量不要以0开头&#123;09就是错误的&#125;</span><br>        <span class="hljs-attribute">十六进制</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">0x开头</span><br></code></pre></td></tr></table></figure><h3 id="类型转换两种实例："><a href="#类型转换两种实例：" class="headerlink" title="类型转换两种实例："></a>类型转换两种实例：</h3><p><em>类型转换面试题 : 下列代码是否存在错误, 如果有, 请指出说明, 并改正</em></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">byte </span><span class="hljs-keyword">b1 </span>= <span class="hljs-number">3</span>;<br><span class="hljs-keyword">byte </span><span class="hljs-keyword">b2 </span>= <span class="hljs-number">4</span>;<br><span class="hljs-keyword">byte </span><span class="hljs-keyword">b3 </span>= <span class="hljs-keyword">b1 </span>+ <span class="hljs-keyword">b2;</span><br></code></pre></td></tr></table></figure><p>错误原因:<br>                b1和b2是两个byte类型, 在运算的时候, 会提升为int类型<br>                提升之后, 就是两个int在运算了, 运算的结果还是int.<br>                将int类型的结果, 赋值给byte类型的变量, 属于大给小, 不能直接给.</p><p>修改后：    </p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">byte </span><span class="hljs-keyword">b1 </span>= <span class="hljs-number">3</span>;<br>   <span class="hljs-keyword">byte </span><span class="hljs-keyword">b2 </span>= <span class="hljs-number">4</span>;<br>   <span class="hljs-keyword">byte </span><span class="hljs-keyword">b3 </span>= (<span class="hljs-keyword">byte)(b1 </span>+ <span class="hljs-keyword">b2);</span><br></code></pre></td></tr></table></figure><p><em>下面代码是否能编译通过：</em></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">byte</span> b = <span class="hljs-number">3</span> + <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><p><strong>可以解释：Java存在常量优化机制 : 在编译的时候 (javac) 就会将3和4这两个字面量进行运算.</strong><br><strong>产生的字节码文件 :  byte b &#x3D; 7;</strong></p><h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><p>可以将编译好的.class文件拖到IDEA中（或者直接jdk工具），查看编译后的文件变化。</p><p>如上述：byte b &#x3D; 3+4 ；</p><p>反编译后 ：byte b &#x3D; 7；</p><h3 id="反码-原码-补码"><a href="#反码-原码-补码" class="headerlink" title="反码 原码 补码"></a>反码 原码 补码</h3><p>计组中的知识点，简单汇总</p><p><strong>原码</strong><br>数据的二进制体现形式，一个字节由 8 个二进制位组成<br>高位：二进制数据中，最左侧的数据，通过高位代表符号位<br>    0 代表正数<br>    1 代表负数<br>    其余位，表示数值大小<br>弊端：遇到负数运算，可能会出现错误</p><p><strong>反码</strong><br>正数的反码与其原码相同<br>负数的反码是对其原码逐位取反，但符号位除外</p><p><strong>补码</strong><br>正数的补码与其原码相同<br>负数的补码是在其反码的末位加1</p>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习笔记01</title>
    <link href="/2023/02/01/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/"/>
    <url>/2023/02/01/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</url>
    
    <content type="html"><![CDATA[<h2 id="Java学习笔记1"><a href="#Java学习笔记1" class="headerlink" title="Java学习笔记1"></a>Java学习笔记1</h2><p>一些基础的JAVA配置知识，不涉及具体的代码部分。</p><h4 id="人机交互方式"><a href="#人机交互方式" class="headerlink" title="人机交互方式"></a>人机交互方式</h4><ul><li>图形化界面</li><li>命令行</li></ul><p><strong>图形化界面消耗内存，运行速度慢。</strong></p><h4 id="Path环境变量"><a href="#Path环境变量" class="headerlink" title="Path环境变量"></a>Path环境变量</h4><p>系统中的一个大管家, 帮我们记录了很多软件的完整路径<br>当我们要运行一个程序，而没有告诉它程序所在的完整路径时<br>系统除了在当前目录下面寻找此程序外，还会到path中指定的路径去找</p><p><em>注：在之前的Java以及各种软件的环境变量配置中，配置Path路径的次数很多，但是为什么要配置，是这次学习中了解到的，简单理解来说就是可以在任何情况下使用软件，正常来说jdk安装完后要在该目录下运行java.exe,javac.exe才能编译运行代码，所以要将编写好的.java文件放在这里才可。但当把需要的java.exe等配置在Path目录时，就可以在别的文件目录中直接运行了。</em></p><h6 id=""><a href="#" class="headerlink" title=""></a></h6><h4 id="Java-SE-Java-ME-Java-EE"><a href="#Java-SE-Java-ME-Java-EE" class="headerlink" title="Java SE     Java ME     Java EE"></a>Java SE     Java ME     Java EE</h4><ul><li>Java SE : Java 语言的（标准版），用于桌面应用的开发，是其他两个版本的基础。</li></ul><p><em>桌面应用 ：用户只要打开程序，程序的界面会让用户在最短的时间内找到他们需要的功能，同时主动带领用户完成他们的工作并得到最好的体验。</em></p><ul><li>Java ME : Java 语言的（小型版），用于嵌入式消费类电子设备     [现在基本不用]</li><li>Java EE : Java 语言的（企业版），用于 Web 方向的网站开发。</li></ul><h4 id="JVM、JRE、JDK"><a href="#JVM、JRE、JDK" class="headerlink" title="JVM、JRE、JDK"></a>JVM、JRE、JDK</h4><ul><li>JVM（Java Virtual Machine）：Java虚拟机, 真正运行Java程序的地方</li><li>核心类库：Java自己写好的程序，给程序员自己的程序调用的</li><li>JRE（Java Runtime Environment）: Java的运行环境</li><li>JDK（Java Development Kit）: Java开发工具包（包括上面所有）</li></ul><p>JRE包括JVM和核心类库   JDK包括JRE和开发工具(Java,Javac……)</p><h4 id="Java-跨平台性"><a href="#Java-跨平台性" class="headerlink" title="Java 跨平台性"></a>Java 跨平台性</h4><p><strong>Java 程序可以在任意操作系统上运行</strong></p><p>在需要运行 Java 应用程序的操作系统上，安装一个与操作系统对应的Java虚拟机(JVM Java Virtual Machine)即可。</p><p><em>注：JVM 虚拟机本身不允许跨平台，允许跨平台的是 Java 程序</em></p><h4 id="一些JAVA基础知识"><a href="#一些JAVA基础知识" class="headerlink" title="一些JAVA基础知识"></a>一些JAVA基础知识</h4><p>JAVA_HOME使用原因：其他软件配合使用，所以名称不能变</p><p><em>注：如果电脑重启后环境变量失效的解决方案</em><br><em>1.重新打开path环境变量，无需做任何改动，点击确定</em><br><em>2.不使用JAVA_HOME将bin目录的完整路径配置到path中</em></p><p>JDK 11开始支持java直接运行源代码文件，但是最好不要用，因为打包等情况时必须要.class文件，不编译成class文件无法使用</p><p>对于public的暂时理解:限制类名称和文件名需要保持一致</p>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客说明</title>
    <link href="/2023/01/30/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/"/>
    <url>/2023/01/30/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h2 id="本站文章内容说明"><a href="#本站文章内容说明" class="headerlink" title="本站文章内容说明"></a>本站文章内容说明</h2><h3 id="内容概要"><a href="#内容概要" class="headerlink" title="内容概要"></a>内容概要</h3><p>本博客主要记录作者的学习笔记，平时会遇到的一些问题总结，欢迎阅读者在评论中讨论，看到会回复。</p><p><em><strong>注：采用无后端的valine评论系统，如需删除评论可追加评论告知</strong></em></p><h3 id="后续内容再补充"><a href="#后续内容再补充" class="headerlink" title="后续内容再补充"></a>后续内容再补充</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>你好</title>
    <link href="/2023/01/30/%E4%BD%A0%E5%A5%BD/"/>
    <url>/2023/01/30/%E4%BD%A0%E5%A5%BD/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p> <img src="/2023/01/30/%E4%BD%A0%E5%A5%BD/test.png" class="" title="图片引用方法一"> ]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/30/hello-world/"/>
    <url>/2023/01/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
