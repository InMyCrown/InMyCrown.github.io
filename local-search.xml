<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java学习笔记04</title>
    <link href="/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004/"/>
    <url>/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004/</url>
    
    <content type="html"><![CDATA[<h2 id="Java学习笔记4"><a href="#Java学习笔记4" class="headerlink" title="Java学习笔记4"></a>Java学习笔记4</h2><h3 id="switch语句注意事项"><a href="#switch语句注意事项" class="headerlink" title="switch语句注意事项 :"></a>switch语句注意事项 :</h3><ol><li><p>case 后面的值不允许重复</p></li><li><p>case 后面的值, 只能是字面量, 不能是变量</p></li><li><p>switch () 中可以接收的类型</p><p>1). 基本数据类型: byte short char int<br>2). 引用数据类型: <u>jdk5版本开始可以是枚举, jdk7版本开始可以是String字符串</u></p></li></ol><h4 id="if-amp-switch"><a href="#if-amp-switch" class="headerlink" title="if&amp;switch"></a>if&amp;switch</h4><ul><li><strong>if语句：使用与范围性的判断</strong></li><li><strong>switch语句：适用于固定值的匹配</strong></li></ul><h3 id="switch语句的case穿透现象"><a href="#switch语句的case穿透现象" class="headerlink" title="switch语句的case穿透现象"></a>switch语句的case穿透现象</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">    需求: 键盘录入一个数值, <span class="hljs-number">1</span>~<span class="hljs-number">5</span> : 输出工作日  6~7 : 输出休息日<br><br>​    现象: 多个<span class="hljs-keyword">case</span>中存在了重复的代码, 考虑使用<span class="hljs-keyword">case</span>穿透来优化代码<br></code></pre></td></tr></table></figure><p>   jdk14版本开始, case后面允许编写多个数据, 多个数据中间使用逗号分隔</p><p>最简洁：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">switch(week)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> -&gt; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;工作日&quot;);<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>, <span class="hljs-number">7</span> -&gt; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;休息日&quot;);<br>    <span class="hljs-keyword">default</span> -&gt; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;您的输入有误&quot;);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>四种书写格式：</strong></p><p>1.正常switch格式  2.使用case穿透  3.jdk14之后的简化格式  4.LAMBDA表达式</p> <img src="/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004/case%E7%A9%BF%E9%80%8F%E7%8E%B0%E8%B1%A1.png" class=""> <h3 id="Contiune和Break-跳转控制语句"><a href="#Contiune和Break-跳转控制语句" class="headerlink" title="Contiune和Break 跳转控制语句"></a>Contiune和Break 跳转控制语句</h3><p>break   :  终止循环体内容的执行，也就是说结束当前的整个循环<br>continue:  跳过某次循环体内容的执行，继续下一次的执行</p><p><strong>break : 只能在循环, 和 switch 当中进行使用</strong><br><strong>continue : 只能在循环中进行使用</strong></p><h3 id="判断语句执行流程"><a href="#判断语句执行流程" class="headerlink" title="判断语句执行流程"></a>判断语句执行流程</h3><h5 id="if"><a href="#if" class="headerlink" title="if"></a>if</h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">if</span> (判断条件<span class="hljs-number">1</span>) &#123;<br>    语句体<span class="hljs-number">1</span>;<br>&#125; <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(判断条件<span class="hljs-number">2</span>)</span> </span>&#123;<br>    语句体<span class="hljs-number">2</span>;<br>&#125; <br>...<br><span class="hljs-keyword">else</span> &#123;<br>    语句体n+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.首先计算判断条件1的值<br>2.如果值为true就执行语句体1；如果值为false就计算判断条件2的值<br>3.如果值为true就执行语句体2；如果值为false就计算判断条件3的值<br>4….<br>5.如果没有任何判断条件为true，就执行语句体n+1。</p><h5 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">switch</span>(表达式) &#123;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">1</span>：<br>语句体<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">2</span>：<br>语句体<span class="hljs-number">2</span>;<br><span class="hljs-keyword">break</span>;<br>    …<br>    <span class="hljs-keyword">default</span>：<br>语句体n+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.拿着表达式的值，依次和case后面的值进行匹配，匹配成功，就会执行对应的语句，在执行的过程中，遇到break就会结束。<br>2.如果所有的case都不匹配，就会执行default里面的语句体，然后程序结束掉。</p><h3 id="循环语句执行流程"><a href="#循环语句执行流程" class="headerlink" title="循环语句执行流程"></a>循环语句执行流程</h3><h5 id="for循环语句格式"><a href="#for循环语句格式" class="headerlink" title="for循环语句格式 :"></a>for循环语句格式 :</h5><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">for(初始化语句<span class="hljs-comment">; 判断条件; 条件控制语句)&#123;</span><br>    循环体语句<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>执行流程:<br>            1. 执行初始化语句, 在整个循环过程中, 只执行一次<br>            2. 执行判断条件, 看其返回结果是true, false<br>                    false : 循环结束<br>                    true : 执行第三步<br>            3. 执行循环体语句<br>            4. 执行条件控制语句<br>            5. 回到2继续…</p><h5 id="while循环格式"><a href="#while循环格式" class="headerlink" title="while循环格式:"></a>while循环格式:</h5><pre><code class="hljs">    初始化语句;    while(判断条件)&#123;        循环体语句;        条件控制语句;    &#125;</code></pre><p>执行流程:<br>    1. 执行初始化语句<br>    2. 执行判断条件, 看其返回结果是true, false<br>            false : 循环结束<br>            true : 进入第三步<br>    3. 执行循环体语句<br>    4. 执行条件控制语句<br>    5. 回到2继续</p><h5 id="do…while循环格式"><a href="#do…while循环格式" class="headerlink" title="do…while循环格式 :"></a>do…while循环格式 :</h5><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">初始化语句<span class="hljs-comment">;</span><br>do &#123;<br>    循环体语句<span class="hljs-comment">;</span><br>    条件控制语句<span class="hljs-comment">;</span><br>&#125;while(判断条件)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>执行流程:</p><ol><li>执行初始化语句</li><li>执行循环体语句</li><li>执行条件控制语句</li><li>执行判断条件, 看其返回结果是true, false<br> false : 循环结束<br> true : 回到第二步继续</li></ol><h3 id="循环标号"><a href="#循环标号" class="headerlink" title="循环标号"></a>循环标号</h3><p>给循环起名字（标号），这样就可以break这个循环，而不是循环体中的某一层。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mel">flag:  <span class="hljs-comment">// 标号 : 给循环起名字</span><br><span class="hljs-keyword">while</span> (true) &#123;<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">choice</span> = sc.nextInt();<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">choice</span>) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">break</span> flag;   <span class="hljs-comment">//结束这个无限循环</span><br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h3><h5 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> r.nextInt(    );<br></code></pre></td></tr></table></figure><h5 id="使用实例：产生20-80之间的随机数"><a href="#使用实例：产生20-80之间的随机数" class="headerlink" title="使用实例：产生20~80之间的随机数"></a>使用实例：产生20~80之间的随机数</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> num = r.nextInt(<span class="hljs-number">61</span>) + <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><h3 id="猜数字小游戏"><a href="#猜数字小游戏" class="headerlink" title="猜数字小游戏"></a>猜数字小游戏</h3><p>1.使用Random产生一个 20~100 之间的随机数  —&gt; randomNumber</p><p>2.使用Scanner从键盘录入用户猜的数据 —&gt; scNumber</p><p>3.比对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        guessNumber();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">guessNumber</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-comment">// 1. 使用Random产生一个 20~100 之间的随机数  ---&gt; randomNumber</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">randomNumber</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">100</span>) + <span class="hljs-number">20</span>;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 2. 使用Scanner从键盘录入用户猜的数据 ---&gt; scNumber</span><br>            System.out.println(<span class="hljs-string">&quot;请输入:&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">scNumber</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>            <span class="hljs-comment">// 3. 比对</span><br>            <span class="hljs-keyword">if</span> (scNumber &gt; randomNumber) &#123;<br>                System.out.println(<span class="hljs-string">&quot;猜大了&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (scNumber &lt; randomNumber) &#123;<br>                System.out.println(<span class="hljs-string">&quot;猜小了&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;猜对了!&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;恭喜!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IDEA使用的一个技巧"><a href="#IDEA使用的一个技巧" class="headerlink" title="IDEA使用的一个技巧"></a>IDEA使用的一个技巧</h3><p>生成方法返回值快捷键:<br>      1.  方法名().var + 回车<br>            2.  ctrl + alt + V</p>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习笔记03</title>
    <link href="/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003/"/>
    <url>/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003/</url>
    
    <content type="html"><![CDATA[<h2 id="Java学习笔记3"><a href="#Java学习笔记3" class="headerlink" title="Java学习笔记3"></a>Java学习笔记3</h2><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">short s = <span class="hljs-number">1</span>;<br><br>s+ = <span class="hljs-number">1</span>;                   <span class="hljs-regexp">//</span> 正确<br>s = s + <span class="hljs-number">1</span>；               <span class="hljs-regexp">//</span> 编译失败<br></code></pre></td></tr></table></figure><p><strong>原因：扩展的赋值运算符隐含了强制类型转换</strong></p><p><em>再来看一个实例：</em></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">double</span> a = <span class="hljs-number">12.3</span> ;<br><br><span class="hljs-built_in">int</span> b = <span class="hljs-number">10</span> ;<br><br>b+ = a ;<br><br>System.<span class="hljs-keyword">out</span>.println(b)；    <span class="hljs-comment">// 22</span><br></code></pre></td></tr></table></figure><h4 id="短路逻辑运算符-amp-amp-和"><a href="#短路逻辑运算符-amp-amp-和" class="headerlink" title="短路逻辑运算符 &amp;&amp;和||"></a>短路逻辑运算符 &amp;&amp;和||</h4><ul><li><p>逻辑与 &amp;，无论左边 true false，右边都要执行。</p><p>​    短路与 &amp;&amp;，如果左边为 true，右边执行；如果左边为 false，右边不执行。</p></li><li><p>逻辑或 |，无论左边 true false，右边都要执行。</p><p>​    短路或 ||，如果左边为 false，右边执行；如果左边为 true，右边不执行。</p></li></ul><p>一般使用&amp;&amp;，||，提高运算效率（如果前面判断结束，后面就不执行）</p><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4> <img src="/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.png" class=""> <h4 id="方法调用与内存的关系"><a href="#方法调用与内存的关系" class="headerlink" title="方法调用与内存的关系"></a>方法调用与内存的关系</h4><p>方法没有被调用的时候，在方法区中的字节码文件中存放<br>方法被调用的时候，需要进入到栈内存中运行</p> <img src="/2023/02/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003/%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8.png" class=""> <h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><ul><li>在同一个类中，定义了多个同名的方法，但每个方法具有不同的参数类型或参数个数，这些同名的方法，就构成了重载关系</li><li>简单记：同一个类中，方法名相同，参数不同的方法<br>参数不同：个数不同、类型不同、<strong>顺序不同</strong></li><li><em>注意：识别方法之间是否是重载关系，只看方法名和参数，跟返回值无关。</em></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习笔记02</title>
    <link href="/2023/02/01/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/"/>
    <url>/2023/02/01/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习笔记2"><a href="#Java学习笔记2" class="headerlink" title="Java学习笔记2"></a>Java学习笔记2</h1><p><em>南山的风吹散了谷堆,北海的水淹没了墓碑.</em><br><em>不是每个人，在蓦然茴首时，都可以看得到灯火阑珊处的那个人</em></p><hr><p>很基础的内容，简单记录一下。</p><h3 id="Debug-工具"><a href="#Debug-工具" class="headerlink" title="Debug 工具"></a>Debug 工具</h3><p>Debug调试，又被称为断点调试，断点其实是一个标记，告诉Debug从标记的地方开始查看；</p><p>可以运行两个断点之间的代码</p><h3 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h3><ul><li>由数字、字母、下划线(_)和美元符($)组成</li><li>不能以数字开头</li><li>不能是关键字</li><li>区分大小写</li></ul><h3 id="标识符命名规范"><a href="#标识符命名规范" class="headerlink" title="标识符命名规范"></a>标识符命名规范</h3><p><strong>小驼峰命名法：变量</strong></p><p>规范1：标识符是一个单词的时候，所有字母小写    name</p><p>规范2：标识符由多个单词组成的时候，从第二个单词开始，首字母大写      firstName</p><p><strong>大驼峰命名法：类</strong></p><p>规范1：标识符是一个单词的时候，首字母大写    Student</p><p>规范2：标识符由多个单词组成的时候，每个单词的首字母大写        GoodStudent</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>整数默认是int                   当long时数据尾部加L</p><p>浮点数默认是double        当float时数据尾部加F</p><p>byte型数据取值范围-128~127</p><h4 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h4><p>输入字符串是scanner.next()</p><p>整数浮点数是scanner.nextInt;scanner.nextDouble；</p><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>当   +   操作中，遇到了字符串，这时 + 就是字符串连接符，而不是算术运算。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">System</span>.out.println(<span class="hljs-string">&quot;1+1=&quot;</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>输出：1+1&#x3D;11</p><p>原因：逐个分析数据，先+1，然后整体再+1；就是”1+1&#x3D;1“+1，结果1+1&#x3D;11</p><h3 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h3><p>只操作变量。（常量不行）</p><ul><li>如果放在变量的后边，在变量的后面，先拿变量的值进行运算，再对变量的值进行+1、-1 </li><li>如果放在变量的前边，先对变量进行+1、-1，再拿变量的值进行运算。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">int</span> a = <span class="hljs-number">3</span>;<br><span class="hljs-built_in">int</span> b = (++a) + (a++) + (a*<span class="hljs-number">10</span>);<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;a=&quot;</span> + a);       <span class="hljs-comment">//a=5</span><br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;b=&quot;</span> + b);       <span class="hljs-comment">//b=58</span><br></code></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h5 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h5><p>介绍: 将取值范围小的数据或变量, 给取值范围大的变量赋值, 可以直接赋值<br>         取值范围从小到大</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">byte</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">short</span>（char） -&gt;</span> <span class="hljs-function"><span class="hljs-title">int</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">long</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">float</span> -&gt;</span> double<br></code></pre></td></tr></table></figure><p><em>问题: float占用4个字节, 为什么放在了</em>long(8个字节)的后面*<br><em>解释: 虽然float占用4个字节, 但是 [取值范围] 要比8个字节的long 更大</em><br>                        - <strong>小数的二进制存储形式, 更加节省内存</strong>*</p><p>基本的隐式转换：<br>把一个取值范围小的数值或者变量，赋值给另一个取值范围大的变量</p><p>运算中的隐式转换：<br>取值范围小的数据，和取值范围大的数据进行运算，小的会先提升为大的之后，再进行运算<br>byte short char 三种数据在运算的时候，都会提升为int，然后再进行运算</p><h5 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h5><p>介绍 : 将取值范围大的数据或变量, 给取值范围小的变量赋值, 不允许直接赋值, 需要加入强转</p><p><em>注意 : 强制转换 <strong>[有可能]</strong> 会出现精度损失</em></p><h6 id="强转中的精度损失"><a href="#强转中的精度损失" class="headerlink" title="强转中的精度损失"></a>强转中的精度损失</h6><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int a <span class="hljs-operator">=</span> <span class="hljs-number">130</span><span class="hljs-comment">;</span><br>byte b<span class="hljs-operator">=</span> (byte) a<span class="hljs-comment">;</span><br>System.out.println(b)<span class="hljs-comment">;     //-126</span><br></code></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>1.整数130 ：默认为int，int占用4个字节，也就是4组8个二进制位</p><p>00000000 00000000 00000000 10000010‬</p><p>2.强转到byte：4个字节，强制转换为1个字节，就是砍掉前3组8位</p><p>10000010‬</p><p>3.根据运算后的补码，反向推原码</p><p>11111110    即-126</p><h3 id="计算机中进制的分类∶"><a href="#计算机中进制的分类∶" class="headerlink" title="计算机中进制的分类∶"></a>计算机中进制的分类∶</h3><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">计算机中进制的分类 </span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br>        <span class="hljs-attribute">十进制</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">默认</span><br>        <span class="hljs-attribute">二进制</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">0b开头</span><br>        <span class="hljs-attribute">八进制</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">0开头</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">编写数值, 尽量不要以0开头&#123;09就是错误的&#125;</span><br>        <span class="hljs-attribute">十六进制</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">0x开头</span><br></code></pre></td></tr></table></figure><h3 id="类型转换两种实例："><a href="#类型转换两种实例：" class="headerlink" title="类型转换两种实例："></a>类型转换两种实例：</h3><p><em>类型转换面试题 : 下列代码是否存在错误, 如果有, 请指出说明, 并改正</em></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">byte </span><span class="hljs-keyword">b1 </span>= <span class="hljs-number">3</span>;<br><span class="hljs-keyword">byte </span><span class="hljs-keyword">b2 </span>= <span class="hljs-number">4</span>;<br><span class="hljs-keyword">byte </span><span class="hljs-keyword">b3 </span>= <span class="hljs-keyword">b1 </span>+ <span class="hljs-keyword">b2;</span><br></code></pre></td></tr></table></figure><p>错误原因:<br>                b1和b2是两个byte类型, 在运算的时候, 会提升为int类型<br>                提升之后, 就是两个int在运算了, 运算的结果还是int.<br>                将int类型的结果, 赋值给byte类型的变量, 属于大给小, 不能直接给.</p><p>修改后：    </p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">byte </span><span class="hljs-keyword">b1 </span>= <span class="hljs-number">3</span>;<br>   <span class="hljs-keyword">byte </span><span class="hljs-keyword">b2 </span>= <span class="hljs-number">4</span>;<br>   <span class="hljs-keyword">byte </span><span class="hljs-keyword">b3 </span>= (<span class="hljs-keyword">byte)(b1 </span>+ <span class="hljs-keyword">b2);</span><br></code></pre></td></tr></table></figure><p><em>下面代码是否能编译通过：</em></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">byte</span> b = <span class="hljs-number">3</span> + <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><p><strong>可以解释：Java存在常量优化机制 : 在编译的时候 (javac) 就会将3和4这两个字面量进行运算.</strong><br><strong>产生的字节码文件 :  byte b &#x3D; 7;</strong></p><h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><p>可以将编译好的.class文件拖到IDEA中（或者直接jdk工具），查看编译后的文件变化。</p><p>如上述：byte b &#x3D; 3+4 ；</p><p>反编译后 ：byte b &#x3D; 7；</p><h3 id="反码-原码-补码"><a href="#反码-原码-补码" class="headerlink" title="反码 原码 补码"></a>反码 原码 补码</h3><p>计组中的知识点，简单汇总</p><p><strong>原码</strong><br>数据的二进制体现形式，一个字节由 8 个二进制位组成<br>高位：二进制数据中，最左侧的数据，通过高位代表符号位<br>    0 代表正数<br>    1 代表负数<br>    其余位，表示数值大小<br>弊端：遇到负数运算，可能会出现错误</p><p><strong>反码</strong><br>正数的反码与其原码相同<br>负数的反码是对其原码逐位取反，但符号位除外</p><p><strong>补码</strong><br>正数的补码与其原码相同<br>负数的补码是在其反码的末位加1</p>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习笔记01</title>
    <link href="/2023/02/01/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/"/>
    <url>/2023/02/01/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</url>
    
    <content type="html"><![CDATA[<h2 id="Java学习笔记1"><a href="#Java学习笔记1" class="headerlink" title="Java学习笔记1"></a>Java学习笔记1</h2><p>一些基础的JAVA配置知识，不涉及具体的代码部分。</p><h4 id="人机交互方式"><a href="#人机交互方式" class="headerlink" title="人机交互方式"></a>人机交互方式</h4><ul><li>图形化界面</li><li>命令行</li></ul><p><strong>图形化界面消耗内存，运行速度慢。</strong></p><h4 id="Path环境变量"><a href="#Path环境变量" class="headerlink" title="Path环境变量"></a>Path环境变量</h4><p>系统中的一个大管家, 帮我们记录了很多软件的完整路径<br>当我们要运行一个程序，而没有告诉它程序所在的完整路径时<br>系统除了在当前目录下面寻找此程序外，还会到path中指定的路径去找</p><p><em>注：在之前的Java以及各种软件的环境变量配置中，配置Path路径的次数很多，但是为什么要配置，是这次学习中了解到的，简单理解来说就是可以在任何情况下使用软件，正常来说jdk安装完后要在该目录下运行java.exe,javac.exe才能编译运行代码，所以要将编写好的.java文件放在这里才可。但当把需要的java.exe等配置在Path目录时，就可以在别的文件目录中直接运行了。</em></p><h6 id=""><a href="#" class="headerlink" title=""></a></h6><h4 id="Java-SE-Java-ME-Java-EE"><a href="#Java-SE-Java-ME-Java-EE" class="headerlink" title="Java SE     Java ME     Java EE"></a>Java SE     Java ME     Java EE</h4><ul><li>Java SE : Java 语言的（标准版），用于桌面应用的开发，是其他两个版本的基础。</li></ul><p><em>桌面应用 ：用户只要打开程序，程序的界面会让用户在最短的时间内找到他们需要的功能，同时主动带领用户完成他们的工作并得到最好的体验。</em></p><ul><li>Java ME : Java 语言的（小型版），用于嵌入式消费类电子设备     [现在基本不用]</li><li>Java EE : Java 语言的（企业版），用于 Web 方向的网站开发。</li></ul><h4 id="JVM、JRE、JDK"><a href="#JVM、JRE、JDK" class="headerlink" title="JVM、JRE、JDK"></a>JVM、JRE、JDK</h4><ul><li>JVM（Java Virtual Machine）：Java虚拟机, 真正运行Java程序的地方</li><li>核心类库：Java自己写好的程序，给程序员自己的程序调用的</li><li>JRE（Java Runtime Environment）: Java的运行环境</li><li>JDK（Java Development Kit）: Java开发工具包（包括上面所有）</li></ul><p>JRE包括JVM和核心类库   JDK包括JRE和开发工具(Java,Javac……)</p><h4 id="Java-跨平台性"><a href="#Java-跨平台性" class="headerlink" title="Java 跨平台性"></a>Java 跨平台性</h4><p><strong>Java 程序可以在任意操作系统上运行</strong></p><p>在需要运行 Java 应用程序的操作系统上，安装一个与操作系统对应的Java虚拟机(JVM Java Virtual Machine)即可。</p><p><em>注：JVM 虚拟机本身不允许跨平台，允许跨平台的是 Java 程序</em></p><h4 id="一些JAVA基础知识"><a href="#一些JAVA基础知识" class="headerlink" title="一些JAVA基础知识"></a>一些JAVA基础知识</h4><p>JAVA_HOME使用原因：其他软件配合使用，所以名称不能变</p><p><em>注：如果电脑重启后环境变量失效的解决方案</em><br><em>1.重新打开path环境变量，无需做任何改动，点击确定</em><br><em>2.不使用JAVA_HOME将bin目录的完整路径配置到path中</em></p><p>JDK 11开始支持java直接运行源代码文件，但是最好不要用，因为打包等情况时必须要.class文件，不编译成class文件无法使用</p><p>对于public的暂时理解:限制类名称和文件名需要保持一致</p>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客说明</title>
    <link href="/2023/01/30/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/"/>
    <url>/2023/01/30/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h2 id="本站文章内容说明"><a href="#本站文章内容说明" class="headerlink" title="本站文章内容说明"></a>本站文章内容说明</h2><h3 id="内容概要"><a href="#内容概要" class="headerlink" title="内容概要"></a>内容概要</h3><p>本博客主要记录作者的学习笔记，平时会遇到的一些问题总结，欢迎阅读者在评论中讨论，看到会回复。</p><p><em><strong>注：采用无后端的valine评论系统，如需删除评论可追加评论告知</strong></em></p><h3 id="后续内容再补充"><a href="#后续内容再补充" class="headerlink" title="后续内容再补充"></a>后续内容再补充</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>你好</title>
    <link href="/2023/01/30/%E4%BD%A0%E5%A5%BD/"/>
    <url>/2023/01/30/%E4%BD%A0%E5%A5%BD/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p> <img src="/2023/01/30/%E4%BD%A0%E5%A5%BD/test.png" class="" title="图片引用方法一"> ]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/30/hello-world/"/>
    <url>/2023/01/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
